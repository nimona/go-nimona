// Code generated by nimona.io/tools/codegen. DO NOT EDIT.

package relationship

import (
	crypto "nimona.io/pkg/crypto"
	object "nimona.io/pkg/object"
)

type (
	RelationshipStreamRoot struct {
		Metadata object.Metadata `nimona:"@metadata:m"`
	}
	Added struct {
		Metadata    object.Metadata  `nimona:"@metadata:m"`
		Alias       string           `nimona:"alias:s"`
		RemoteParty crypto.PublicKey `nimona:"remoteParty:s"`
		Datetime    string           `nimona:"datetime:s"`
	}
	Removed struct {
		Metadata    object.Metadata  `nimona:"@metadata:m"`
		RemoteParty crypto.PublicKey `nimona:"remoteParty:s"`
		Datetime    string           `nimona:"datetime:s"`
	}
)

func (e *RelationshipStreamRoot) Type() string {
	return "stream:nimona.io/schema/relationship"
}

func (e *RelationshipStreamRoot) MarshalObject() (*object.Object, error) {
	o, err := object.Marshal(e)
	if err != nil {
		return nil, err
	}
	o.Type = "stream:nimona.io/schema/relationship"
	return o, nil
}

func (e *RelationshipStreamRoot) UnmarshalObject(o *object.Object) error {
	return object.Unmarshal(o, e)
}

func (e *Added) Type() string {
	return "event:nimona.io/schema/relationship.Added"
}

func (e *Added) MarshalObject() (*object.Object, error) {
	o, err := object.Marshal(e)
	if err != nil {
		return nil, err
	}
	o.Type = "event:nimona.io/schema/relationship.Added"
	return o, nil
}

func (e *Added) UnmarshalObject(o *object.Object) error {
	return object.Unmarshal(o, e)
}

func (e *Removed) Type() string {
	return "event:nimona.io/schema/relationship.Removed"
}

func (e *Removed) MarshalObject() (*object.Object, error) {
	o, err := object.Marshal(e)
	if err != nil {
		return nil, err
	}
	o.Type = "event:nimona.io/schema/relationship.Removed"
	return o, nil
}

func (e *Removed) UnmarshalObject(o *object.Object) error {
	return object.Unmarshal(o, e)
}
