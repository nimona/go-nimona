// Code generated by nimona.io. DO NOT EDIT.

package nimona

import (
	"github.com/vikyd/zero"
)

var _ = zero.IsZeroVal

func (t *DocumentGraphRequest) DocumentMap() DocumentMap {
	m := DocumentMap{}

	// # t.$type
	//
	// Type: string, Kind: string
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		m["$type"] = "core/document/graph.request"
	}

	// # t.RootDocumentID
	//
	// Type: nimona.DocumentID, Kind: struct
	// IsSlice: false, IsStruct: true, IsPointer: false
	{
		m["rootDocument"] = t.RootDocumentID.DocumentMap()
	}

	return m
}

func (t *DocumentGraphRequest) FromDocumentMap(m DocumentMap) {
	*t = DocumentGraphRequest{}

	// # t.RootDocumentID
	//
	// Type: nimona.DocumentID, Kind: struct
	// IsSlice: false, IsStruct: true, IsPointer: false
	{
		if v, ok := m["rootDocument"].(DocumentMap); ok {
			e := DocumentID{}
			e.FromDocumentMap(v)
			t.RootDocumentID = e
		}
	}

}
func (t *DocumentGraphResponse) DocumentMap() DocumentMap {
	m := DocumentMap{}

	// # t.$type
	//
	// Type: string, Kind: string
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		m["$type"] = "core/document/graph.response"
	}

	// # t.PatchDocumentIDs
	//
	// Type: []nimona.DocumentID, Kind: slice
	// IsSlice: true, IsStruct: false, IsPointer: false
	//
	// ElemType: nimona.DocumentID, ElemKind: struct
	// IsElemSlice: false, IsElemStruct: true, IsElemPointer: false
	{
		sm := []any{}
		for _, v := range t.PatchDocumentIDs {
			if !zero.IsZeroVal(t.PatchDocumentIDs) {
				sm = append(sm, v.DocumentMap())
			}
		}
		m["patchDocumentIDs"] = sm
	}

	// # t.RootDocumentID
	//
	// Type: nimona.DocumentID, Kind: struct
	// IsSlice: false, IsStruct: true, IsPointer: false
	{
		m["rootDocumentID"] = t.RootDocumentID.DocumentMap()
	}

	return m
}

func (t *DocumentGraphResponse) FromDocumentMap(m DocumentMap) {
	*t = DocumentGraphResponse{}

	// # t.PatchDocumentIDs
	//
	// Type: []nimona.DocumentID, Kind: slice
	// IsSlice: true, IsStruct: false, IsPointer: false
	//
	// ElemType: nimona.DocumentID, ElemKind: struct
	// IsElemSlice: false, IsElemStruct: true, IsElemPointer: false
	{
		sm := []DocumentID{}
		if vs, ok := m["patchDocumentIDs"].([]any); ok {
			for _, vi := range vs {
				v, ok := vi.(DocumentMap)
				if ok {
					e := DocumentID{}
					e.FromDocumentMap(v)
					sm = append(sm, e)
				}
			}
		}
		if len(sm) > 0 {
			t.PatchDocumentIDs = sm
		}
	}

	// # t.RootDocumentID
	//
	// Type: nimona.DocumentID, Kind: struct
	// IsSlice: false, IsStruct: true, IsPointer: false
	{
		if v, ok := m["rootDocumentID"].(DocumentMap); ok {
			e := DocumentID{}
			e.FromDocumentMap(v)
			t.RootDocumentID = e
		}
	}

}
