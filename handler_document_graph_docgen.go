// Code generated by nimona.io. DO NOT EDIT.

package nimona

import (
	"github.com/vikyd/zero"

	"nimona.io/tilde"
)

var _ = zero.IsZeroVal
var _ = tilde.NewScanner

func (t *DocumentGraphRequest) Document() *Document {
	return NewDocument(t.Map())
}

func (t *DocumentGraphRequest) Map() tilde.Map {
	m := tilde.Map{}

	// # t.$type
	//
	// Type: string, Kind: string, TildeKind: InvalidValueKind0
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		m.Set("$type", tilde.String("core/document/graph.request"))
	}

	// # t.RootDocumentID
	//
	// Type: nimona.DocumentID, Kind: struct, TildeKind: Map
	// IsSlice: false, IsStruct: true, IsPointer: false
	{
		m.Set("rootDocument", t.RootDocumentID.Map())
	}

	return m
}

func (t *DocumentGraphRequest) FromDocument(d *Document) error {
	return t.FromMap(d.Map())
}

func (t *DocumentGraphRequest) FromMap(d tilde.Map) error {
	*t = DocumentGraphRequest{}

	// # t.RootDocumentID
	//
	// Type: nimona.DocumentID, Kind: struct, TildeKind: Map
	// IsSlice: false, IsStruct: true, IsPointer: false
	{
		if v, err := d.Get("rootDocument"); err == nil {
			if v, ok := v.(tilde.Map); ok {
				e := DocumentID{}
				d := NewDocument(v)
				e.FromDocument(d)
				t.RootDocumentID = e
			}
		}
	}

	return nil
}
func (t *DocumentGraphResponse) Document() *Document {
	return NewDocument(t.Map())
}

func (t *DocumentGraphResponse) Map() tilde.Map {
	m := tilde.Map{}

	// # t.$type
	//
	// Type: string, Kind: string, TildeKind: InvalidValueKind0
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		m.Set("$type", tilde.String("core/document/graph.response"))
	}

	// # t.PatchDocumentIDs
	//
	// Type: []nimona.DocumentID, Kind: slice, TildeKind: List
	// IsSlice: true, IsStruct: false, IsPointer: false
	//
	// ElemType: nimona.DocumentID, ElemKind: struct
	// IsElemSlice: false, IsElemStruct: true, IsElemPointer: false
	{
		sm := tilde.List{}
		for _, v := range t.PatchDocumentIDs {
			if !zero.IsZeroVal(t.PatchDocumentIDs) {
				sm = append(sm, v.Map())
			}
		}
		m.Set("patchDocumentIDs", sm)
	}

	// # t.RootDocumentID
	//
	// Type: nimona.DocumentID, Kind: struct, TildeKind: Map
	// IsSlice: false, IsStruct: true, IsPointer: false
	{
		m.Set("rootDocumentID", t.RootDocumentID.Map())
	}

	return m
}

func (t *DocumentGraphResponse) FromDocument(d *Document) error {
	return t.FromMap(d.Map())
}

func (t *DocumentGraphResponse) FromMap(d tilde.Map) error {
	*t = DocumentGraphResponse{}

	// # t.PatchDocumentIDs
	//
	// Type: []nimona.DocumentID, Kind: slice, TildeKind: List
	// IsSlice: true, IsStruct: false, IsPointer: false
	//
	// ElemType: nimona.DocumentID, ElemKind: struct, ElemTildeKind: Map
	// IsElemSlice: false, IsElemStruct: true, IsElemPointer: false
	{
		sm := []DocumentID{}
		if vs, err := d.Get("patchDocumentIDs"); err == nil {
			if vs, ok := vs.(tilde.List); ok {
				for _, vi := range vs {
					if v, ok := vi.(tilde.Map); ok {
						e := DocumentID{}
						d := NewDocument(v)
						e.FromDocument(d)
						sm = append(sm, e)
					}
				}
			}
		}
		if len(sm) > 0 {
			t.PatchDocumentIDs = sm
		}
	}

	// # t.RootDocumentID
	//
	// Type: nimona.DocumentID, Kind: struct, TildeKind: Map
	// IsSlice: false, IsStruct: true, IsPointer: false
	{
		if v, err := d.Get("rootDocumentID"); err == nil {
			if v, ok := v.(tilde.Map); ok {
				e := DocumentID{}
				d := NewDocument(v)
				e.FromDocument(d)
				t.RootDocumentID = e
			}
		}
	}

	return nil
}
