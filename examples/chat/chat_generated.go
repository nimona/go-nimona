// Code generated by nimona.io/tools/codegen. DO NOT EDIT.

package main

import (
	object "nimona.io/pkg/object"
)

type (
	ConversationStreamRoot struct {
		Metadata object.Metadata `nimona:"metadata:m"`
		Nonce    string          `nimona:"nonce:s,omitempty"`
	}
	ConversationSetNickname struct {
		Metadata object.Metadata `nimona:"metadata:m"`
		Datetime string          `nimona:"datetime:s,omitempty"`
		Nickname string          `nimona:"nickname:s,omitempty"`
	}
	ConversationMessageAdded struct {
		Metadata object.Metadata `nimona:"metadata:m"`
		Datetime string          `nimona:"datetime:s,omitempty"`
		Body     string          `nimona:"body:s,omitempty"`
	}
)

func (e *ConversationStreamRoot) Type() string {
	return "stream:poc.nimona.io/conversation"
}

func (e ConversationStreamRoot) ToObject() *object.Object {
	o, err := object.Encode(&e)
	if err != nil {
		panic(err)
	}
	return o
}

func (e *ConversationStreamRoot) FromObject(o *object.Object) error {
	return object.Decode(o, e)
}

func (e *ConversationSetNickname) Type() string {
	return "poc.nimona.io/conversation.SetNickname"
}

func (e ConversationSetNickname) ToObject() *object.Object {
	o, err := object.Encode(&e)
	if err != nil {
		panic(err)
	}
	return o
}

func (e *ConversationSetNickname) FromObject(o *object.Object) error {
	return object.Decode(o, e)
}

func (e *ConversationMessageAdded) Type() string {
	return "poc.nimona.io/conversation.MessageAdded"
}

func (e ConversationMessageAdded) ToObject() *object.Object {
	o, err := object.Encode(&e)
	if err != nil {
		panic(err)
	}
	return o
}

func (e *ConversationMessageAdded) FromObject(o *object.Object) error {
	return object.Decode(o, e)
}
