// Code generated by nimona.io/tools/codegen. DO NOT EDIT.

package main

import (
	object "nimona.io/pkg/object"
)

type (
	ConversationStreamRoot struct {
		Metadata object.Metadata
		Nonce    string
	}
	ConversationNicknameUpdated struct {
		Metadata object.Metadata
		Nickname string
	}
	ConversationMessageAdded struct {
		Metadata object.Metadata
		Body     string
	}
)

func (e *ConversationStreamRoot) Type() string {
	return "stream:poc.nimona.io/conversation"
}

func (e *ConversationStreamRoot) MarshalMap() (object.Map, error) {
	return e.ToObject().Map(), nil
}

func (e *ConversationStreamRoot) MarshalObject() (*object.Object, error) {
	return e.ToObject(), nil
}

func (e ConversationStreamRoot) ToObject() *object.Object {
	r := &object.Object{
		Type:     "stream:poc.nimona.io/conversation",
		Metadata: e.Metadata,
		Data:     object.Map{},
	}
	r.Data["nonce"] = object.String(e.Nonce)
	return r
}

func (e *ConversationStreamRoot) UnmarshalMap(m object.Map) error {
	return e.FromObject(object.FromMap(m))
}

func (e *ConversationStreamRoot) UnmarshalObject(o *object.Object) error {
	return e.FromObject(o)
}

func (e *ConversationStreamRoot) FromObject(o *object.Object) error {
	e.Metadata = o.Metadata
	if v, ok := o.Data["nonce"]; ok {
		if t, ok := v.(object.String); ok {
			e.Nonce = string(t)
		}
	}
	return nil
}

func (e *ConversationNicknameUpdated) Type() string {
	return "poc.nimona.io/conversation.NicknameUpdated"
}

func (e *ConversationNicknameUpdated) MarshalMap() (object.Map, error) {
	return e.ToObject().Map(), nil
}

func (e *ConversationNicknameUpdated) MarshalObject() (*object.Object, error) {
	return e.ToObject(), nil
}

func (e ConversationNicknameUpdated) ToObject() *object.Object {
	r := &object.Object{
		Type:     "poc.nimona.io/conversation.NicknameUpdated",
		Metadata: e.Metadata,
		Data:     object.Map{},
	}
	r.Data["nickname"] = object.String(e.Nickname)
	return r
}

func (e *ConversationNicknameUpdated) UnmarshalMap(m object.Map) error {
	return e.FromObject(object.FromMap(m))
}

func (e *ConversationNicknameUpdated) UnmarshalObject(o *object.Object) error {
	return e.FromObject(o)
}

func (e *ConversationNicknameUpdated) FromObject(o *object.Object) error {
	e.Metadata = o.Metadata
	if v, ok := o.Data["nickname"]; ok {
		if t, ok := v.(object.String); ok {
			e.Nickname = string(t)
		}
	}
	return nil
}

func (e *ConversationMessageAdded) Type() string {
	return "poc.nimona.io/conversation.MessageAdded"
}

func (e *ConversationMessageAdded) MarshalMap() (object.Map, error) {
	return e.ToObject().Map(), nil
}

func (e *ConversationMessageAdded) MarshalObject() (*object.Object, error) {
	return e.ToObject(), nil
}

func (e ConversationMessageAdded) ToObject() *object.Object {
	r := &object.Object{
		Type:     "poc.nimona.io/conversation.MessageAdded",
		Metadata: e.Metadata,
		Data:     object.Map{},
	}
	r.Data["body"] = object.String(e.Body)
	return r
}

func (e *ConversationMessageAdded) UnmarshalMap(m object.Map) error {
	return e.FromObject(object.FromMap(m))
}

func (e *ConversationMessageAdded) UnmarshalObject(o *object.Object) error {
	return e.FromObject(o)
}

func (e *ConversationMessageAdded) FromObject(o *object.Object) error {
	e.Metadata = o.Metadata
	if v, ok := o.Data["body"]; ok {
		if t, ok := v.(object.String); ok {
			e.Body = string(t)
		}
	}
	return nil
}
