// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package nimona

import (
	"bytes"
	"fmt"
	"io"
	"math"
	"sort"

	cid "github.com/ipfs/go-cid"
	zero "github.com/vikyd/zero"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = bytes.Compare
var _ = xerrors.Errorf
var _ = cid.Undef
var _ = math.E
var _ = sort.Sort
var _ = zero.IsZeroVal

func (t *NetworkAnnouncePeerRequest) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)
	fieldCount := 3

	if zero.IsZeroVal(t.Metadata) {
		fieldCount--
	}

	if zero.IsZeroVal(t.PeerInfo) {
		fieldCount--
	}

	if _, err := cw.Write(cbg.CborEncodeMajorType(cbg.MajMap, uint64(fieldCount))); err != nil {
		return err
	}

	// t._ (string) (string)
	if len("$type") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"$type\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("$type"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("$type")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("core/network/announcePeer.request"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("core/network/announcePeer.request")); err != nil {
		return err
	}

	// t.Metadata (nimona.Metadata) (struct)
	if !zero.IsZeroVal(t.Metadata) {

		if len("$metadata") > cbg.MaxLength {
			return xerrors.Errorf("Value in field \"$metadata\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("$metadata"))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string("$metadata")); err != nil {
			return err
		}

		if err := t.Metadata.MarshalCBOR(cw); err != nil {
			return err
		}
	}

	// t.PeerInfo (nimona.PeerInfo) (struct)
	if !zero.IsZeroVal(t.PeerInfo) {

		if len("peerInfo") > cbg.MaxLength {
			return xerrors.Errorf("Value in field \"peerInfo\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("peerInfo"))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string("peerInfo")); err != nil {
			return err
		}

		if err := t.PeerInfo.MarshalCBOR(cw); err != nil {
			return err
		}
	}
	return nil
}

func (t *NetworkAnnouncePeerRequest) UnmarshalCBOR(r io.Reader) (err error) {
	if t == nil {
		*t = NetworkAnnouncePeerRequest{}
	}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("NetworkAnnouncePeerRequest: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t._ (string) (string) - ignored

		// t.Metadata (nimona.Metadata) (struct)
		case "$metadata":

			{

				if err := t.Metadata.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("unmarshaling t.Metadata: %w", err)
				}

			}
			// t.PeerInfo (nimona.PeerInfo) (struct)
		case "peerInfo":

			{

				if err := t.PeerInfo.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("unmarshaling t.PeerInfo: %w", err)
				}

			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}

func (t *NetworkAnnouncePeerResponse) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)
	fieldCount := 4

	if zero.IsZeroVal(t.Metadata) {
		fieldCount--
	}

	if zero.IsZeroVal(t.Error) {
		fieldCount--
	}

	if zero.IsZeroVal(t.ErrorDescription) {
		fieldCount--
	}

	if _, err := cw.Write(cbg.CborEncodeMajorType(cbg.MajMap, uint64(fieldCount))); err != nil {
		return err
	}

	// t._ (string) (string)
	if len("$type") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"$type\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("$type"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("$type")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("core/network/announcePeer.response"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("core/network/announcePeer.response")); err != nil {
		return err
	}

	// t.Metadata (nimona.Metadata) (struct)
	if !zero.IsZeroVal(t.Metadata) {

		if len("$metadata") > cbg.MaxLength {
			return xerrors.Errorf("Value in field \"$metadata\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("$metadata"))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string("$metadata")); err != nil {
			return err
		}

		if err := t.Metadata.MarshalCBOR(cw); err != nil {
			return err
		}
	}

	// t.Error (bool) (bool)
	if !zero.IsZeroVal(t.Error) {

		if len("error") > cbg.MaxLength {
			return xerrors.Errorf("Value in field \"error\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("error"))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string("error")); err != nil {
			return err
		}

		if err := cbg.WriteBool(w, t.Error); err != nil {
			return err
		}
	}

	// t.ErrorDescription (string) (string)
	if !zero.IsZeroVal(t.ErrorDescription) {

		if len("errorDescription") > cbg.MaxLength {
			return xerrors.Errorf("Value in field \"errorDescription\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("errorDescription"))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string("errorDescription")); err != nil {
			return err
		}

		if len(t.ErrorDescription) > cbg.MaxLength {
			return xerrors.Errorf("Value in field t.ErrorDescription was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.ErrorDescription))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string(t.ErrorDescription)); err != nil {
			return err
		}
	}
	return nil
}

func (t *NetworkAnnouncePeerResponse) UnmarshalCBOR(r io.Reader) (err error) {
	if t == nil {
		*t = NetworkAnnouncePeerResponse{}
	}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("NetworkAnnouncePeerResponse: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t._ (string) (string) - ignored

		// t.Metadata (nimona.Metadata) (struct)
		case "$metadata":

			{

				if err := t.Metadata.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("unmarshaling t.Metadata: %w", err)
				}

			}
			// t.Error (bool) (bool)
		case "error":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}
			if maj != cbg.MajOther {
				return fmt.Errorf("booleans must be major type 7")
			}
			switch extra {
			case 20:
				t.Error = false
			case 21:
				t.Error = true
			default:
				return fmt.Errorf("booleans are either major type 7, value 20 or 21 (got %d)", extra)
			}
			// t.ErrorDescription (string) (string)
		case "errorDescription":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.ErrorDescription = string(sval)
			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}

func (t *NetworkInfoRequest) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{161}); err != nil {
		return err
	}

	// t._ (string) (string)
	if len("$type") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"$type\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("$type"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("$type")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("core/network/info.request"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("core/network/info.request")); err != nil {
		return err
	}
	return nil
}

func (t *NetworkInfoRequest) UnmarshalCBOR(r io.Reader) (err error) {
	if t == nil {
		*t = NetworkInfoRequest{}
	}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("NetworkInfoRequest: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t._ (string) (string) - ignored

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}

func (t *NetworkJoinRequest) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)
	fieldCount := 3

	if zero.IsZeroVal(t.Metadata) {
		fieldCount--
	}

	if zero.IsZeroVal(t.RequestedHandle) {
		fieldCount--
	}

	if _, err := cw.Write(cbg.CborEncodeMajorType(cbg.MajMap, uint64(fieldCount))); err != nil {
		return err
	}

	// t._ (string) (string)
	if len("$type") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"$type\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("$type"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("$type")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("core/network/join.request"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("core/network/join.request")); err != nil {
		return err
	}

	// t.Metadata (nimona.Metadata) (struct)
	if !zero.IsZeroVal(t.Metadata) {

		if len("$metadata") > cbg.MaxLength {
			return xerrors.Errorf("Value in field \"$metadata\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("$metadata"))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string("$metadata")); err != nil {
			return err
		}

		if err := t.Metadata.MarshalCBOR(cw); err != nil {
			return err
		}
	}

	// t.RequestedHandle (string) (string)
	if !zero.IsZeroVal(t.RequestedHandle) {

		if len("requestedHandle") > cbg.MaxLength {
			return xerrors.Errorf("Value in field \"requestedHandle\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("requestedHandle"))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string("requestedHandle")); err != nil {
			return err
		}

		if len(t.RequestedHandle) > cbg.MaxLength {
			return xerrors.Errorf("Value in field t.RequestedHandle was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.RequestedHandle))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string(t.RequestedHandle)); err != nil {
			return err
		}
	}
	return nil
}

func (t *NetworkJoinRequest) UnmarshalCBOR(r io.Reader) (err error) {
	if t == nil {
		*t = NetworkJoinRequest{}
	}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("NetworkJoinRequest: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t._ (string) (string) - ignored

		// t.Metadata (nimona.Metadata) (struct)
		case "$metadata":

			{

				if err := t.Metadata.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("unmarshaling t.Metadata: %w", err)
				}

			}
			// t.RequestedHandle (string) (string)
		case "requestedHandle":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.RequestedHandle = string(sval)
			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}

func (t *NetworkJoinResponse) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)
	fieldCount := 5

	if zero.IsZeroVal(t.Handle) {
		fieldCount--
	}

	if zero.IsZeroVal(t.Error) {
		fieldCount--
	}

	if zero.IsZeroVal(t.ErrorDescription) {
		fieldCount--
	}

	if _, err := cw.Write(cbg.CborEncodeMajorType(cbg.MajMap, uint64(fieldCount))); err != nil {
		return err
	}

	// t._ (string) (string)
	if len("$type") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"$type\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("$type"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("$type")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("core/network/join.response"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("core/network/join.response")); err != nil {
		return err
	}

	// t.Handle (string) (string)
	if !zero.IsZeroVal(t.Handle) {

		if len("handle") > cbg.MaxLength {
			return xerrors.Errorf("Value in field \"handle\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("handle"))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string("handle")); err != nil {
			return err
		}

		if len(t.Handle) > cbg.MaxLength {
			return xerrors.Errorf("Value in field t.Handle was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Handle))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string(t.Handle)); err != nil {
			return err
		}
	}

	// t.Accepted (bool) (bool)
	if len("accepted") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"accepted\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("accepted"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("accepted")); err != nil {
		return err
	}

	if err := cbg.WriteBool(w, t.Accepted); err != nil {
		return err
	}

	// t.Error (bool) (bool)
	if !zero.IsZeroVal(t.Error) {

		if len("error") > cbg.MaxLength {
			return xerrors.Errorf("Value in field \"error\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("error"))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string("error")); err != nil {
			return err
		}

		if err := cbg.WriteBool(w, t.Error); err != nil {
			return err
		}
	}

	// t.ErrorDescription (string) (string)
	if !zero.IsZeroVal(t.ErrorDescription) {

		if len("errorDescription") > cbg.MaxLength {
			return xerrors.Errorf("Value in field \"errorDescription\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("errorDescription"))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string("errorDescription")); err != nil {
			return err
		}

		if len(t.ErrorDescription) > cbg.MaxLength {
			return xerrors.Errorf("Value in field t.ErrorDescription was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.ErrorDescription))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string(t.ErrorDescription)); err != nil {
			return err
		}
	}
	return nil
}

func (t *NetworkJoinResponse) UnmarshalCBOR(r io.Reader) (err error) {
	if t == nil {
		*t = NetworkJoinResponse{}
	}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("NetworkJoinResponse: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t._ (string) (string) - ignored

		// t.Handle (string) (string)
		case "handle":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.Handle = string(sval)
			}
			// t.Accepted (bool) (bool)
		case "accepted":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}
			if maj != cbg.MajOther {
				return fmt.Errorf("booleans must be major type 7")
			}
			switch extra {
			case 20:
				t.Accepted = false
			case 21:
				t.Accepted = true
			default:
				return fmt.Errorf("booleans are either major type 7, value 20 or 21 (got %d)", extra)
			}
			// t.Error (bool) (bool)
		case "error":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}
			if maj != cbg.MajOther {
				return fmt.Errorf("booleans must be major type 7")
			}
			switch extra {
			case 20:
				t.Error = false
			case 21:
				t.Error = true
			default:
				return fmt.Errorf("booleans are either major type 7, value 20 or 21 (got %d)", extra)
			}
			// t.ErrorDescription (string) (string)
		case "errorDescription":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.ErrorDescription = string(sval)
			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}

func (t *NetworkLookupPeerRequest) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)
	fieldCount := 3

	if zero.IsZeroVal(t.Metadata) {
		fieldCount--
	}

	if zero.IsZeroVal(t.PeerKey) {
		fieldCount--
	}

	if _, err := cw.Write(cbg.CborEncodeMajorType(cbg.MajMap, uint64(fieldCount))); err != nil {
		return err
	}

	// t._ (string) (string)
	if len("$type") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"$type\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("$type"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("$type")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("core/network/lookupPeer.request"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("core/network/lookupPeer.request")); err != nil {
		return err
	}

	// t.Metadata (nimona.Metadata) (struct)
	if !zero.IsZeroVal(t.Metadata) {

		if len("$metadata") > cbg.MaxLength {
			return xerrors.Errorf("Value in field \"$metadata\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("$metadata"))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string("$metadata")); err != nil {
			return err
		}

		if err := t.Metadata.MarshalCBOR(cw); err != nil {
			return err
		}
	}

	// t.PeerKey (nimona.PeerKey) (struct)
	if !zero.IsZeroVal(t.PeerKey) {

		if len("peerKey") > cbg.MaxLength {
			return xerrors.Errorf("Value in field \"peerKey\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("peerKey"))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string("peerKey")); err != nil {
			return err
		}

		if err := t.PeerKey.MarshalCBOR(cw); err != nil {
			return err
		}
	}
	return nil
}

func (t *NetworkLookupPeerRequest) UnmarshalCBOR(r io.Reader) (err error) {
	if t == nil {
		*t = NetworkLookupPeerRequest{}
	}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("NetworkLookupPeerRequest: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t._ (string) (string) - ignored

		// t.Metadata (nimona.Metadata) (struct)
		case "$metadata":

			{

				if err := t.Metadata.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("unmarshaling t.Metadata: %w", err)
				}

			}
			// t.PeerKey (nimona.PeerKey) (struct)
		case "peerKey":

			{

				if err := t.PeerKey.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("unmarshaling t.PeerKey: %w", err)
				}

			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}

func (t *NetworkLookupPeerResponse) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)
	fieldCount := 6

	if zero.IsZeroVal(t.Metadata) {
		fieldCount--
	}

	if zero.IsZeroVal(t.PeerInfo) {
		fieldCount--
	}

	if zero.IsZeroVal(t.Found) {
		fieldCount--
	}

	if zero.IsZeroVal(t.Error) {
		fieldCount--
	}

	if zero.IsZeroVal(t.ErrorDescription) {
		fieldCount--
	}

	if _, err := cw.Write(cbg.CborEncodeMajorType(cbg.MajMap, uint64(fieldCount))); err != nil {
		return err
	}

	// t._ (string) (string)
	if len("$type") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"$type\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("$type"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("$type")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("core/network/lookupPeer.response"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("core/network/lookupPeer.response")); err != nil {
		return err
	}

	// t.Metadata (nimona.Metadata) (struct)
	if !zero.IsZeroVal(t.Metadata) {

		if len("$metadata") > cbg.MaxLength {
			return xerrors.Errorf("Value in field \"$metadata\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("$metadata"))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string("$metadata")); err != nil {
			return err
		}

		if err := t.Metadata.MarshalCBOR(cw); err != nil {
			return err
		}
	}

	// t.PeerInfo (nimona.PeerInfo) (struct)
	if !zero.IsZeroVal(t.PeerInfo) {

		if len("peerInfo") > cbg.MaxLength {
			return xerrors.Errorf("Value in field \"peerInfo\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("peerInfo"))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string("peerInfo")); err != nil {
			return err
		}

		if err := t.PeerInfo.MarshalCBOR(cw); err != nil {
			return err
		}
	}

	// t.Found (bool) (bool)
	if !zero.IsZeroVal(t.Found) {

		if len("found") > cbg.MaxLength {
			return xerrors.Errorf("Value in field \"found\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("found"))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string("found")); err != nil {
			return err
		}

		if err := cbg.WriteBool(w, t.Found); err != nil {
			return err
		}
	}

	// t.Error (bool) (bool)
	if !zero.IsZeroVal(t.Error) {

		if len("error") > cbg.MaxLength {
			return xerrors.Errorf("Value in field \"error\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("error"))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string("error")); err != nil {
			return err
		}

		if err := cbg.WriteBool(w, t.Error); err != nil {
			return err
		}
	}

	// t.ErrorDescription (string) (string)
	if !zero.IsZeroVal(t.ErrorDescription) {

		if len("errorDescription") > cbg.MaxLength {
			return xerrors.Errorf("Value in field \"errorDescription\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("errorDescription"))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string("errorDescription")); err != nil {
			return err
		}

		if len(t.ErrorDescription) > cbg.MaxLength {
			return xerrors.Errorf("Value in field t.ErrorDescription was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.ErrorDescription))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string(t.ErrorDescription)); err != nil {
			return err
		}
	}
	return nil
}

func (t *NetworkLookupPeerResponse) UnmarshalCBOR(r io.Reader) (err error) {
	if t == nil {
		*t = NetworkLookupPeerResponse{}
	}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("NetworkLookupPeerResponse: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t._ (string) (string) - ignored

		// t.Metadata (nimona.Metadata) (struct)
		case "$metadata":

			{

				if err := t.Metadata.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("unmarshaling t.Metadata: %w", err)
				}

			}
			// t.PeerInfo (nimona.PeerInfo) (struct)
		case "peerInfo":

			{

				if err := t.PeerInfo.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("unmarshaling t.PeerInfo: %w", err)
				}

			}
			// t.Found (bool) (bool)
		case "found":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}
			if maj != cbg.MajOther {
				return fmt.Errorf("booleans must be major type 7")
			}
			switch extra {
			case 20:
				t.Found = false
			case 21:
				t.Found = true
			default:
				return fmt.Errorf("booleans are either major type 7, value 20 or 21 (got %d)", extra)
			}
			// t.Error (bool) (bool)
		case "error":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}
			if maj != cbg.MajOther {
				return fmt.Errorf("booleans must be major type 7")
			}
			switch extra {
			case 20:
				t.Error = false
			case 21:
				t.Error = true
			default:
				return fmt.Errorf("booleans are either major type 7, value 20 or 21 (got %d)", extra)
			}
			// t.ErrorDescription (string) (string)
		case "errorDescription":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.ErrorDescription = string(sval)
			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}

func (t *NetworkResolveHandleRequest) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)
	fieldCount := 2

	if zero.IsZeroVal(t.Handle) {
		fieldCount--
	}

	if _, err := cw.Write(cbg.CborEncodeMajorType(cbg.MajMap, uint64(fieldCount))); err != nil {
		return err
	}

	// t._ (string) (string)
	if len("$type") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"$type\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("$type"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("$type")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("core/network/resolveHandle.request"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("core/network/resolveHandle.request")); err != nil {
		return err
	}

	// t.Handle (string) (string)
	if !zero.IsZeroVal(t.Handle) {

		if len("handle") > cbg.MaxLength {
			return xerrors.Errorf("Value in field \"handle\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("handle"))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string("handle")); err != nil {
			return err
		}

		if len(t.Handle) > cbg.MaxLength {
			return xerrors.Errorf("Value in field t.Handle was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Handle))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string(t.Handle)); err != nil {
			return err
		}
	}
	return nil
}

func (t *NetworkResolveHandleRequest) UnmarshalCBOR(r io.Reader) (err error) {
	if t == nil {
		*t = NetworkResolveHandleRequest{}
	}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("NetworkResolveHandleRequest: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t._ (string) (string) - ignored

		// t.Handle (string) (string)
		case "handle":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.Handle = string(sval)
			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}

func (t *NetworkResolveHandleResponse) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)
	fieldCount := 6

	if zero.IsZeroVal(t.IdentityID) {
		fieldCount--
	}

	if zero.IsZeroVal(t.PeerAddresses) {
		fieldCount--
	}

	if zero.IsZeroVal(t.Found) {
		fieldCount--
	}

	if zero.IsZeroVal(t.Error) {
		fieldCount--
	}

	if zero.IsZeroVal(t.ErrorDescription) {
		fieldCount--
	}

	if _, err := cw.Write(cbg.CborEncodeMajorType(cbg.MajMap, uint64(fieldCount))); err != nil {
		return err
	}

	// t._ (string) (string)
	if len("$type") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"$type\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("$type"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("$type")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("core/network/resolveHandle.response"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("core/network/resolveHandle.response")); err != nil {
		return err
	}

	// t.IdentityID (nimona.Identity) (struct)
	if !zero.IsZeroVal(t.IdentityID) {

		if len("identityID") > cbg.MaxLength {
			return xerrors.Errorf("Value in field \"identityID\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("identityID"))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string("identityID")); err != nil {
			return err
		}

		if err := t.IdentityID.MarshalCBOR(cw); err != nil {
			return err
		}
	}

	// t.PeerAddresses ([]nimona.PeerAddr) (slice)
	if !zero.IsZeroVal(t.PeerAddresses) {

		if len("peerAddresses") > cbg.MaxLength {
			return xerrors.Errorf("Value in field \"peerAddresses\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("peerAddresses"))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string("peerAddresses")); err != nil {
			return err
		}

		if len(t.PeerAddresses) > cbg.MaxLength {
			return xerrors.Errorf("Slice value in field t.PeerAddresses was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajArray, uint64(len(t.PeerAddresses))); err != nil {
			return err
		}
		for _, v := range t.PeerAddresses {
			if err := v.MarshalCBOR(cw); err != nil {
				return err
			}
		}
	}

	// t.Found (bool) (bool)
	if !zero.IsZeroVal(t.Found) {

		if len("found") > cbg.MaxLength {
			return xerrors.Errorf("Value in field \"found\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("found"))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string("found")); err != nil {
			return err
		}

		if err := cbg.WriteBool(w, t.Found); err != nil {
			return err
		}
	}

	// t.Error (bool) (bool)
	if !zero.IsZeroVal(t.Error) {

		if len("error") > cbg.MaxLength {
			return xerrors.Errorf("Value in field \"error\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("error"))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string("error")); err != nil {
			return err
		}

		if err := cbg.WriteBool(w, t.Error); err != nil {
			return err
		}
	}

	// t.ErrorDescription (string) (string)
	if !zero.IsZeroVal(t.ErrorDescription) {

		if len("errorDescription") > cbg.MaxLength {
			return xerrors.Errorf("Value in field \"errorDescription\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("errorDescription"))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string("errorDescription")); err != nil {
			return err
		}

		if len(t.ErrorDescription) > cbg.MaxLength {
			return xerrors.Errorf("Value in field t.ErrorDescription was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.ErrorDescription))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string(t.ErrorDescription)); err != nil {
			return err
		}
	}
	return nil
}

func (t *NetworkResolveHandleResponse) UnmarshalCBOR(r io.Reader) (err error) {
	if t == nil {
		*t = NetworkResolveHandleResponse{}
	}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("NetworkResolveHandleResponse: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t._ (string) (string) - ignored

		// t.IdentityID (nimona.Identity) (struct)
		case "identityID":

			{

				if err := t.IdentityID.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("unmarshaling t.IdentityID: %w", err)
				}

			}
			// t.PeerAddresses ([]nimona.PeerAddr) (slice)
		case "peerAddresses":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > cbg.MaxLength {
				return fmt.Errorf("t.PeerAddresses: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return fmt.Errorf("expected cbor array")
			}

			if extra > 0 {
				t.PeerAddresses = make([]PeerAddr, extra)
			}

			for i := 0; i < int(extra); i++ {

				var v PeerAddr
				if err := v.UnmarshalCBOR(cr); err != nil {
					return err
				}

				t.PeerAddresses[i] = v
			}

			// t.Found (bool) (bool)
		case "found":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}
			if maj != cbg.MajOther {
				return fmt.Errorf("booleans must be major type 7")
			}
			switch extra {
			case 20:
				t.Found = false
			case 21:
				t.Found = true
			default:
				return fmt.Errorf("booleans are either major type 7, value 20 or 21 (got %d)", extra)
			}
			// t.Error (bool) (bool)
		case "error":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}
			if maj != cbg.MajOther {
				return fmt.Errorf("booleans must be major type 7")
			}
			switch extra {
			case 20:
				t.Error = false
			case 21:
				t.Error = true
			default:
				return fmt.Errorf("booleans are either major type 7, value 20 or 21 (got %d)", extra)
			}
			// t.ErrorDescription (string) (string)
		case "errorDescription":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.ErrorDescription = string(sval)
			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
