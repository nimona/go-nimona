// Code generated by nimona.io. DO NOT EDIT.

package nimona

import (
	"github.com/vikyd/zero"
)

var _ = zero.IsZeroVal

func (t *PeerCapabilitiesRequest) DocumentMap() DocumentMap {
	m := DocumentMap{}

	// # t.$type
	//
	// Type: string, Kind: string
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		m["$type"] = "core/peer/capabilities.request"
	}

	return m
}

func (t *PeerCapabilitiesRequest) FromDocumentMap(m DocumentMap) {
	*t = PeerCapabilitiesRequest{}

}
func (t *PeerCapabilitiesResponse) DocumentMap() DocumentMap {
	m := DocumentMap{}

	// # t.$type
	//
	// Type: string, Kind: string
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		m["$type"] = "core/peer/capabilities.response"
	}

	// # t.Capabilities
	//
	// Type: []string, Kind: slice
	// IsSlice: true, IsStruct: false, IsPointer: false
	//
	// ElemType: string, ElemKind: string
	// IsElemSlice: false, IsElemStruct: false, IsElemPointer: false
	{
		s := make([]any, len(t.Capabilities))
		for i, v := range t.Capabilities {
			s[i] = v
		}
		m[""] = s
	}

	return m
}

func (t *PeerCapabilitiesResponse) FromDocumentMap(m DocumentMap) {
	*t = PeerCapabilitiesResponse{}

	// # t.Capabilities
	//
	// Type: []string, Kind: slice
	// IsSlice: true, IsStruct: false, IsPointer: false
	//
	// ElemType: string, ElemKind: string
	// IsElemSlice: false, IsElemStruct: false, IsElemPointer: false
	{
		if v, ok := m[""].([]any); ok {
			s := make([]string, len(v))
			for i, vi := range v {
				s[i] = vi.(string)
			}
			t.Capabilities = s
		}
	}

}
