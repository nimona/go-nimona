// Code generated by nimona.io. DO NOT EDIT.

package nimona

import (
	"github.com/vikyd/zero"

	"nimona.io/internal/tilde"
)

var _ = zero.IsZeroVal
var _ = tilde.NewScanner

func (t *PeerInfo) DocumentMap() *DocumentMap {
	m := tilde.Map{}

	// # t.$type
	//
	// Type: string, Kind: string, TildeKind: InvalidValueKind0
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		m.Set("$type", tilde.String("core/peer/info"))
	}

	// # t.Addresses
	//
	// Type: []nimona.PeerAddr, Kind: slice, TildeKind: List
	// IsSlice: true, IsStruct: false, IsPointer: false
	//
	// ElemType: nimona.PeerAddr, ElemKind: struct
	// IsElemSlice: false, IsElemStruct: true, IsElemPointer: false
	{
		if !zero.IsZeroVal(t.Addresses) {
			sm := tilde.List{}
			for _, v := range t.Addresses {
				if !zero.IsZeroVal(t.Addresses) {
					sm = append(sm, v.DocumentMap().m)
				}
			}
			m.Set("addresses", sm)
		}
	}

	// # t.Metadata
	//
	// Type: nimona.Metadata, Kind: struct, TildeKind: Map
	// IsSlice: false, IsStruct: true, IsPointer: false
	{
		if !zero.IsZeroVal(t.Metadata) {
			m.Set("$metadata", t.Metadata.DocumentMap().m)
		}
	}

	// # t.PublicKey
	//
	// Type: nimona.PublicKey, Kind: slice, TildeKind: Bytes
	// IsSlice: true, IsStruct: false, IsPointer: false
	//
	// ElemType: uint8, ElemKind: uint8
	// IsElemSlice: false, IsElemStruct: false, IsElemPointer: false
	{
		if !zero.IsZeroVal(t.PublicKey) {
			m.Set("publicKey", tilde.Bytes(t.PublicKey))
		}
	}

	return NewDocumentMap(m)
}

func (t *PeerInfo) FromDocumentMap(d *DocumentMap) error {
	*t = PeerInfo{}

	// # t.Addresses
	//
	// Type: []nimona.PeerAddr, Kind: slice, TildeKind: List
	// IsSlice: true, IsStruct: false, IsPointer: false
	//
	// ElemType: nimona.PeerAddr, ElemKind: struct, ElemTildeKind: Map
	// IsElemSlice: false, IsElemStruct: true, IsElemPointer: false
	{
		sm := []PeerAddr{}
		if vs, err := d.m.Get("addresses"); err == nil {
			if vs, ok := vs.(tilde.List); ok {
				for _, vi := range vs {
					if v, ok := vi.(tilde.Map); ok {
						e := PeerAddr{}
						d := NewDocumentMap(v)
						e.FromDocumentMap(d)
						sm = append(sm, e)
					}
				}
			}
		}
		if len(sm) > 0 {
			t.Addresses = sm
		}
	}

	// # t.Metadata
	//
	// Type: nimona.Metadata, Kind: struct, TildeKind: Map
	// IsSlice: false, IsStruct: true, IsPointer: false
	{
		if v, err := d.m.Get("$metadata"); err == nil {
			if v, ok := v.(tilde.Map); ok {
				e := Metadata{}
				d := NewDocumentMap(v)
				e.FromDocumentMap(d)
				t.Metadata = e
			}
		}
	}

	// # t.PublicKey
	//
	// Type: nimona.PublicKey, Kind: slice, TildeKind: Bytes
	// IsSlice: true, IsStruct: false, IsPointer: false
	//
	// ElemType: uint8, ElemKind: uint8, ElemTildeKind: InvalidValueKind0
	// IsElemSlice: false, IsElemStruct: false, IsElemPointer: false
	{
		if v, err := d.m.Get("publicKey"); err == nil {
			if v, ok := v.(tilde.Bytes); ok {
				t.PublicKey = PublicKey(v)
			}
		}
	}

	return nil
}
func (t *PeerKey) DocumentMap() *DocumentMap {
	m := tilde.Map{}

	// # t.$type
	//
	// Type: string, Kind: string, TildeKind: InvalidValueKind0
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		m.Set("$type", tilde.String("core/peer/key"))
	}

	// # t.PublicKey
	//
	// Type: nimona.PublicKey, Kind: slice, TildeKind: Bytes
	// IsSlice: true, IsStruct: false, IsPointer: false
	//
	// ElemType: uint8, ElemKind: uint8
	// IsElemSlice: false, IsElemStruct: false, IsElemPointer: false
	{
		if !zero.IsZeroVal(t.PublicKey) {
			m.Set("publicKey", tilde.Bytes(t.PublicKey))
		}
	}

	return NewDocumentMap(m)
}

func (t *PeerKey) FromDocumentMap(d *DocumentMap) error {
	*t = PeerKey{}

	// # t.PublicKey
	//
	// Type: nimona.PublicKey, Kind: slice, TildeKind: Bytes
	// IsSlice: true, IsStruct: false, IsPointer: false
	//
	// ElemType: uint8, ElemKind: uint8, ElemTildeKind: InvalidValueKind0
	// IsElemSlice: false, IsElemStruct: false, IsElemPointer: false
	{
		if v, err := d.m.Get("publicKey"); err == nil {
			if v, ok := v.(tilde.Bytes); ok {
				t.PublicKey = PublicKey(v)
			}
		}
	}

	return nil
}
