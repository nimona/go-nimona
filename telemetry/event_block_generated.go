// Code generated by nimona.io/go/cmd/objectify. DO NOT EDIT.

// +build !generate

package telemetry

import (
	"nimona.io/go/encoding"
)

// ToMap returns a map compatible with f12n
func (s BlockEvent) ToMap() map[string]interface{} {
	m := map[string]interface{}{
		"@ctx:s":        "nimona.io/telemetry/block",
		"direction:s":   s.Direction,
		"contentType:s": s.ContentType,
		"size:i":        s.BlockSize,
	}
	return m
}

// ToObject returns a f12n object
func (s BlockEvent) ToObject() *encoding.Object {
	return encoding.NewObjectFromMap(s.ToMap())
}

// FromMap populates the struct from a f12n compatible map
func (s *BlockEvent) FromMap(m map[string]interface{}) error {
	if v, ok := m["direction:s"].(string); ok {
		s.Direction = v
	}
	if v, ok := m["contentType:s"].(string); ok {
		s.ContentType = v
	}
	if v, ok := m["size:i"].(int); ok {
		s.BlockSize = v
	}
	return nil
}

// FromObject populates the struct from a f12n object
func (s *BlockEvent) FromObject(o *encoding.Object) error {
	return s.FromMap(o.ToMap())
}

// GetType returns the object's type
func (s BlockEvent) GetType() string {
	return "nimona.io/telemetry/block"
}
