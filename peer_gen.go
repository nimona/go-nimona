// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package nimona

import (
	"bytes"
	"fmt"
	"io"
	"math"
	"sort"

	cid "github.com/ipfs/go-cid"
	zero "github.com/vikyd/zero"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = bytes.Compare
var _ = xerrors.Errorf
var _ = cid.Undef
var _ = math.E
var _ = sort.Sort
var _ = zero.IsZeroVal

func (t *PeerKey) MarshalCBORBytes() ([]byte, error) {
	w := bytes.NewBuffer(nil)
	err := t.MarshalCBOR(w)
	if err != nil {
		return nil, err
	}
	return w.Bytes(), nil
}

func (t *PeerKey) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{162}); err != nil {
		return err
	}

	// t._ (string) (string)
	if len("$type") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"$type\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("$type"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("$type")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("nimona://peer:key"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("nimona://peer:key")); err != nil {
		return err
	}

	// t.PublicKey (nimona.PublicKey) (slice)
	if len("PublicKey") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"PublicKey\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("PublicKey"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("PublicKey")); err != nil {
		return err
	}

	if len(t.PublicKey) > cbg.ByteArrayMaxLen {
		return xerrors.Errorf("Byte array in field t.PublicKey was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajByteString, uint64(len(t.PublicKey))); err != nil {
		return err
	}

	if _, err := cw.Write(t.PublicKey[:]); err != nil {
		return err
	}
	return nil
}

func (t *PeerKey) UnmarshalCBORBytes(b []byte) (err error) {
	*t = PeerKey{}
	return t.UnmarshalCBOR(bytes.NewReader(b))
}

func (t *PeerKey) UnmarshalCBOR(r io.Reader) (err error) {
	if t == nil {
		*t = PeerKey{}
	}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("PeerKey: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t._ (string) (string) - ignored

		// t.PublicKey (nimona.PublicKey) (slice)
		case "PublicKey":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > cbg.ByteArrayMaxLen {
				return fmt.Errorf("t.PublicKey: byte array too large (%d)", extra)
			}
			if maj != cbg.MajByteString {
				return fmt.Errorf("expected byte array")
			}

			if extra > 0 {
				t.PublicKey = make([]uint8, extra)
			}

			if _, err := io.ReadFull(cr, t.PublicKey[:]); err != nil {
				return err
			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}

func (t *PeerInfo) MarshalCBORBytes() ([]byte, error) {
	w := bytes.NewBuffer(nil)
	err := t.MarshalCBOR(w)
	if err != nil {
		return nil, err
	}
	return w.Bytes(), nil
}

func (t *PeerInfo) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)
	fieldCount := 3

	if _, err := cw.Write(cbg.CborEncodeMajorType(cbg.MajMap, uint64(fieldCount))); err != nil {
		return err
	}

	// t._ (string) (string)
	if len("$type") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"$type\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("$type"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("$type")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("core/node.info"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("core/node.info")); err != nil {
		return err
	}

	// t.PublicKey (nimona.PublicKey) (slice)
	if len("publicKey") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"publicKey\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("publicKey"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("publicKey")); err != nil {
		return err
	}

	if len(t.PublicKey) > cbg.ByteArrayMaxLen {
		return xerrors.Errorf("Byte array in field t.PublicKey was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajByteString, uint64(len(t.PublicKey))); err != nil {
		return err
	}

	if _, err := cw.Write(t.PublicKey[:]); err != nil {
		return err
	}

	// t.Addresses ([]nimona.PeerAddr) (slice)
	if len("addresses") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"addresses\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("addresses"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("addresses")); err != nil {
		return err
	}

	if len(t.Addresses) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.Addresses was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajArray, uint64(len(t.Addresses))); err != nil {
		return err
	}
	for _, v := range t.Addresses {
		if err := v.MarshalCBOR(cw); err != nil {
			return err
		}
	}

	// t.RawBytes ([]uint8) (slice) - ignored

	return nil
}

func (t *PeerInfo) UnmarshalCBORBytes(b []byte) (err error) {
	*t = PeerInfo{}
	t.RawBytes = b
	return t.UnmarshalCBOR(bytes.NewReader(b))
}

func (t *PeerInfo) UnmarshalCBOR(r io.Reader) (err error) {
	if t == nil {
		*t = PeerInfo{}
	}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("PeerInfo: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t._ (string) (string) - ignored

		// t.PublicKey (nimona.PublicKey) (slice)
		case "publicKey":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > cbg.ByteArrayMaxLen {
				return fmt.Errorf("t.PublicKey: byte array too large (%d)", extra)
			}
			if maj != cbg.MajByteString {
				return fmt.Errorf("expected byte array")
			}

			if extra > 0 {
				t.PublicKey = make([]uint8, extra)
			}

			if _, err := io.ReadFull(cr, t.PublicKey[:]); err != nil {
				return err
			}
			// t.Addresses ([]nimona.PeerAddr) (slice)
		case "addresses":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > cbg.MaxLength {
				return fmt.Errorf("t.Addresses: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return fmt.Errorf("expected cbor array")
			}

			if extra > 0 {
				t.Addresses = make([]PeerAddr, extra)
			}

			for i := 0; i < int(extra); i++ {

				var v PeerAddr
				if err := v.UnmarshalCBOR(cr); err != nil {
					return err
				}

				t.Addresses[i] = v
			}

			// t.RawBytes ([]uint8) (slice) - ignored

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
