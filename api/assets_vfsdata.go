// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package api

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2018, 12, 1, 12, 4, 51, 639000788, time.UTC),
		},
		"/index.html": &vfsgen۰CompressedFileInfo{
			name:             "index.html",
			modTime:          time.Date(2018, 12, 7, 1, 20, 33, 857018915, time.UTC),
			uncompressedSize: 6702,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x59\x6d\x73\xdb\x36\xf2\x7f\xef\x4f\xb1\xa1\xff\xff\x52\x8a\x45\x52\x8e\xc7\x71\x4d\x53\xca\xf5\xc1\x9e\xb6\x97\xb6\x37\xe7\x4c\xfb\xc2\x71\x6f\x20\x72\x25\x21\x06\x01\x06\x00\x25\x2b\x89\xbf\xfb\x0d\x40\x8a\x04\x45\xd9\xf5\xdd\xdc\x8b\x9b\x93\x32\x19\x66\xb1\x8f\xbf\x7d\xc0\x52\x49\x5e\x04\x01\x7c\x4b\x14\x66\x20\x38\x2c\xb5\x2e\x54\x1c\x45\x33\x26\x16\xa1\x46\x92\x6b\x89\xb8\x14\xa5\xc2\x30\x15\x79\x44\x78\x40\xb9\x96\x22\x2b\x53\x4d\x05\x0f\xb4\x08\xd6\x38\x53\x22\xbd\x43\xad\x20\x08\xa6\x07\xc9\x52\xe7\x6c\x7a\x70\x90\x2c\x91\x64\xd3\x03\x80\x44\xe9\x0d\x43\xf3\x04\xf0\x72\x04\x2f\xe3\x19\xce\x85\x44\xf3\x44\xe6\x1a\x25\x7c\xb6\x47\xe6\x13\xe4\xe2\x53\x30\x13\xf7\x81\xa2\x9f\x28\x5f\xc4\x30\x13\x32\x43\x69\x48\x17\x2d\xd3\x1a\x67\x77\x54\xff\x29\xdf\xd3\xe7\x0f\x07\xf5\x83\x71\xd7\x71\x61\x2e\xb8\x0e\xe6\x24\xa7\x6c\x13\xc3\x0f\xc8\x56\xa8\x69\x4a\x46\xf0\x8d\xa4\x84\x8d\x40\x11\xae\x02\x85\x92\xce\x2f\xba\x22\x8a\x7e\xc2\x18\x8e\xc7\xe3\xff\x77\x3c\x20\xe9\xdd\x42\x8a\x92\x67\x31\x1c\x9e\x9c\x9c\xf4\x6c\x1f\x16\x64\x81\xc1\x5a\x92\xa2\xe8\xe0\xb0\xa6\x99\x5e\xc6\xf0\xfa\x74\x5c\xdc\x3f\xa2\xee\xea\xea\xaa\x3d\x29\x48\x96\xd9\x38\x8f\x31\x6f\xa9\x39\x91\x0b\xca\x2d\x11\x48\xa9\x85\x0b\x8d\x85\x43\x8b\x22\x86\xd3\xe2\x1e\x94\x60\x34\x83\xc3\xd7\xe7\xe9\xd9\xd9\xc9\x0e\x82\x4b\x92\x89\x75\x0c\x63\x78\x55\xdc\xc3\xf1\xb8\xb8\x07\xb9\x98\x91\xc1\x78\x64\xbf\xe1\xd7\xc3\x3e\xa2\xc7\x4e\x28\x95\x13\x95\xa9\x71\x1f\x00\xa5\x89\x2e\xd5\x2e\xfe\x15\x98\xe3\xf0\x5c\xf6\xe3\x09\x66\x42\x6b\x91\xc7\x70\xec\x1c\x36\x0a\x43\x51\x20\x77\xd4\xa5\x82\x09\x19\xc3\x42\x22\xf2\x3e\x73\xca\x84\x29\xfb\x1e\xbb\xc4\xcc\x61\xae\x9f\x4a\xb7\x4c\x18\x55\x3a\xb0\x85\x1d\x03\x17\x1c\xfb\xa8\x8f\xf7\xa4\x67\xbc\xb7\x68\xc6\xe1\xf9\xe9\xbe\x58\x4a\x06\x8c\x3a\x36\x5b\x35\xa1\xe1\x87\x71\x78\x76\xda\x01\xa8\xa9\xf2\x1a\xa0\x36\xb3\x97\x97\x97\xfb\xd5\xc7\x73\x2a\x95\x0e\xd2\x25\x65\x2e\x0e\x6e\x81\x3c\x47\x0d\x64\x74\x15\x73\xbd\xac\x14\x0d\x5e\x0d\x1d\x5d\x1a\xef\x75\x20\x56\x28\xe7\xcc\x14\x12\x32\x46\x0b\x45\x55\xeb\xf6\x7a\x49\x35\x06\xaa\x20\xa9\x05\xd3\xb4\x43\x7b\xd8\x0a\x2e\x69\x96\xed\x49\x62\x65\x5f\x15\xc4\x4d\x7b\x46\x55\xc1\xc8\x26\x06\xca\x19\xe5\x18\xcc\x98\x48\xef\x2e\x76\xfb\xeb\xbc\xd3\x5e\x36\x23\x6b\xa4\x8b\xa5\x36\x03\x83\x65\x17\xbb\x65\x71\x78\x7e\x7e\xfe\x48\x06\xcf\x3a\x89\xb0\x21\x6b\x49\xb8\x9a\x0b\x99\xc7\x50\x9a\xfe\x4e\x89\x72\xca\x84\xa1\xd6\x28\x6d\xd4\x55\xe7\x16\xfd\xd1\x14\x2a\xe4\xda\xcd\x4a\x33\x00\x82\xad\x47\x57\x67\xe6\xdb\xef\xab\x1c\x95\x32\xb3\xc5\xd8\x7f\xa4\x1b\x8f\xc3\xbd\x55\x67\x7c\x27\x12\x49\x7f\x1c\x75\x87\xdb\x4e\x35\xee\x1f\x87\x7b\xca\xb3\x53\x50\xdf\x9f\x9b\x6f\xaf\x82\x25\xc9\x68\xa9\x62\x38\x29\x76\xe7\x79\x3d\x8d\x28\x57\xa8\x61\x6c\x55\x1d\xb7\x23\x09\xea\x3f\xe1\xf1\xd0\x69\x48\xca\x83\x65\x9d\xd6\xe3\x71\x27\xe5\xcf\x99\x28\x94\x17\xa5\xfe\xdf\x01\xe3\x19\x11\xcf\x4a\xad\xc5\xbf\xd0\x4d\x4f\xfb\x59\x85\xd9\x9d\x91\x4f\x0c\x79\x07\xc9\xd7\x66\xc8\x75\x6e\xb4\xba\xea\xed\xc0\xd8\x33\x71\x61\x1c\xbe\x3a\xed\x37\x22\x61\x74\xc1\x63\x48\x91\x6b\x94\x8f\x5c\xa7\xdf\x7e\x63\xbe\xcf\x19\xa5\xce\x0c\xd8\x41\xec\x46\x6f\x0a\x9c\x78\xaa\x9c\xe5\x54\x7b\xb7\x7b\x1b\x37\x86\xc3\xaf\x5f\xcf\x4e\x5e\x65\xcf\x31\x75\x9a\x9d\x65\xc7\xf3\x47\xac\xc5\x4b\x33\x1a\x1d\x23\xc2\x8c\x12\xbd\xb1\xd3\xe8\xd4\xc1\xac\x94\xca\x80\x56\x08\xea\xc6\xdf\x68\x23\x8f\x2d\x3f\xb9\xe0\xc2\x0e\xe5\x1d\x38\x33\x4c\x85\x24\x66\xfb\xdb\x4d\x6b\x9d\x9e\x6e\x80\x8d\xa1\x42\xe2\x93\xb3\x6c\xb1\x14\x4a\xef\xa4\xb6\xdf\x25\x8a\xb2\x95\x9b\xc5\x76\xf5\x31\xab\xc9\xab\x3d\xed\x1d\x77\xa8\xed\x70\xfd\xa0\x04\x0f\xee\x70\xd3\xbf\xfe\x67\x52\xac\xf7\x6c\x0b\x56\x60\x45\x58\x89\x7d\x11\x4e\x56\x9b\x47\x24\x94\x96\x94\x2f\xfa\x22\x82\xd1\x15\xb6\x32\xe6\xef\x24\x6a\x76\xe5\x44\xa5\x92\x16\xba\x5a\x9b\xa3\xc8\xa0\xa7\xf5\x06\x0a\x49\xb9\x36\xea\xe6\x52\xe4\x76\x59\x8f\xa3\xe8\x83\x9a\xd3\x2c\x63\x18\x72\xd4\x51\xc9\xdf\x5e\xff\x14\x59\x31\x3a\x87\xc1\x0b\x46\x67\x92\xc8\xcd\xb0\x36\xb4\x22\x12\x6a\x12\x4c\xe0\xf3\xc3\x45\xe5\x6c\x4d\xb2\x1e\x1b\x7a\xcd\x2d\xb1\x60\x24\x35\x19\x98\x97\xdc\x6e\xfc\x30\xc8\x89\x4e\x97\x23\x28\x7e\xe4\x19\x72\x3d\x82\xe2\xaf\xb8\x19\x41\xf1\x9b\x59\x8f\x8b\x4b\x9e\xb9\x77\xbf\xb1\x66\x20\x9e\x80\x9f\xd8\x2b\x3a\x65\x44\xa9\xc9\x16\xfa\xa9\x7f\xd1\x61\x5d\x11\xb6\x97\xd5\x82\xbe\xcb\xac\xb4\xdc\xcb\x5c\xe1\xbd\xcb\x6d\x78\x6b\x97\xe1\xcb\x17\xf0\x9d\x63\x03\x93\x09\x62\xd8\x50\xc0\xb2\x4b\x38\xb2\xce\x1f\xd9\x10\xc3\x1a\x8b\x41\x74\xe3\xc5\x70\x1b\x2d\x46\xe0\xfb\x43\x38\x02\x3f\x89\x8c\x0b\xd3\x18\x76\x75\xfe\x46\xd8\x3e\x9d\xf6\xe0\x66\x7c\x0b\x93\x09\xf8\x9e\x0f\x6f\x6c\x28\xb1\x89\xde\xe8\x33\xa7\x8e\x5a\x47\xa9\x44\x5d\x4a\x5e\xeb\xb8\xe4\x59\x15\x48\xbb\x80\x8f\xda\x4e\xd3\x7a\xf3\x37\x53\x2a\x6e\xe2\xc4\xec\xc3\x6e\x6e\x0c\x60\x6f\x29\x47\x98\x40\xf4\xc7\x00\x5e\x0e\x07\xde\xcd\xfb\xf5\xed\x91\x17\xc3\xf0\xcd\xc0\xbb\xf9\xc3\xbb\x7d\xe9\x7d\xb9\x79\xbf\x0e\x8f\x82\xdb\x97\xc3\x37\x83\x9b\xd1\xcd\xe7\xdb\xe1\x9b\xff\x8b\xf2\x45\xcf\xaf\x9f\xae\x7f\xfd\x25\xac\xd0\xa7\xf3\x8d\x31\x37\x02\x5e\x32\x36\x82\x13\x17\x86\x16\xc8\xaf\x2c\x88\x5f\x91\xbc\xb8\xf0\x87\x2d\xf9\xfd\x7b\xaf\x3a\xf8\x58\x0a\x7d\xe1\xef\x97\x4d\x2a\x16\xa6\x3b\xa2\xd3\x8a\xba\x78\x4c\x6c\x1b\xef\xa8\x53\xf0\xdb\x63\x39\xec\xb6\xe3\x83\xf9\x67\x12\x6d\x3b\x31\x89\xaa\x57\xda\x83\x64\x26\xb2\x8d\x6d\xd2\x8c\xae\x80\x66\x13\xcf\x7d\x8f\xf3\xaa\x9e\x4d\x96\x27\xd3\x5f\x68\x2e\x38\x81\xe6\x0d\x19\xf0\x9e\xe4\x05\xc3\x24\x5a\x9e\xd4\x5c\x5b\x0d\xd5\x8b\x90\x37\xfd\x4e\x70\x8e\xa9\x69\xf1\x30\x0c\x93\x28\xa3\xab\x69\xd5\xa1\x89\x5d\xe5\x0c\xab\xbb\xdb\x79\x40\x6c\x76\x27\xde\xa1\x07\x39\xea\xa5\x30\xde\x08\xa5\x6b\x2f\x00\x92\x66\xa1\x73\x64\x3d\xb0\x01\x2f\x05\xcb\x50\x4e\xbc\xdf\x25\xd5\x08\x1b\x51\x4a\xa8\x19\x60\x89\x12\xc3\x30\xf4\x40\xe2\xc7\x92\x4a\xcc\xa6\x49\xb4\xd5\xd4\xa8\xae\x76\x23\xa3\x57\x62\x4a\x0b\x8a\x5c\xef\x68\xfe\xfb\x96\xee\x2b\xd3\x4b\xad\x3a\x88\x1a\x2d\xf5\xbe\xd1\xb9\x3d\xa7\xd7\xc8\x33\xf8\xb9\x72\x26\x89\x2a\x96\x1a\xb2\xc8\x04\xbe\x45\xa5\x64\x6e\x5c\xca\x9b\x26\x51\xc9\x6c\x6e\x1a\xec\x3a\xa3\xb4\x94\x76\xc4\xac\x55\x1c\x45\x3e\x1c\x01\x13\xa9\xbd\xcb\x42\x73\xfb\x70\x92\xa3\x69\xae\x86\x58\x08\xa9\xe1\x0d\xf8\x71\x87\xd5\x52\xe3\x6d\xfb\x47\xa4\xa0\xd1\xea\x38\x52\x5a\x22\xc9\x55\xc4\x6d\xd2\x43\x2a\xa2\xda\x29\xbf\x9e\xb1\x6b\xca\x33\xb1\x0e\x05\x67\x82\x64\x30\x71\x3a\xb3\x6d\x4b\xd3\x94\x36\xd1\x13\xc8\x44\x5a\xe6\xc8\x75\xb8\x40\x7d\xc9\xd0\x3c\x7e\xbb\xf9\x31\x1b\xf8\x6e\xfe\xdb\xee\x37\x92\xf5\xc9\x15\x45\x96\x3d\x43\x43\x57\xb8\x49\xe1\x9f\x8a\x37\x9c\x7b\xad\xab\xb7\x54\xe9\x67\x58\x57\x5d\xe9\xaa\x43\xae\xab\xdf\x03\x9e\x90\xae\x1a\xc5\xc8\xd6\xc2\x0d\xe7\xc7\x12\xe5\xe6\x1a\x19\xa6\x5a\xc8\x81\x6f\x9a\xd4\x1f\x86\x24\xcb\x2e\x57\xc8\xb5\xf1\x0a\x39\xca\x81\x9f\x32\x9a\xde\xf9\x23\x07\x7f\x74\xe7\xa2\x19\xdd\x18\x6a\x22\x17\xa8\x43\x7b\xaf\xfc\x42\x72\x0c\xb5\x78\x2b\xd6\x28\xbf\x23\x0a\x07\x43\x98\x98\xd9\x6d\xee\x60\xdf\x15\x85\x1d\x10\xc3\x6a\x5b\x98\x40\xa3\x2f\x23\x9a\x28\xd4\xe1\x1d\x6e\xda\xf9\xf9\xb0\x9d\x3a\x6d\x50\x29\x4c\x80\xe3\x1a\x7e\xc7\xd9\xb5\x05\x66\x50\x4a\xd6\xe0\x95\x86\x82\xdb\x1f\x3a\xdc\x22\x42\x13\xa5\xeb\x8d\x8b\x68\x48\x39\x47\xf9\xc3\xbb\x9f\xdf\x9a\xea\xaf\x87\x0c\x66\xa0\x45\x0c\xa6\xb6\xad\x70\x98\x96\x52\x22\xd7\xef\x2a\x5f\x4b\xc9\x2e\xf6\x2b\x6b\x50\x31\xca\x8c\x23\xcd\x25\xf5\xd0\x44\x60\xaa\x33\x14\xbc\xea\xe7\xae\xa3\xae\x93\x18\x16\xd2\x1a\xff\x1e\xe7\xa4\x64\x7a\x30\xec\xde\xdb\x26\x8b\x30\xe9\x54\x76\x85\xea\xce\xf5\xbe\xc5\xdd\xd4\xce\xcd\xbe\x2c\xdc\x76\x05\xc4\xec\x03\xa6\xda\x59\x75\xcc\xc7\xfb\x4b\xaa\xef\xbd\x18\xbc\x5e\x0f\x7b\xa3\x0e\x5b\x21\x18\x4d\x37\x5e\xdc\x91\x76\xe4\xa3\x9a\x61\xd4\x3d\x56\xa5\xb5\xaa\xbc\xd8\x71\x78\x87\xa7\x9a\xe7\x86\xe5\xc6\x93\x48\x32\xef\x76\x87\x01\xe7\x73\x4c\xb5\xb1\x42\x18\x13\x6b\xcf\x39\x7d\xe8\x78\xf9\x8f\xd6\xc6\xa3\x06\x3d\x83\xaf\x17\x5b\x98\x3b\x74\x4d\x73\x54\x9a\xe4\x85\x17\xc3\xc0\x54\xe2\xf7\x44\xe3\x60\x38\x0c\xb5\xf8\xf1\xfa\xd7\x6b\x7b\xcb\x0f\x86\xbd\x12\x36\xb5\xa9\x90\x67\x83\xfe\x32\x80\xa9\x1e\x0e\x7b\x4b\xc3\x9c\xb0\xf6\x67\x91\xb6\x7a\x4c\x85\xa3\x94\x42\x76\x2b\xc7\x50\x86\x9d\x55\x9a\x2b\xc1\x30\xb4\x07\x03\xbf\xe9\x16\xb8\x34\x84\xba\xb4\xad\xd0\x7e\x13\xdb\xdb\xce\x35\x92\xab\xc5\xee\x9a\xd4\x14\x8b\x8d\xaa\x20\x52\xa1\x61\xb3\xdd\x3c\xbc\xe8\x79\xc3\xc4\x62\x1b\x70\x67\xaa\xbc\x78\x51\x51\x43\xb1\xe6\x28\xbb\x83\xc3\x1d\x9e\xdd\x66\x4d\x18\xad\xd7\x5b\x73\xcb\x22\x5d\x61\xe6\x4d\x7d\x38\xea\x54\x85\x6f\x16\x89\xa9\xdd\x85\xa7\xf5\xad\x19\x6f\x17\x48\x38\xaa\x03\x08\x6d\x33\xd9\xd5\xd2\x70\x3f\xa5\xe3\x4a\x8a\x7c\xab\x20\x21\xb0\x94\x38\xb7\x2b\x46\xed\x88\x99\x7c\x1e\x98\xf0\xcd\x1a\x3f\xf1\x1c\x1b\x36\x36\x63\xc4\x9b\xee\xa3\x26\x11\x99\x3e\x66\x3e\x62\xd4\xca\xec\xc7\xa2\xad\x35\x40\xa6\xf0\xbf\x19\xbd\x77\xe2\xdf\xc3\xce\xe9\x58\xf3\x7e\xb0\x0b\x62\xff\xf8\x3f\x81\x66\x77\xe5\x3d\xe8\xac\xbc\x07\x49\x54\xed\xba\x66\xf9\xb5\xff\xaf\xf3\xcf\x00\x00\x00\xff\xff\x76\xbe\xb5\x26\x2e\x1a\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/index.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
