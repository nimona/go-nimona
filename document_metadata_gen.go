// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package nimona

import (
	"bytes"
	"fmt"
	"io"
	"math"
	"sort"

	cid "github.com/ipfs/go-cid"
	zero "github.com/vikyd/zero"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = bytes.Compare
var _ = xerrors.Errorf
var _ = cid.Undef
var _ = math.E
var _ = sort.Sort
var _ = zero.IsZeroVal

func (t *DocumentBase) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)
	fieldCount := 2

	if zero.IsZeroVal(t.Metadata) {
		fieldCount--
	}

	if _, err := cw.Write(cbg.CborEncodeMajorType(cbg.MajMap, uint64(fieldCount))); err != nil {
		return err
	}

	// t.Type (string) (string)
	if len("$type") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"$type\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("$type"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("$type")); err != nil {
		return err
	}

	if len(t.Type) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.Type was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Type))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.Type)); err != nil {
		return err
	}

	// t.Metadata (nimona.Metadata) (struct)
	if !zero.IsZeroVal(t.Metadata) {

		if len("$metadata") > cbg.MaxLength {
			return xerrors.Errorf("Value in field \"$metadata\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("$metadata"))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string("$metadata")); err != nil {
			return err
		}

		if err := t.Metadata.MarshalCBOR(cw); err != nil {
			return err
		}
	}

	// t.DocumentBytes ([]uint8) (slice) - ignored

	return nil
}

func (t *DocumentBase) UnmarshalCBOR(r io.Reader) (err error) {
	if t == nil {
		*t = DocumentBase{}
	}
	rawBytes := bytes.NewBuffer(nil)
	r = io.TeeReader(r, rawBytes)
	defer func() {
		if err == nil {
			t.DocumentBytes = rawBytes.Bytes()
		}
	}()

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("DocumentBase: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.Type (string) (string)
		case "$type":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.Type = string(sval)
			}
			// t.Metadata (nimona.Metadata) (struct)
		case "$metadata":

			{

				if err := t.Metadata.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("unmarshaling t.Metadata: %w", err)
				}

			}
			// t.DocumentBytes ([]uint8) (slice) - ignored

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}

func (t *Metadata) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)
	fieldCount := 4

	if t.Owner == nil {
		fieldCount--
	}

	if zero.IsZeroVal(t.Permissions) {
		fieldCount--
	}

	if zero.IsZeroVal(t.Timestamp) {
		fieldCount--
	}

	if zero.IsZeroVal(t.Signature) {
		fieldCount--
	}

	if _, err := cw.Write(cbg.CborEncodeMajorType(cbg.MajMap, uint64(fieldCount))); err != nil {
		return err
	}

	// t.Owner (nimona.IdentityID) (struct)
	if t.Owner != nil {

		if len("owner") > cbg.MaxLength {
			return xerrors.Errorf("Value in field \"owner\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("owner"))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string("owner")); err != nil {
			return err
		}

		if err := t.Owner.MarshalCBOR(cw); err != nil {
			return err
		}
	}

	// t.Permissions ([]nimona.Permissions) (slice)
	if !zero.IsZeroVal(t.Permissions) {

		if len("permissions") > cbg.MaxLength {
			return xerrors.Errorf("Value in field \"permissions\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("permissions"))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string("permissions")); err != nil {
			return err
		}

		if len(t.Permissions) > cbg.MaxLength {
			return xerrors.Errorf("Slice value in field t.Permissions was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajArray, uint64(len(t.Permissions))); err != nil {
			return err
		}
		for _, v := range t.Permissions {
			if err := v.MarshalCBOR(cw); err != nil {
				return err
			}
		}
	}

	// t.Timestamp (typegen.CborTime) (struct)
	if !zero.IsZeroVal(t.Timestamp) {

		if len("timestamp") > cbg.MaxLength {
			return xerrors.Errorf("Value in field \"timestamp\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("timestamp"))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string("timestamp")); err != nil {
			return err
		}

		if err := t.Timestamp.MarshalCBOR(cw); err != nil {
			return err
		}
	}

	// t.Signature (nimona.Signature) (struct)
	if !zero.IsZeroVal(t.Signature) {

		if len("_signature") > cbg.MaxLength {
			return xerrors.Errorf("Value in field \"_signature\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("_signature"))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string("_signature")); err != nil {
			return err
		}

		if err := t.Signature.MarshalCBOR(cw); err != nil {
			return err
		}
	}
	return nil
}

func (t *Metadata) UnmarshalCBOR(r io.Reader) (err error) {
	if t == nil {
		*t = Metadata{}
	}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("Metadata: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.Owner (nimona.IdentityID) (struct)
		case "owner":

			{

				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}
					t.Owner = new(IdentityID)
					if err := t.Owner.UnmarshalCBOR(cr); err != nil {
						return xerrors.Errorf("unmarshaling t.Owner pointer: %w", err)
					}
				}

			}
			// t.Permissions ([]nimona.Permissions) (slice)
		case "permissions":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > cbg.MaxLength {
				return fmt.Errorf("t.Permissions: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return fmt.Errorf("expected cbor array")
			}

			if extra > 0 {
				t.Permissions = make([]Permissions, extra)
			}

			for i := 0; i < int(extra); i++ {

				var v Permissions
				if err := v.UnmarshalCBOR(cr); err != nil {
					return err
				}

				t.Permissions[i] = v
			}

			// t.Timestamp (typegen.CborTime) (struct)
		case "timestamp":

			{

				if err := t.Timestamp.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("unmarshaling t.Timestamp: %w", err)
				}

			}
			// t.Signature (nimona.Signature) (struct)
		case "_signature":

			{

				if err := t.Signature.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("unmarshaling t.Signature: %w", err)
				}

			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}

func (t *Permissions) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{163}); err != nil {
		return err
	}

	// t.Paths ([]string) (slice)
	if len("paths") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"paths\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("paths"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("paths")); err != nil {
		return err
	}

	if len(t.Paths) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.Paths was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajArray, uint64(len(t.Paths))); err != nil {
		return err
	}
	for _, v := range t.Paths {
		if len(v) > cbg.MaxLength {
			return xerrors.Errorf("Value in field v was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(v))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string(v)); err != nil {
			return err
		}
	}

	// t.Operations (nimona.PermissionsAllow) (struct)
	if len("operations") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"operations\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("operations"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("operations")); err != nil {
		return err
	}

	if err := t.Operations.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.Conditions (nimona.PermissionsCondition) (struct)
	if len("conditions") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"conditions\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("conditions"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("conditions")); err != nil {
		return err
	}

	if err := t.Conditions.MarshalCBOR(cw); err != nil {
		return err
	}
	return nil
}

func (t *Permissions) UnmarshalCBOR(r io.Reader) (err error) {
	if t == nil {
		*t = Permissions{}
	}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("Permissions: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.Paths ([]string) (slice)
		case "paths":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > cbg.MaxLength {
				return fmt.Errorf("t.Paths: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return fmt.Errorf("expected cbor array")
			}

			if extra > 0 {
				t.Paths = make([]string, extra)
			}

			for i := 0; i < int(extra); i++ {

				{
					sval, err := cbg.ReadString(cr)
					if err != nil {
						return err
					}

					t.Paths[i] = string(sval)
				}
			}

			// t.Operations (nimona.PermissionsAllow) (struct)
		case "operations":

			{

				if err := t.Operations.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("unmarshaling t.Operations: %w", err)
				}

			}
			// t.Conditions (nimona.PermissionsCondition) (struct)
		case "conditions":

			{

				if err := t.Conditions.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("unmarshaling t.Conditions: %w", err)
				}

			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}

func (t *PermissionsAllow) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)
	fieldCount := 7

	if zero.IsZeroVal(t.Read) {
		fieldCount--
	}

	if zero.IsZeroVal(t.Add) {
		fieldCount--
	}

	if zero.IsZeroVal(t.Remove) {
		fieldCount--
	}

	if zero.IsZeroVal(t.Replace) {
		fieldCount--
	}

	if zero.IsZeroVal(t.Move) {
		fieldCount--
	}

	if zero.IsZeroVal(t.Copy) {
		fieldCount--
	}

	if zero.IsZeroVal(t.Test) {
		fieldCount--
	}

	if _, err := cw.Write(cbg.CborEncodeMajorType(cbg.MajMap, uint64(fieldCount))); err != nil {
		return err
	}

	// t.Read (bool) (bool)
	if !zero.IsZeroVal(t.Read) {

		if len("read") > cbg.MaxLength {
			return xerrors.Errorf("Value in field \"read\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("read"))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string("read")); err != nil {
			return err
		}

		if err := cbg.WriteBool(w, t.Read); err != nil {
			return err
		}
	}

	// t.Add (bool) (bool)
	if !zero.IsZeroVal(t.Add) {

		if len("add") > cbg.MaxLength {
			return xerrors.Errorf("Value in field \"add\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("add"))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string("add")); err != nil {
			return err
		}

		if err := cbg.WriteBool(w, t.Add); err != nil {
			return err
		}
	}

	// t.Remove (bool) (bool)
	if !zero.IsZeroVal(t.Remove) {

		if len("remove") > cbg.MaxLength {
			return xerrors.Errorf("Value in field \"remove\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("remove"))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string("remove")); err != nil {
			return err
		}

		if err := cbg.WriteBool(w, t.Remove); err != nil {
			return err
		}
	}

	// t.Replace (bool) (bool)
	if !zero.IsZeroVal(t.Replace) {

		if len("replace") > cbg.MaxLength {
			return xerrors.Errorf("Value in field \"replace\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("replace"))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string("replace")); err != nil {
			return err
		}

		if err := cbg.WriteBool(w, t.Replace); err != nil {
			return err
		}
	}

	// t.Move (bool) (bool)
	if !zero.IsZeroVal(t.Move) {

		if len("move") > cbg.MaxLength {
			return xerrors.Errorf("Value in field \"move\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("move"))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string("move")); err != nil {
			return err
		}

		if err := cbg.WriteBool(w, t.Move); err != nil {
			return err
		}
	}

	// t.Copy (bool) (bool)
	if !zero.IsZeroVal(t.Copy) {

		if len("copy") > cbg.MaxLength {
			return xerrors.Errorf("Value in field \"copy\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("copy"))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string("copy")); err != nil {
			return err
		}

		if err := cbg.WriteBool(w, t.Copy); err != nil {
			return err
		}
	}

	// t.Test (bool) (bool)
	if !zero.IsZeroVal(t.Test) {

		if len("test") > cbg.MaxLength {
			return xerrors.Errorf("Value in field \"test\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("test"))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string("test")); err != nil {
			return err
		}

		if err := cbg.WriteBool(w, t.Test); err != nil {
			return err
		}
	}
	return nil
}

func (t *PermissionsAllow) UnmarshalCBOR(r io.Reader) (err error) {
	if t == nil {
		*t = PermissionsAllow{}
	}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("PermissionsAllow: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.Read (bool) (bool)
		case "read":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}
			if maj != cbg.MajOther {
				return fmt.Errorf("booleans must be major type 7")
			}
			switch extra {
			case 20:
				t.Read = false
			case 21:
				t.Read = true
			default:
				return fmt.Errorf("booleans are either major type 7, value 20 or 21 (got %d)", extra)
			}
			// t.Add (bool) (bool)
		case "add":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}
			if maj != cbg.MajOther {
				return fmt.Errorf("booleans must be major type 7")
			}
			switch extra {
			case 20:
				t.Add = false
			case 21:
				t.Add = true
			default:
				return fmt.Errorf("booleans are either major type 7, value 20 or 21 (got %d)", extra)
			}
			// t.Remove (bool) (bool)
		case "remove":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}
			if maj != cbg.MajOther {
				return fmt.Errorf("booleans must be major type 7")
			}
			switch extra {
			case 20:
				t.Remove = false
			case 21:
				t.Remove = true
			default:
				return fmt.Errorf("booleans are either major type 7, value 20 or 21 (got %d)", extra)
			}
			// t.Replace (bool) (bool)
		case "replace":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}
			if maj != cbg.MajOther {
				return fmt.Errorf("booleans must be major type 7")
			}
			switch extra {
			case 20:
				t.Replace = false
			case 21:
				t.Replace = true
			default:
				return fmt.Errorf("booleans are either major type 7, value 20 or 21 (got %d)", extra)
			}
			// t.Move (bool) (bool)
		case "move":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}
			if maj != cbg.MajOther {
				return fmt.Errorf("booleans must be major type 7")
			}
			switch extra {
			case 20:
				t.Move = false
			case 21:
				t.Move = true
			default:
				return fmt.Errorf("booleans are either major type 7, value 20 or 21 (got %d)", extra)
			}
			// t.Copy (bool) (bool)
		case "copy":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}
			if maj != cbg.MajOther {
				return fmt.Errorf("booleans must be major type 7")
			}
			switch extra {
			case 20:
				t.Copy = false
			case 21:
				t.Copy = true
			default:
				return fmt.Errorf("booleans are either major type 7, value 20 or 21 (got %d)", extra)
			}
			// t.Test (bool) (bool)
		case "test":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}
			if maj != cbg.MajOther {
				return fmt.Errorf("booleans must be major type 7")
			}
			switch extra {
			case 20:
				t.Test = false
			case 21:
				t.Test = true
			default:
				return fmt.Errorf("booleans are either major type 7, value 20 or 21 (got %d)", extra)
			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}

func (t *PermissionsCondition) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)
	fieldCount := 1

	if zero.IsZeroVal(t.IsOwner) {
		fieldCount--
	}

	if _, err := cw.Write(cbg.CborEncodeMajorType(cbg.MajMap, uint64(fieldCount))); err != nil {
		return err
	}

	// t.IsOwner (bool) (bool)
	if !zero.IsZeroVal(t.IsOwner) {

		if len("isOwner") > cbg.MaxLength {
			return xerrors.Errorf("Value in field \"isOwner\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("isOwner"))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string("isOwner")); err != nil {
			return err
		}

		if err := cbg.WriteBool(w, t.IsOwner); err != nil {
			return err
		}
	}
	return nil
}

func (t *PermissionsCondition) UnmarshalCBOR(r io.Reader) (err error) {
	if t == nil {
		*t = PermissionsCondition{}
	}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("PermissionsCondition: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.IsOwner (bool) (bool)
		case "isOwner":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}
			if maj != cbg.MajOther {
				return fmt.Errorf("booleans must be major type 7")
			}
			switch extra {
			case 20:
				t.IsOwner = false
			case 21:
				t.IsOwner = true
			default:
				return fmt.Errorf("booleans are either major type 7, value 20 or 21 (got %d)", extra)
			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}

func (t *Signature) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{162}); err != nil {
		return err
	}

	// t.Signer (nimona.PeerKey) (struct)
	if len("signer") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"signer\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("signer"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("signer")); err != nil {
		return err
	}

	if err := t.Signer.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.X ([]uint8) (slice)
	if len("x") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"x\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("x"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("x")); err != nil {
		return err
	}

	if len(t.X) > cbg.ByteArrayMaxLen {
		return xerrors.Errorf("Byte array in field t.X was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajByteString, uint64(len(t.X))); err != nil {
		return err
	}

	if _, err := cw.Write(t.X[:]); err != nil {
		return err
	}
	return nil
}

func (t *Signature) UnmarshalCBOR(r io.Reader) (err error) {
	if t == nil {
		*t = Signature{}
	}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("Signature: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.Signer (nimona.PeerKey) (struct)
		case "signer":

			{

				if err := t.Signer.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("unmarshaling t.Signer: %w", err)
				}

			}
			// t.X ([]uint8) (slice)
		case "x":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > cbg.ByteArrayMaxLen {
				return fmt.Errorf("t.X: byte array too large (%d)", extra)
			}
			if maj != cbg.MajByteString {
				return fmt.Errorf("expected byte array")
			}

			if extra > 0 {
				t.X = make([]uint8, extra)
			}

			if _, err := io.ReadFull(cr, t.X[:]); err != nil {
				return err
			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
