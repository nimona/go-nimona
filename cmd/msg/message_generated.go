// Code generated by nimona.io/tools/codegen. DO NOT EDIT.

package main

import (
	"errors"

	object "nimona.io/pkg/object"
)

type (
	Msg struct {
		raw      object.Object
		Metadata object.Metadata
		Datetime int64
		Body     string
	}
)

func (e Msg) GetType() string {
	return "nimona.io/msg"
}

func (e Msg) IsStreamRoot() bool {
	return false
}

func (e Msg) GetSchema() *object.SchemaObject {
	return &object.SchemaObject{
		Properties: []*object.SchemaProperty{{
			Name:       "datetime",
			Type:       "int",
			Hint:       "i",
			IsRepeated: false,
			IsOptional: false,
		}, {
			Name:       "body",
			Type:       "string",
			Hint:       "s",
			IsRepeated: false,
			IsOptional: false,
		}},
	}
}

func (e Msg) ToObject() object.Object {
	o := object.Object{}
	o = o.SetType("nimona.io/msg")
	if len(e.Metadata.Stream) > 0 {
		o = o.SetStream(e.Metadata.Stream)
	}
	if len(e.Metadata.Parents) > 0 {
		o = o.SetParents(e.Metadata.Parents)
	}
	if !e.Metadata.Owner.IsEmpty() {
		o = o.SetOwner(e.Metadata.Owner)
	}
	if !e.Metadata.Signature.IsEmpty() {
		o = o.SetSignature(e.Metadata.Signature)
	}
	o = o.SetPolicy(e.Metadata.Policy)
	o = o.Set("datetime:i", e.Datetime)
	if e.Body != "" {
		o = o.Set("body:s", e.Body)
	}
	// if schema := e.GetSchema(); schema != nil {
	// 	m["_schema:m"] = schema.ToObject().ToMap()
	// }
	return o
}

func (e *Msg) FromObject(o object.Object) error {
	data, ok := o.Raw().Value("data:m").(object.Map)
	if !ok {
		return errors.New("missing data")
	}
	e.raw = object.Object{}
	e.raw = e.raw.SetType(o.GetType())
	e.Metadata.Stream = o.GetStream()
	e.Metadata.Parents = o.GetParents()
	e.Metadata.Owner = o.GetOwner()
	e.Metadata.Signature = o.GetSignature()
	e.Metadata.Policy = o.GetPolicy()
	if v := data.Value("datetime:i"); v != nil {
		e.Datetime = int64(v.PrimitiveHinted().(int64))
	}
	if v := data.Value("body:s"); v != nil {
		e.Body = string(v.PrimitiveHinted().(string))
	}
	return nil
}
