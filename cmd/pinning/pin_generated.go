// Code generated by nimona.io/tools/codegen. DO NOT EDIT.

package main

import (
	object "nimona.io/pkg/object"
)

type (
	PinRequest struct {
		Metadata  object.Metadata `nimona:"metadata:m,omitempty"`
		RequestID string          `nimona:"requestID:s,omitempty"`
		Hash      object.Hash     `nimona:"hash:r,omitempty"`
		Ttl       int64           `nimona:"ttl:i,omitempty"`
	}
	PinResponse struct {
		Metadata  object.Metadata `nimona:"metadata:m,omitempty"`
		RequestID string          `nimona:"requestID:s,omitempty"`
		Hash      object.Hash     `nimona:"hash:r,omitempty"`
		Success   bool            `nimona:"success:b,omitempty"`
		Error     string          `nimona:"error:s,omitempty"`
		Ttl       int64           `nimona:"ttl:i,omitempty"`
	}
	ListRequest struct {
		Metadata  object.Metadata `nimona:"metadata:m,omitempty"`
		RequestID string          `nimona:"requestID:s,omitempty"`
	}
	ListResponse struct {
		Metadata  object.Metadata `nimona:"metadata:m,omitempty"`
		RequestID string          `nimona:"requestID:s,omitempty"`
		Hashes    []object.Hash   `nimona:"hashes:ar,omitempty"`
	}
)

func (e *PinRequest) Type() string {
	return "PinRequest"
}

func (e PinRequest) ToObject() *object.Object {
	r := &object.Object{
		Type:     "PinRequest",
		Metadata: e.Metadata,
		Data:     map[string]interface{}{},
	}
	r.Data["requestID:s"] = e.RequestID
	r.Data["hash:r"] = e.Hash
	r.Data["ttl:i"] = e.Ttl
	return r
}

func (e PinRequest) ToObjectMap() map[string]interface{} {
	d := map[string]interface{}{}
	d["requestID:s"] = e.RequestID
	d["hash:r"] = e.Hash
	d["ttl:i"] = e.Ttl
	r := map[string]interface{}{
		"type:s":     "PinRequest",
		"metadata:m": object.MetadataToMap(&e.Metadata),
		"data:m":     d,
	}
	return r
}

func (e *PinRequest) FromObject(o *object.Object) error {
	return object.Decode(o, e)
}

func (e *PinResponse) Type() string {
	return "PinResponse"
}

func (e PinResponse) ToObject() *object.Object {
	r := &object.Object{
		Type:     "PinResponse",
		Metadata: e.Metadata,
		Data:     map[string]interface{}{},
	}
	r.Data["requestID:s"] = e.RequestID
	r.Data["hash:r"] = e.Hash
	r.Data["success:b"] = e.Success
	r.Data["error:s"] = e.Error
	r.Data["ttl:i"] = e.Ttl
	return r
}

func (e PinResponse) ToObjectMap() map[string]interface{} {
	d := map[string]interface{}{}
	d["requestID:s"] = e.RequestID
	d["hash:r"] = e.Hash
	d["success:b"] = e.Success
	d["error:s"] = e.Error
	d["ttl:i"] = e.Ttl
	r := map[string]interface{}{
		"type:s":     "PinResponse",
		"metadata:m": object.MetadataToMap(&e.Metadata),
		"data:m":     d,
	}
	return r
}

func (e *PinResponse) FromObject(o *object.Object) error {
	return object.Decode(o, e)
}

func (e *ListRequest) Type() string {
	return "ListRequest"
}

func (e ListRequest) ToObject() *object.Object {
	r := &object.Object{
		Type:     "ListRequest",
		Metadata: e.Metadata,
		Data:     map[string]interface{}{},
	}
	r.Data["requestID:s"] = e.RequestID
	return r
}

func (e ListRequest) ToObjectMap() map[string]interface{} {
	d := map[string]interface{}{}
	d["requestID:s"] = e.RequestID
	r := map[string]interface{}{
		"type:s":     "ListRequest",
		"metadata:m": object.MetadataToMap(&e.Metadata),
		"data:m":     d,
	}
	return r
}

func (e *ListRequest) FromObject(o *object.Object) error {
	return object.Decode(o, e)
}

func (e *ListResponse) Type() string {
	return "ListResponse"
}

func (e ListResponse) ToObject() *object.Object {
	r := &object.Object{
		Type:     "ListResponse",
		Metadata: e.Metadata,
		Data:     map[string]interface{}{},
	}
	r.Data["requestID:s"] = e.RequestID
	if len(e.Hashes) > 0 {
		r.Data["hashes:ar"] = e.Hashes
	}
	return r
}

func (e ListResponse) ToObjectMap() map[string]interface{} {
	d := map[string]interface{}{}
	d["requestID:s"] = e.RequestID
	if len(e.Hashes) > 0 {
		d["hashes:ar"] = e.Hashes
	}
	r := map[string]interface{}{
		"type:s":     "ListResponse",
		"metadata:m": object.MetadataToMap(&e.Metadata),
		"data:m":     d,
	}
	return r
}

func (e *ListResponse) FromObject(o *object.Object) error {
	return object.Decode(o, e)
}
