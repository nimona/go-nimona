package transport

import context "context"
import mock "github.com/stretchr/testify/mock"

import address "github.com/nimona/go-nimona-fabric/address"
import conn "github.com/nimona/go-nimona-fabric/connection"
import protocol "github.com/nimona/go-nimona-fabric/protocol"

// MockTransport is an autogenerated mock type for the Transport type
type MockTransport struct {
	mock.Mock
}

// Addresses provides a mock function with given fields:
func (_m *MockTransport) Addresses() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// CanDial provides a mock function with given fields: addr
func (_m *MockTransport) CanDial(addr *address.Address) (bool, error) {
	ret := _m.Called(addr)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*address.Address) bool); ok {
		r0 = rf(addr)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*address.Address) error); ok {
		r1 = rf(addr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DialContext provides a mock function with given fields: ctx, addr
func (_m *MockTransport) DialContext(ctx context.Context, addr *address.Address) (context.Context, conn.Conn, error) {
	ret := _m.Called(ctx, addr)

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context.Context, *address.Address) context.Context); ok {
		r0 = rf(ctx, addr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	var r1 conn.Conn
	if rf, ok := ret.Get(1).(func(context.Context, *address.Address) conn.Conn); ok {
		r1 = rf(ctx, addr)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(conn.Conn)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *address.Address) error); ok {
		r2 = rf(ctx, addr)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Listen provides a mock function with given fields: _a0, _a1
func (_m *MockTransport) Listen(_a0 context.Context, _a1 protocol.HandlerFunc) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, protocol.HandlerFunc) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
