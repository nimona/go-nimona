// Code generated by nimona.io/go/cmd/objectify. DO NOT EDIT.

// +build !generate

package net

import (
	"nimona.io/go/crypto"
	"nimona.io/go/encoding"
	"nimona.io/go/peers"
)

// ToMap returns a map compatible with f12n
func (s HandshakeSynAck) ToMap() map[string]interface{} {
	m := map[string]interface{}{
		"@ctx:s":  "/handshake.syn-ack",
		"nonce:s": s.Nonce,
	}
	if s.PeerInfo != nil {
		m["peerInfo:o"] = s.PeerInfo.ToMap()
	}
	if s.Signer != nil {
		m["@signer:o"] = s.Signer.ToMap()
	}
	if s.Signature != nil {
		m["@signature:o"] = s.Signature.ToMap()
	}
	return m
}

// ToObject returns a f12n object
func (s HandshakeSynAck) ToObject() *encoding.Object {
	return encoding.NewObjectFromMap(s.ToMap())
}

// FromMap populates the struct from a f12n compatible map
func (s *HandshakeSynAck) FromMap(m map[string]interface{}) error {
	if v, ok := m["nonce:s"].(string); ok {
		s.Nonce = v
	}
	if v, ok := m["peerInfo:o"].(map[string]interface{}); ok {
		s.PeerInfo = &peers.PeerInfo{}
		if err := s.PeerInfo.FromMap(v); err != nil {
			return err
		}
	} else if v, ok := m["peerInfo:o"].(*peers.PeerInfo); ok {
		s.PeerInfo = v
	}
	if v, ok := m["peerInfo:o"].(*peers.PeerInfo); ok {
		s.PeerInfo = v
	}
	if v, ok := m["@signer:o"].(map[string]interface{}); ok {
		s.Signer = &crypto.Key{}
		if err := s.Signer.FromMap(v); err != nil {
			return err
		}
	} else if v, ok := m["@signer:o"].(*crypto.Key); ok {
		s.Signer = v
	}
	if v, ok := m["@signer:o"].(*crypto.Key); ok {
		s.Signer = v
	}
	if v, ok := m["@signature:o"].(map[string]interface{}); ok {
		s.Signature = &crypto.Signature{}
		if err := s.Signature.FromMap(v); err != nil {
			return err
		}
	} else if v, ok := m["@signature:o"].(*crypto.Signature); ok {
		s.Signature = v
	}
	if v, ok := m["@signature:o"].(*crypto.Signature); ok {
		s.Signature = v
	}
	return nil
}

// FromObject populates the struct from a f12n object
func (s *HandshakeSynAck) FromObject(o *encoding.Object) error {
	return s.FromMap(o.ToMap())
}

// GetType returns the object's type
func (s HandshakeSynAck) GetType() string {
	return "/handshake.syn-ack"
}
