// Code generated by nimona.io/go/cmd/objectify. DO NOT EDIT.

// +build !generate

package net

import (
	"nimona.io/go/encoding"
)

// ToMap returns a map compatible with f12n
func (s HandshakeAck) ToMap() map[string]interface{} {
	m := map[string]interface{}{
		"@ctx:s":  "/handshake.ack",
		"nonce:s": s.Nonce,
	}
	return m
}

// ToObject returns a f12n object
func (s HandshakeAck) ToObject() *encoding.Object {
	return encoding.NewObjectFromMap(s.ToMap())
}

// FromMap populates the struct from a f12n compatible map
func (s *HandshakeAck) FromMap(m map[string]interface{}) error {
	s.RawObject = encoding.NewObjectFromMap(m)
	if v, ok := m["nonce:s"].(string); ok {
		s.Nonce = v
	}
	return nil
}

// FromObject populates the struct from a f12n object
func (s *HandshakeAck) FromObject(o *encoding.Object) error {
	return s.FromMap(o.ToMap())
}

// GetType returns the object's type
func (s HandshakeAck) GetType() string {
	return "/handshake.ack"
}
