// Code generated by nimona.io. DO NOT EDIT.

package nimona

import (
	"github.com/vikyd/zero"

	"nimona.io/internal/tilde"
)

var _ = zero.IsZeroVal
var _ = tilde.NewScanner

func (t *Ping) Document() *Document {
	return NewDocumentMap(t.Map())
}

func (t *Ping) Map() tilde.Map {
	m := tilde.Map{}

	// # t.$type
	//
	// Type: string, Kind: string, TildeKind: InvalidValueKind0
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		m.Set("$type", tilde.String("test/ping"))
	}

	// # t.Nonce
	//
	// Type: string, Kind: string, TildeKind: String
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		m.Set("nonce", tilde.String(t.Nonce))
	}

	return m
}

func (t *Ping) FromDocumentMap(d *Document) error {
	return t.FromMap(d.Map())
}

func (t *Ping) FromMap(d tilde.Map) error {
	*t = Ping{}

	// # t.Nonce
	//
	// Type: string, Kind: string, TildeKind: String
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		if v, err := d.Get("nonce"); err == nil {
			if v, ok := v.(tilde.String); ok {
				t.Nonce = string(v)
			}
		}
	}

	return nil
}
func (t *Pong) Document() *Document {
	return NewDocumentMap(t.Map())
}

func (t *Pong) Map() tilde.Map {
	m := tilde.Map{}

	// # t.$type
	//
	// Type: string, Kind: string, TildeKind: InvalidValueKind0
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		m.Set("$type", tilde.String("test/pong"))
	}

	// # t.Nonce
	//
	// Type: string, Kind: string, TildeKind: String
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		m.Set("nonce", tilde.String(t.Nonce))
	}

	return m
}

func (t *Pong) FromDocumentMap(d *Document) error {
	return t.FromMap(d.Map())
}

func (t *Pong) FromMap(d tilde.Map) error {
	*t = Pong{}

	// # t.Nonce
	//
	// Type: string, Kind: string, TildeKind: String
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		if v, err := d.Get("nonce"); err == nil {
			if v, ok := v.(tilde.String); ok {
				t.Nonce = string(v)
			}
		}
	}

	return nil
}
