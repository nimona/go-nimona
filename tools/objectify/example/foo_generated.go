// Code generated by nimona.io/tools/objectify. DO NOT EDIT.

// +build !generate

package example

import (
	"github.com/mitchellh/mapstructure"
	"nimona.io/pkg/object"
)

const (
	FooType = "test/foo"
)

// ToObject returns a f12n object
func (s Foo) ToObject() *object.Object {
	o := object.New()
	o.SetType(FooType)
	if s.Bar != "" {
		o.SetRaw("bar", s.Bar)
	}
	if len(s.Bars) > 0 {
		o.SetRaw("bars", s.Bars)
	}
	if s.InnerFoo != nil {
		o.SetRaw("inner_foo", s.InnerFoo)
	}
	if len(s.InnerFoos) > 0 {
		o.SetRaw("inner_foos", s.InnerFoos)
	}
	if s.Object != nil {
		o.SetRaw("object", s.Object)
	}
	if len(s.Objects) > 0 {
		o.SetRaw("objects", s.Objects)
	}
	return o
}

func anythingToAnythingForFoo(
	from interface{},
	to interface{},
) error {
	config := &mapstructure.DecoderConfig{
		Result:  to,
		TagName: "json",
	}

	decoder, err := mapstructure.NewDecoder(config)
	if err != nil {
		return err
	}

	if err := decoder.Decode(from); err != nil {
		return err
	}

	return nil
}

// FromObject populates the struct from a f12n object
func (s *Foo) FromObject(o *object.Object) error {
	atoa := anythingToAnythingForFoo
	if err := atoa(o.GetRaw("bar"), &s.Bar); err != nil {
		return err
	}
	if err := atoa(o.GetRaw("bars"), &s.Bars); err != nil {
		return err
	}
	if v, ok := o.GetRaw("inner_foo").(*InnerFoo); ok {
		s.InnerFoo = v
	} else if v, ok := o.GetRaw("inner_foo").(map[string]interface{}); ok {
		s.InnerFoo = &InnerFoo{}
		o := &object.Object{}
		if err := o.FromMap(v); err != nil {
			return err
		}
		s.InnerFoo.FromObject(o)
	}
	if err := atoa(o.GetRaw("inner_foos"), &s.InnerFoos); err != nil {
		return err
	}
	if v, ok := o.GetRaw("object").(map[string]interface{}); ok {
		s.Object = &object.Object{}
		s.Object.FromMap(v)
	}
	if err := atoa(o.GetRaw("objects"), &s.Objects); err != nil {
		return err
	}

	return nil
}

// GetType returns the object's type
func (s Foo) GetType() string {
	return FooType
}
