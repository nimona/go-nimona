// Code generated by nimona.io/tools/objectify. DO NOT EDIT.

// +build !generate

package example

import (
	"nimona.io/pkg/object"
)

const (
	FooType = "test/foo"
)

// ToObject returns a f12n object
func (s Foo) ToObject() *object.Object {
	o := object.New()
	o.SetType(FooType)
	if s.Bar != "" {
		o.SetRaw("bar", s.Bar)
	}
	if len(s.Bars) > 0 {
		o.SetRaw("bars", s.Bars)
	}
	if s.InnerFoo != nil {
		o.SetRaw("inner_foo", s.InnerFoo)
	}
	if len(s.InnerFoos) > 0 {
		o.SetRaw("inner_foos", s.InnerFoos)
	}
	return o
}

// FromObject populates the struct from a f12n object
func (s *Foo) FromObject(o *object.Object) error {
	s.RawObject = o
	if v, ok := o.GetRaw("bar").(string); ok {
		s.Bar = v
	}
	if ss, ok := o.GetRaw("bars").([]string); ok {
		s.Bars = ss
	} else if ss, ok := o.GetRaw("bars").([]interface{}); ok {
		s.Bars = []string{}
		for _, si := range ss {
			if v, ok := si.(string); ok {
				s.Bars = append(s.Bars, v)
			}
		}
	}
	if v, ok := o.GetRaw("inner_foo").(*InnerFoo); ok {
		s.InnerFoo = v
	} else if v, ok := o.GetRaw("inner_foo").(*object.Object); ok {
		s.InnerFoo = &InnerFoo{}
		s.InnerFoo.FromObject(v)
	}
	if ss, ok := o.GetRaw("inner_foos").([]*InnerFoo); ok {
		s.InnerFoos = ss
	} else if ss, ok := o.GetRaw("inner_foos").([]interface{}); ok {
		s.InnerFoos = []*InnerFoo{}
		for _, si := range ss {
			if v, ok := si.(*InnerFoo); ok {
				s.InnerFoos = append(s.InnerFoos, v)
			} else if v, ok := si.(*object.Object); ok {
				sInnerFoos := &InnerFoo{}
				if err := sInnerFoos.FromObject(v); err != nil {
					return err
				}
				s.InnerFoos = append(s.InnerFoos, sInnerFoos)
			}
		}
	}
	return nil
}

// GetType returns the object's type
func (s Foo) GetType() string {
	return FooType
}
