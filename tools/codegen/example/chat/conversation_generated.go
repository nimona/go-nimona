// Code generated by nimona.io/tools/codegen. DO NOT EDIT.

package chat

import (
	json "encoding/json"
	crypto "example/crypto"

	object "nimona.io/pkg/object"
)

type (
	TopicSet struct {
		Stream    crypto.Hash         `json:"@stream:o,omitempty"`
		Topic     string              `json:"topic:s,omitempty"`
		Signature *crypto.Signature   `json:"@signature:o,omitempty"`
		Authors   []*crypto.PublicKey `json:"@authors:ao,omitempty"`
	}
	NameSet struct {
		Stream    crypto.Hash         `json:"@stream:o,omitempty"`
		Name      string              `json:"name:s,omitempty"`
		Signature *crypto.Signature   `json:"@signature:o,omitempty"`
		Authors   []*crypto.PublicKey `json:"@authors:ao,omitempty"`
	}
	MessageAdded struct {
		Stream    crypto.Hash         `json:"@stream:o,omitempty"`
		Parents   crypto.Hash         `json:"parents:ao,omitempty"`
		Body      string              `json:"body:s,omitempty"`
		Signature *crypto.Signature   `json:"@signature:o,omitempty"`
		Authors   []*crypto.PublicKey `json:"@authors:ao,omitempty"`
	}
)

func (e *TopicSet) EventName() string {
	return "TopicSet"
}

func (e *TopicSet) GetType() string {
	return "example/conversation.TopicSet"
}

func (e *TopicSet) ToObject() object.Object {
	m := map[string]interface{}{
		"@ctx:s":    "example/conversation.TopicSet",
		"@domain:s": "example/conversation",
		"@event:s":  "TopicSet",
	}
	b, _ := json.Marshal(e)
	json.Unmarshal(b, &m)
	return object.Object(m)
}

func (e *TopicSet) FromObject(o object.Object) error {
	b, _ := json.Marshal(map[string]interface{}(o))
	return json.Unmarshal(b, e)
}

func (e *NameSet) EventName() string {
	return "NameSet"
}

func (e *NameSet) GetType() string {
	return "example/conversation.NameSet"
}

func (e *NameSet) ToObject() object.Object {
	m := map[string]interface{}{
		"@ctx:s":    "example/conversation.NameSet",
		"@domain:s": "example/conversation",
		"@event:s":  "NameSet",
	}
	b, _ := json.Marshal(e)
	json.Unmarshal(b, &m)
	return object.Object(m)
}

func (e *NameSet) FromObject(o object.Object) error {
	b, _ := json.Marshal(map[string]interface{}(o))
	return json.Unmarshal(b, e)
}

func (e *MessageAdded) EventName() string {
	return "MessageAdded"
}

func (e *MessageAdded) GetType() string {
	return "example/conversation.MessageAdded"
}

func (e *MessageAdded) ToObject() object.Object {
	m := map[string]interface{}{
		"@ctx:s":    "example/conversation.MessageAdded",
		"@domain:s": "example/conversation",
		"@event:s":  "MessageAdded",
	}
	b, _ := json.Marshal(e)
	json.Unmarshal(b, &m)
	return object.Object(m)
}

func (e *MessageAdded) FromObject(o object.Object) error {
	b, _ := json.Marshal(map[string]interface{}(o))
	return json.Unmarshal(b, e)
}
