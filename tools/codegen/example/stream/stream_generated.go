// Code generated by nimona.io/tools/codegen. DO NOT EDIT.

package stream

import (
	crypto "nimona.io/pkg/crypto"
	"nimona.io/pkg/immutable"
	object "nimona.io/pkg/object"
)

type (
	Policy struct {
		Header     object.Header
		Subjects   []*crypto.PublicKey
		Resources  []string
		Conditions []string
		Action     string
	}
	Created struct {
		Header          object.Header
		CreatedDateTime string
		PartitionKeys   []string
		Policies        []*Policy
	}
	PoliciesUpdated struct {
		Header   object.Header
		Stream   *crypto.Hash
		Parents  []*crypto.Hash
		Policies []*Policy
	}
)

func (e Policy) GetType() string {
	return "example/stream.Policy"
}

func (e Policy) GetSchema() *object.SchemaObject {
	return &object.SchemaObject{
		Properties: []*object.SchemaProperty{
			&object.SchemaProperty{
				Name:       "subjects",
				Type:       "example/crypto.PublicKey",
				Hint:       "o",
				IsRepeated: true,
				IsOptional: false,
			},
			&object.SchemaProperty{
				Name:       "resources",
				Type:       "string",
				Hint:       "s",
				IsRepeated: true,
				IsOptional: false,
			},
			&object.SchemaProperty{
				Name:       "conditions",
				Type:       "string",
				Hint:       "s",
				IsRepeated: true,
				IsOptional: false,
			},
			&object.SchemaProperty{
				Name:       "action",
				Type:       "string",
				Hint:       "s",
				IsRepeated: false,
				IsOptional: false,
			},
		},
	}
}

func (e Policy) ToObject() object.Object {
	d := map[string]interface{}{}
	if len(e.Subjects) > 0 {
		d["subjects:ao"] = func() []interface{} {
			a := make([]interface{}, len(e.Subjects))
			for i, v := range e.Subjects {
				a[i] = v.ToObject().ToMap()
			}
			return a
		}()
	}
	if len(e.Resources) > 0 {
		d["resources:as"] = e.Resources
	}
	if len(e.Conditions) > 0 {
		d["conditions:as"] = e.Conditions
	}
	if e.Action != "" {
		d["action:s"] = e.Action
	}
	// if schema := e.GetSchema(); schema != nil {
	// 	m["_schema:o"] = schema.ToObject().ToMap()
	// }
	o := object.Object{
		Header: e.Header,
		Data:   immutable.AnyToValue(":o", d).(immutable.Map),
	}
	o.SetType("example/stream.Policy")
	return o
}

func (e *Policy) FromObject(o object.Object) error {
	e.Header = o.Header
	if v := o.Data.Value("subjects:ao"); v != nil && v.IsList() {
		m := v.PrimitiveHinted().([]interface{})
		e.Subjects = make([]*crypto.PublicKey, len(m))
		for i, iv := range m {
			es := &crypto.PublicKey{}
			eo := object.FromMap(iv.(map[string]interface{}))
			es.FromObject(eo)
			e.Subjects[i] = es
		}
	}
	if v := o.Data.Value("resources:as"); v != nil && v.IsList() {
		m := v.PrimitiveHinted().([]string)
		e.Resources = make([]string, len(m))
		for i, iv := range m {
			e.Resources[i] = string(iv)
		}
	}
	if v := o.Data.Value("conditions:as"); v != nil && v.IsList() {
		m := v.PrimitiveHinted().([]string)
		e.Conditions = make([]string, len(m))
		for i, iv := range m {
			e.Conditions[i] = string(iv)
		}
	}
	if v := o.Data.Value("action:s"); v != nil {
		e.Action = string(v.PrimitiveHinted().(string))
	}
	return nil
}

func (e Created) GetType() string {
	return "example/stream.Created"
}

func (e Created) GetSchema() *object.SchemaObject {
	return &object.SchemaObject{
		Properties: []*object.SchemaProperty{
			&object.SchemaProperty{
				Name:       "createdDateTime",
				Type:       "string",
				Hint:       "s",
				IsRepeated: false,
				IsOptional: false,
			},
			&object.SchemaProperty{
				Name:       "partitionKeys",
				Type:       "string",
				Hint:       "s",
				IsRepeated: true,
				IsOptional: false,
			},
			&object.SchemaProperty{
				Name:       "policies",
				Type:       "Policy",
				Hint:       "o",
				IsRepeated: true,
				IsOptional: false,
			},
		},
	}
}

func (e Created) ToObject() object.Object {
	d := map[string]interface{}{}
	if e.CreatedDateTime != "" {
		d["createdDateTime:s"] = e.CreatedDateTime
	}
	if len(e.PartitionKeys) > 0 {
		d["partitionKeys:as"] = e.PartitionKeys
	}
	if len(e.Policies) > 0 {
		d["policies:ao"] = func() []interface{} {
			a := make([]interface{}, len(e.Policies))
			for i, v := range e.Policies {
				a[i] = v.ToObject().ToMap()
			}
			return a
		}()
	}
	// if schema := e.GetSchema(); schema != nil {
	// 	m["_schema:o"] = schema.ToObject().ToMap()
	// }
	o := object.Object{
		Header: e.Header,
		Data:   immutable.AnyToValue(":o", d).(immutable.Map),
	}
	o.SetType("example/stream.Created")
	return o
}

func (e *Created) FromObject(o object.Object) error {
	e.Header = o.Header
	if v := o.Data.Value("createdDateTime:s"); v != nil {
		e.CreatedDateTime = string(v.PrimitiveHinted().(string))
	}
	if v := o.Data.Value("partitionKeys:as"); v != nil && v.IsList() {
		m := v.PrimitiveHinted().([]string)
		e.PartitionKeys = make([]string, len(m))
		for i, iv := range m {
			e.PartitionKeys[i] = string(iv)
		}
	}
	if v := o.Data.Value("policies:ao"); v != nil && v.IsList() {
		m := v.PrimitiveHinted().([]interface{})
		e.Policies = make([]*Policy, len(m))
		for i, iv := range m {
			es := &Policy{}
			eo := object.FromMap(iv.(map[string]interface{}))
			es.FromObject(eo)
			e.Policies[i] = es
		}
	}
	return nil
}

func (e PoliciesUpdated) GetType() string {
	return "example/stream.PoliciesUpdated"
}

func (e PoliciesUpdated) GetSchema() *object.SchemaObject {
	return &object.SchemaObject{
		Properties: []*object.SchemaProperty{
			&object.SchemaProperty{
				Name:       "stream",
				Type:       "example/crypto.Hash",
				Hint:       "o",
				IsRepeated: false,
				IsOptional: false,
			},
			&object.SchemaProperty{
				Name:       "parents",
				Type:       "example/crypto.Hash",
				Hint:       "o",
				IsRepeated: true,
				IsOptional: false,
			},
			&object.SchemaProperty{
				Name:       "policies",
				Type:       "Policy",
				Hint:       "o",
				IsRepeated: true,
				IsOptional: false,
			},
		},
	}
}

func (e PoliciesUpdated) ToObject() object.Object {
	d := map[string]interface{}{}
	if e.Stream != nil {
		d["stream:o"] = e.Stream.ToObject().ToMap()
	}
	if len(e.Parents) > 0 {
		d["parents:ao"] = func() []interface{} {
			a := make([]interface{}, len(e.Parents))
			for i, v := range e.Parents {
				a[i] = v.ToObject().ToMap()
			}
			return a
		}()
	}
	if len(e.Policies) > 0 {
		d["policies:ao"] = func() []interface{} {
			a := make([]interface{}, len(e.Policies))
			for i, v := range e.Policies {
				a[i] = v.ToObject().ToMap()
			}
			return a
		}()
	}
	// if schema := e.GetSchema(); schema != nil {
	// 	m["_schema:o"] = schema.ToObject().ToMap()
	// }
	o := object.Object{
		Header: e.Header,
		Data:   immutable.AnyToValue(":o", d).(immutable.Map),
	}
	o.SetType("example/stream.PoliciesUpdated")
	return o
}

func (e *PoliciesUpdated) FromObject(o object.Object) error {
	e.Header = o.Header
	if v := o.Data.Value("stream:o"); v != nil {
		es := &crypto.Hash{}
		eo := object.FromMap(v.PrimitiveHinted().(map[string]interface{}))
		es.FromObject(eo)
		e.Stream = es
	}
	if v := o.Data.Value("parents:ao"); v != nil && v.IsList() {
		m := v.PrimitiveHinted().([]interface{})
		e.Parents = make([]*crypto.Hash, len(m))
		for i, iv := range m {
			es := &crypto.Hash{}
			eo := object.FromMap(iv.(map[string]interface{}))
			es.FromObject(eo)
			e.Parents[i] = es
		}
	}
	if v := o.Data.Value("policies:ao"); v != nil && v.IsList() {
		m := v.PrimitiveHinted().([]interface{})
		e.Policies = make([]*Policy, len(m))
		for i, iv := range m {
			es := &Policy{}
			eo := object.FromMap(iv.(map[string]interface{}))
			es.FromObject(eo)
			e.Policies[i] = es
		}
	}
	return nil
}
