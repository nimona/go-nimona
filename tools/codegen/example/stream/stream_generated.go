// Code generated by nimona.io/tools/codegen. DO NOT EDIT.

package stream

import (
	json "encoding/json"
	crypto "example/crypto"

	object "nimona.io/pkg/object"
)

type (
	Policy struct {
		Subjects   crypto.PublicKey `json:"subjects:ao"`
		Resources  []string         `json:"resources:as"`
		Conditions []string         `json:"conditions:as"`
		Action     string           `json:"action:s"`
	}
	Created struct {
		CreatedDateTime string              `json:"createdDateTime:s"`
		PartitionKeys   []string            `json:"partitionKeys:as"`
		Policies        []*Policy           `json:"@policies:ao"`
		Signature       *crypto.Signature   `json:"@signature:o"`
		Authors         []*crypto.PublicKey `json:"@authors:ao"`
	}
	PoliciesUpdated struct {
		Stream    crypto.Hash         `json:"@stream:o"`
		Parents   crypto.Hash         `json:"@parents:ao"`
		Policies  []*Policy           `json:"@policies:ao"`
		Signature *crypto.Signature   `json:"@signature:o"`
		Authors   []*crypto.PublicKey `json:"@authors:ao"`
	}
)

func (e *Created) EventName() string {
	return "Created"
}

func (e *Created) GetType() string {
	return "example/stream.Created"
}

func (e *Created) ToObject() object.Object {
	m := map[string]interface{}{
		"@ctx:s":    "example/stream.Created",
		"@domain:s": "example/stream",
		"@event:s":  "Created",
	}
	b, _ := json.Marshal(e)
	json.Unmarshal(b, &m)
	return object.Object(m)
}

func (e *Created) FromObject(o object.Object) error {
	b, _ := json.Marshal(map[string]interface{}(o))
	return json.Unmarshal(b, e)
}

func (e *PoliciesUpdated) EventName() string {
	return "PoliciesUpdated"
}

func (e *PoliciesUpdated) GetType() string {
	return "example/stream.PoliciesUpdated"
}

func (e *PoliciesUpdated) ToObject() object.Object {
	m := map[string]interface{}{
		"@ctx:s":    "example/stream.PoliciesUpdated",
		"@domain:s": "example/stream",
		"@event:s":  "PoliciesUpdated",
	}
	b, _ := json.Marshal(e)
	json.Unmarshal(b, &m)
	return object.Object(m)
}

func (e *PoliciesUpdated) FromObject(o object.Object) error {
	b, _ := json.Marshal(map[string]interface{}(o))
	return json.Unmarshal(b, e)
}
