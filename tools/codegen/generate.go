package main

import (
	"bytes"
	"strings"
	"text/template"
)

// nolint
var tpl = `// Code generated by nimona.io/tools/codegen. DO NOT EDIT.

package {{ .PackageAlias }}

import (
	"fmt"
	{{ range $alias, $pkg := .Imports }}
	{{ $alias }} "{{ $pkg }}"
	{{- end }}
)

{{- if .Structs }}
// basic structs
type (
	{{- range $struct := .Structs }}
	{{ $struct.Name }} struct {
		{{- range $member := $struct.Members }}
		{{ $member.Name }} {{ $member.Type }} ` + "`" + `json:"{{ $member.Tag }}"` + "`" + `
		{{- end }}
	}
	{{- end }}
)
{{- end }}

{{- if .Domains }}
// domain events
type (
	{{- range $domain := .Domains }}
	{{- range $event := .Events }}
	{{ $domain.Name }}{{ $event.Name }} struct {
		{{- range $member := $event.Members }}
		{{ $member.Name }} {{ $member.Type }} ` + "`" + `json:"{{ $member.Tag }}"` + "`" + `
		{{- end }}
	}
	{{- end }}
	{{- end }}
)
{{- end }}

{{- range $domain := .Domains }}
{{- range $event := .Events }}
func (e *{{ $domain.Name }}{{ $event.Name }}) ContextName() string {
	return "{{ $.Package }}/{{ $domain.Name}}"
}

func (e *{{ $domain.Name }}{{ $event.Name }}) EventName() string {
	return "{{ $event.Name }}"
}

func (e *{{ $domain.Name }}{{ $event.Name }}) GetType() string {
	return "{{ $.Package }}/{{ $domain.Name}}.{{ $event.Name }}"
}

func (e *{{ $domain.Name }}{{ $event.Name }}) ToObject() object.Object {
	m := map[string]interface{}{
		"@ctx:s": "{{ $.Package }}/{{ $domain.Name}}",
		"@event:s": "{{ $event.Name }}",
	}
	b, _ := json.Marshal(e)
	json.Unmarshal(b, &m)
	return object.Object(m)
}

func (e *{{ $domain.Name }}{{ $event.Name }}) FromObject(o object.Object) error {
	b, _ := json.Marshal(map[string]interface{}(o))
	return json.Unmarshal(b, e)
}


{{ end }}
{{- end }}

{{- range $struct := .Structs }}
func (e *{{ $struct.Name }}) ContextName() string {
	return "{{ $.Package }}"
}

func (e *{{ $struct.Name }}) GetType() string {
	return "{{ $.Package }}/{{ $struct.Name }}"
}

func (e *{{ $struct.Name }}) ToObject() object.Object {
	m := map[string]interface{}{
		"@ctx:s": "{{ $.Package }}",
		"@struct:s": "{{ $struct.Name }}",
	}
	b, _ := json.Marshal(e)
	json.Unmarshal(b, &m)
	return object.Object(m)
}

func (e *{{ $struct.Name }}) FromObject(o object.Object) error {
	b, _ := json.Marshal(map[string]interface{}(o))
	return json.Unmarshal(b, e)
}


{{ end }}
`

func Generate(doc *Document, output string) ([]byte, error) {
	t, err := template.New("tpl").Parse(tpl)
	if err != nil {
		return nil, err
	}

	// for i, s := range doc.Structs {
	// 	for k, m := range s.Members {
	// 		if m.Repeated {
	// 			doc.Structs[i].Members[k].Type = "[]" + m.Type
	// 		}
	// 	}
	// }

	doc.Imports["json"] = "encoding/json"
	doc.Imports["object"] = "nimona.io/object"

	for i, pkg := range doc.Imports {
		doc.Imports[i] = strings.Replace(pkg, "nimona.io/", "nimona.io/pkg/", 1)
	}

	out := bytes.NewBuffer([]byte{})
	if err := t.Execute(out, doc); err != nil {
		return nil, err
	}

	return out.Bytes(), nil
}
