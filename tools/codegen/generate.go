package main

import (
	"bytes"
	"strings"
	"text/template"

	"nimona.io/pkg/chore"
)

var primitives = map[string]struct {
	Hint      string
	Type      string
	IsObject  bool
	IsPrimary bool
}{
	"nimona.io/chore.Hash": {
		Hint:      "s",
		Type:      "chore.Hash",
		IsObject:  false,
		IsPrimary: true,
	},
}

// nolint
var tpl = `// Code generated by nimona.io/tools/codegen. DO NOT EDIT.

package {{ .PackageAlias }}

import (
	"fmt"
	{{ range $alias, $pkg := .Imports }}
	{{ $alias }} "{{ $pkg }}"
	{{- end }}
)

type (
	{{- range $object := .Objects }}
	{{ structName $object.Name }} struct {
		Metadata object.Metadata {{ tagMetadata }}
		{{- range $member := $object.Members }}
			{{- if $member.IsRepeated }}
				{{ $member.Name }} []{{ memberType $member true }} {{ tag $member }}
			{{- else if $member.IsPrimitive }}
				{{ $member.Name }} {{ memberType $member true }} {{ tag $member }}
			{{- else }}
				{{ $member.Name }} {{ memberType $member true}} {{ tag $member }}
			{{- end }}
		{{- end }}
	}
	{{- end }}
)

{{ range $object := .Objects }}
func (e *{{ structName $object.Name }}) Type() string {
	return "{{ $object.Name }}"
}

func (e *{{ structName $object.Name }}) MarshalObject() (*object.Object, error) {
	o, err := object.Marshal(e)
	if err != nil {
		return nil, err
	}
	o.Type = "{{ $object.Name }}"
	return o, nil
}

func (e *{{ structName $object.Name }}) UnmarshalObject(o *object.Object) error {
	return object.Unmarshal(o, e)
}

{{ end }}
`

func Generate(doc *Document, output string) ([]byte, error) {
	originalImports := map[string]string{}
	t, err := template.New("tpl").Funcs(template.FuncMap{
		"tag": func(m Member) string {
			h := m.Hint
			if m.IsRepeated {
				h = "a" + h
			}
			return "`nimona:\"" + m.Tag + ":" + h + "\"`"
		},
		"tagMetadata": func() string {
			return "`nimona:\"@metadata:m\"`"
		},
		"key": func(m Member) string {
			h := m.Hint
			if m.IsRepeated {
				h = "a" + h
			}
			return m.Tag + ":" + h
		},
		"fromPrimitive": func(m Member) string {
			h := m.Hint
			if m.IsRepeated {
				h = "a" + h
			}
			switch chore.Hint(h) {
			case chore.BoolHint:
				return "object.Bool"
			case chore.DataHint:
				return "object.Data"
			case chore.FloatHint:
				return "object.Float"
			case chore.IntHint:
				return "object.Int"
			case chore.MapHint:
				return "chore.Map"
			case chore.StringHint:
				return "chore.String"
			case chore.UintHint:
				return "object.Uint"
			case chore.BoolArrayHint:
				return "object.ToBoolArray"
			case chore.DataArrayHint:
				return "object.ToDataArray"
			case chore.FloatArrayHint:
				return "object.ToFloatArray"
			case chore.IntArrayHint:
				return "object.ToIntArray"
			case chore.MapArrayHint:
				return "object.ToMapArray"
			case chore.StringArrayHint:
				return "object.ToStringArray"
			case chore.UintArrayHint:
				return "object.ToUintArray"
			}
			panic("unknown hint in fromPrimitive " + m.Hint)
		},
		"toPrimitive": func(m Member) string {
			h := m.Hint
			if m.IsRepeated {
				h = "a" + h
			}
			switch chore.Hint(h) {
			case chore.BoolHint:
				return "bool"
			case chore.DataHint:
				return "[]byte"
			case chore.FloatHint:
				return "float64"
			case chore.IntHint:
				return "int64"
			case chore.StringHint:
				return "string"
			case chore.UintHint:
				return "uint64"
			case chore.MapHint:
				return "chore.Map"
			case chore.BoolArrayHint:
				return "object.FromBoolArray"
			case chore.DataArrayHint:
				return "object.FromDataArray"
			case chore.FloatArrayHint:
				return "object.FromFloatArray"
			case chore.IntArrayHint:
				return "object.FromIntArray"
			case chore.MapArrayHint:
				return "object.FromMapArray"
			case chore.StringArrayHint:
				return "object.FromStringArray"
			case chore.UintArrayHint:
				return "object.FromUintArray"
			}
			panic("unknown hint in toPrimitive " + m.Hint)
		},
		"primitive": func(m Member) string {
			h := m.Hint
			if m.IsRepeated {
				h = "a" + h
			}
			switch chore.Hint(h) {
			case chore.BoolHint:
				return "object.Bool"
			case chore.DataHint:
				return "object.Data"
			case chore.FloatHint:
				return "object.Float"
			case chore.IntHint:
				return "object.Int"
			case chore.StringHint:
				return "chore.String"
			case chore.MapHint:
				return "chore.Map"
			case chore.UintHint:
				return "object.Uint"
			case chore.BoolArrayHint:
				return "object.BoolArray"
			case chore.DataArrayHint:
				return "object.DataArray"
			case chore.FloatArrayHint:
				return "object.FloatArray"
			case chore.IntArrayHint:
				return "object.IntArray"
			case chore.ObjectArrayHint:
				return "object.ObjectArray"
			case chore.MapArrayHint:
				return "object.MapArray"
			case chore.StringArrayHint:
				return "object.StringArray"
			case chore.UintArrayHint:
				return "object.UintArray"
			}
			panic("unknown hint in primitive " + m.Hint)
		},
		"primitiveSingular": func(m Member) string {
			h := m.Hint
			if m.IsRepeated {
				h = "a" + h
			}
			switch chore.Hint(h) {
			case chore.BoolArrayHint:
				return "object.Bool"
			case chore.DataArrayHint:
				return "object.Data"
			case chore.FloatArrayHint:
				return "object.Float"
			case chore.IntArrayHint:
				return "object.Int"
			case chore.MapArrayHint:
				return "chore.Map"
			case chore.ObjectArrayHint:
				return ""
			case chore.StringArrayHint:
				return "chore.String"
			case chore.UintArrayHint:
				return "object.Uint"
			}
			panic("unknown hint in primitiveSingular " + m.Hint)
		},
		"marshalFunc": func(m Member) string {
			switch m.SimpleType {
			case "data":
				return "MarshalBytes"
			default:
				return "Marshal" + strings.Title(m.SimpleType)
			}
		},
		"unmarshalFunc": func(m Member) string {
			switch m.SimpleType {
			case "data":
				return "UnmarshalBytes"
			default:
				return "Unmarshal" + strings.Title(m.SimpleType)
			}
		},
		"unmarshalArg": func(m Member) string {
			h := m.Hint
			if m.IsRepeated {
				h = "a" + h
			}
			switch chore.Hint(h) {
			case chore.BoolHint:
				return "bool"
			case chore.DataHint:
				return "[]byte"
			case chore.FloatHint:
				return "float64"
			case chore.IntHint:
				return "int64"
			case chore.StringHint:
				return "string"
			case chore.UintHint:
				return "uint64"
			case chore.MapHint:
				return "chore.Map"
			case chore.BoolArrayHint:
				return "bool"
			case chore.DataArrayHint:
				return "[]byte"
			case chore.FloatArrayHint:
				return "float64"
			case chore.IntArrayHint:
				return "int64"
			case chore.MapArrayHint:
				return "chore.Map"
			case chore.ObjectArrayHint:
				return ""
			case chore.StringArrayHint:
				return "string"
			case chore.UintArrayHint:
				return "uint64"
			}
			panic("unknown primitive " + m.Hint)
		},
		"structName": func(name string) string {
			ps := strings.Split(name, "/")
			ps = strings.Split(ps[len(ps)-1], ".")
			nn := ""
			if len(ps) == 1 {
				nn = ucFirst(ps[0])
			} else if strings.ToLower(ps[len(ps)-2]) == strings.ToLower(doc.PackageAlias) {
				nn = ucFirst(ps[len(ps)-1])
			} else {
				nn = ucFirst(ps[len(ps)-2]) + ucFirst(ps[len(ps)-1])
			}
			if strings.HasPrefix(name, "stream:") {
				nn += "StreamRoot"
			}
			return nn
		},
		"memberType": func(m Member, dec bool) string {
			name := m.GoFullType
			for alias, pkg := range originalImports {
				name = strings.Replace(name, pkg, alias, 1)
			}
			ps := strings.Split(name, "/")
			name = strings.TrimPrefix(ps[len(ps)-1], doc.PackageAlias+".")
			if m.IsObject && m.IsOptional {
				if dec {
					name = "*" + name
				} else {
					name = "&" + name
				}
			}
			return name
		},
		"neq": func(a, b string) bool {
			return a != b
		},
		"hp": func(a, b string) bool {
			return strings.HasPrefix(a, b)
		},
		"hnp": func(a, b string) bool {
			return !strings.HasPrefix(a, b)
		},
	}).Parse(tpl)
	if err != nil {
		return nil, err
	}

	// instead of doing the same work for both top-level and stream objects, we
	// convert stream objects into top-level ones

	for _, s := range doc.Streams {
		for _, o := range s.Objects {
			switch {
			case o.IsRoot:
				o.Name = "stream:" + s.Name
			case o.IsEvent:
				o.Name = "event:" + s.Name + "." + o.Name
			default:
				o.Name = s.Name + "." + o.Name
			}
			doc.Objects = append(doc.Objects, o)
		}
	}

	for _, e := range doc.Objects {
		for _, mv := range e.Members {
			for pk, pv := range primitives {
				if strings.HasSuffix(mv.GoFullType, pk) {
					mv.Hint = pv.Hint
					mv.GoFullType = pv.Type
					mv.IsObject = pv.IsObject
					mv.IsPrimitive = pv.IsPrimary
					break
				}
			}
		}
	}

	doc.Imports["json"] = "encoding/json"
	doc.Imports["chore"] = "nimona.io/chore"
	doc.Imports["hint"] = "nimona.io/object/hint"

	if doc.Package != "nimona.io/object" {
		doc.Imports["object"] = "nimona.io/object"
	}
	if doc.Package != "nimona.io/stream" {
		doc.Imports["stream"] = "nimona.io/stream"
	}
	if doc.Package != "nimona.io/crypto" {
		doc.Imports["crypto"] = "nimona.io/crypto"
	}
	if doc.Package != "nimona.io/schema" {
		doc.Imports["schema"] = "nimona.io/schema"
	}

	for alias, pkg := range doc.Imports {
		originalImports[alias] = pkg
	}

	for i, pkg := range doc.Imports {
		doc.Imports[i] = strings.Replace(pkg, "nimona.io/", "nimona.io/pkg/", 1)
	}

	out := bytes.NewBuffer([]byte{})
	if err := t.Execute(out, doc); err != nil {
		return nil, err
	}

	res := out.String()
	if doc.Package == "nimona.io/object" {
		res = strings.ReplaceAll(res, "object.", "")
	}

	return []byte(res), nil
}

// lastSegment returns the last part of a namespace,
// ie lastSegment(nimona.io/stream) returns stream
func lastSegment(s string) string {
	ps := strings.Split(s, "/")
	return ps[len(ps)-1]
}
