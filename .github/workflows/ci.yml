name: CI
on:
  push:

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Check out the code
        uses: actions/checkout@v2.3.4

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2.5.2
        with:
          version: v1.32
        env:
          VERBOSE: "true"

  tidy:
    name: Tidy
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v2.1.3
        with:
          go-version: 1.16

      - name: Check out the code
        uses: actions/checkout@v2.3.4

      - name: Check if mods are tidy
        run: make check-tidy

  check-licenses:
    name: Check licenses
    runs-on: ubuntu-latest
    steps:
    - name: Install Go
      uses: actions/setup-go@v2.1.3
      with:
        go-version: 1.16

    - name: Checkout code
      uses: actions/checkout@v2.3.4

    - name: Check licenses
      run: make tools check-licenses

  test:
    name: Unit tests
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v2.1.3
        with:
          go-version: 1.16

      - name: Check out the code
        uses: actions/checkout@v2.3.4

      - name: Make test
        run: make test
        env:
          GOMAXPROCS: 4
          VERBOSE: "true"

  benchmark:
    name: Benchmarks
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/main'
    steps:
      - name: Set up Go
        uses: actions/setup-go@v2.1.3
        with:
          go-version: 1.16

      - name: Check out the code
        uses: actions/checkout@v2.3.4

      - name: Run benchmark
        run: make benchmark | tee output.txt

      - name: Announce benchmark result
        uses: rhysd/github-action-benchmark@v1
        with:
          tool: 'go'
          output-file-path: output.txt
          fail-on-alert: true
          comment-on-alert: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: false

  cover:
    name: Code coverage
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v2.1.3
        with:
          go-version: 1.16

      - name: Check out the code
        uses: actions/checkout@v2.3.4

      - name: Publish coverage
        uses: paambaati/codeclimate-action@v2.7.5
        env:
          VERBOSE: "true"
          GOMAXPROCS: 4
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
        with:
          coverageCommand: make cover
          prefix: nimona.io
          coverageLocations: |
            ${{github.workspace}}/coverage.out:gocov

  e2e:
    name: E2E tests
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v2.1.3
        with:
          go-version: 1.16

      - name: Check out the code
        uses: actions/checkout@v2.3.4

      - name: Make e2e
        run: make e2e
        env:
          VERBOSE: "true"

  benchmark-store:
    name: Store benchmarks
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Set up Go
        uses: actions/setup-go@v2.1.3
        with:
          go-version: 1.16

      - name: Check out the code
        uses: actions/checkout@v2.3.4

      - name: Run benchmark
        run: make benchmark | tee output.txt

      - name: Store benchmark result
        uses: rhysd/github-action-benchmark@v1
        with:
          tool: 'go'
          output-file-path: output.txt
          github-token: ${{ secrets.BOT_PAT }}
          comment-on-alert: true
          auto-push: true

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v2.1.3
        with:
          go-version: 1.16

      - name: Check out the code
        uses: actions/checkout@v2.3.4

      - name: Download binary tools
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-multilib g++-multilib
          curl -sfL https://install.goreleaser.com/github.com/goreleaser/goreleaser.sh | sh -s v0.158.0

      - name: Release
        run: |
          cd cmd
          ../bin/goreleaser --snapshot

  build-bindings-ios:
    name: Build IOS Bindings
    runs-on: macos-10.15
    needs:
      - lint
      - test
      - build
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: 1.16
      - name: Build
        run: make bindings-ios
      
  build-bindings-macos:
    name: Build Macos Bindings
    runs-on: macos-10.15
    needs:
      - lint
      - test
      - build
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: 1.16
      - name: Build
        run: make bindings-macos
      
  build-bindings-linux:
    name: Build Linux Bindings
    runs-on: ubuntu-20.04
    needs:
      - lint
      - test
      - build
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: 1.16
      - name: Build
        run: make bindings-linux-386 bindings-linux-amd64
      
  build-bindings-android:
    name: Build Android Bindings
    runs-on: ubuntu-20.04
    needs:
      - lint
      - test
      - build
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          java-version: 8
          distribution: zulu
      - uses: android-actions/setup-android@v2
      - uses: nttld/setup-ndk@v1.0.3
        id: setup-ndk
        with:
          ndk-version: r21d
      - uses: actions/setup-go@v2
        with:
          go-version: 1.16
      - name: Build
        run: |
          export ANDROID_NDK_HOME=${{ steps.setup-ndk.outputs.ndk-path }}
          export ANDROID_NDK_TOOLCHAIN=${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin
          make bindings-android
      
  build-bindings-windows:
    name: Build Windows Bindings
    runs-on: ubuntu-20.04
    needs:
      - lint
      - test
      - build
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: 1.16
      - name: Build
        run: make bindings-windows

  release:
    name: Relase
    runs-on: ubuntu-latest
    needs:
      - lint
      - test
      - build
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/v')
    steps:
      - name: Set up Go
        uses: actions/setup-go@v2.1.3
        with:
          go-version: 1.16

      - name: Check out the code
        uses: actions/checkout@v2.3.4

      - name: Export version from tag name
        run: |
          echo "NIMONA_VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV

      - name: Publish docker container
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_GHCR_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_GHCR_PASSWORD }}
        run: |
          docker login ghcr.io -u=$DOCKER_USERNAME -p="$DOCKER_PASSWORD"
          docker build --build-arg version=${NIMONA_VERSION} -t ghcr.io/nimona/nimona:${NIMONA_VERSION} .
          docker push ghcr.io/nimona/nimona:${NIMONA_VERSION}

      - name: Download binary tools
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-multilib g++-multilib
          curl -sfL https://install.goreleaser.com/github.com/goreleaser/goreleaser.sh | sh -s v0.158.0

      - name: Release binaries
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd cmd
          ../bin/goreleaser

  release-bindings-ios:
    name: Relase IOS Bindings
    runs-on: macos-10.15
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/v')
    needs:
      - lint
      - test
      - build
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: 1.16
      - name: Build
        run: make bindings-ios
      - name: Archive
        run: tar -czvf libnimona_ios.tar.gz -C output/binding/ios .
      - name: Export version from tag name
        run: echo "NIMONA_VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV
      - uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          asset_name: libnimona-${{ env.NIMONA_VERSION }}-ios.tar.gz
          file: libnimona_ios.tar.gz
          tag: ${{ env.NIMONA_VERSION }}
          overwrite: true

  release-bindings-macos:
    name: Relase Macos Bindings
    runs-on: macos-10.15
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/v')
    needs:
      - lint
      - test
      - build
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: 1.16
      - name: Build
        run: make bindings-macos
      - name: Archive
        run: tar -czvf libnimona_macos.tar.gz -C output/binding/macos .
      - name: Export version from tag name
        run: echo "NIMONA_VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV
      - uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          asset_name: libnimona-${{ env.NIMONA_VERSION }}-macos.tar.gz
          file: libnimona_macos.tar.gz
          tag: ${{ env.NIMONA_VERSION }}
          overwrite: true

  release-bindings-linux:
    name: Relase Linux Bindings
    runs-on: ubuntu-20.04
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/v')
    needs:
      - lint
      - test
      - build
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: 1.16
      - name: Build
        run: make bindings-linux-386 bindings-linux-amd64
      - name: Archive
        run: tar -czvf libnimona_linux.tar.gz -C output/binding/linux .
      - name: Export version from tag name
        run: echo "NIMONA_VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV
      - uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          asset_name: libnimona-${{ env.NIMONA_VERSION }}-linux.tar.gz
          file: libnimona_linux.tar.gz
          tag: ${{ env.NIMONA_VERSION }}
          overwrite: true

  release-bindings-android:
    name: Relase Android Bindings
    runs-on: ubuntu-20.04
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/v')
    needs:
      - lint
      - test
      - build
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          java-version: 8
          distribution: zulu
      - uses: android-actions/setup-android@v2
      - uses: nttld/setup-ndk@v1.0.3
        id: setup-ndk
        with:
          ndk-version: r21d
      - uses: actions/setup-go@v2
        with:
          go-version: 1.16
      - name: Build
        run: |
          export ANDROID_NDK_HOME=${{ steps.setup-ndk.outputs.ndk-path }}
          export ANDROID_NDK_TOOLCHAIN=${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin
          make bindings-android
      - name: Archive
        run: tar -czvf libnimona_android.tar.gz -C output/binding/android .
      - name: Export version from tag name
        run: echo "NIMONA_VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV
      - uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          asset_name: libnimona-${{ env.NIMONA_VERSION }}-android.tar.gz
          file: libnimona_android.tar.gz
          tag: ${{ env.NIMONA_VERSION }}
          overwrite: true

  release-bindings-windows:
    name: Relase Windows Bindings
    runs-on: ubuntu-20.04
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/v')
    needs:
      - lint
      - test
      - build
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: 1.16
      - name: Build
        run: make bindings-windows
      - name: Archive
        run: tar -czvf libnimona_windows.tar.gz -C output/binding/windows .
      - name: Export version from tag name
        run: echo "NIMONA_VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV
      - uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          asset_name: libnimona-${{ env.NIMONA_VERSION }}-windows.tar.gz
          file: libnimona_windows.tar.gz
          tag: ${{ env.NIMONA_VERSION }}
          overwrite: true

  docs:
    name: Build and deploy docs
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs:
      - lint
      - test
      - build
    steps:
    - name: Checkout
      uses: actions/checkout@v2.3.4

    - name: Build docs
      run: yarn && yarn docs:build

    - name: Deploy
      uses: peaceiris/actions-gh-pages@v3.8.0
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: .vuepress/dist
        publish_branch: gh-pages
        keep_files: true

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs:
      - release
      - release-bindings-ios
      - release-bindings-macos
      - release-bindings-linux
      - release-bindings-android
      - release-bindings-windows
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/v')
    steps:
      - uses: chrnorm/deployment-action@releases/v1
        name: Create GitHub deployment
        id: deployment
        with:
          token: "${{ github.token }}"
          environment: production

      - name: Check out the code
        uses: actions/checkout@v2.3.4

      - name: Export version from tag name
        run: |
          echo "NIMONA_VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV

      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.13.5

      - uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Deploy services
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SCW_ACCESS_KEY: ${{ secrets.SCW_ACCESS_KEY }}
          SCW_SECRET_KEY: ${{ secrets.SCW_SECRET_KEY }}
          SCW_DEFAULT_ORGANIZATION_ID: ${{ secrets.SCW_DEFAULT_ORGANIZATION_ID }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          SSH_KEY: ${{secrets.DEPLOY_PRIVATE_SSH_KEY}}
          TF_VAR_cloudflare_zone_id: ${{ secrets.TF_VAR_CLOUDFLARE_ZONE_ID }}
          TF_VAR_ansible_vault_password: ${{ secrets.TF_VAR_ANSIBLE_VAULT_PASSWORD }}
        run: |
          cd infrastructure/production
          echo "$SSH_KEY" > ssh/id_rsa
          chmod 0600 ssh/id_rsa
          terraform init
          terraform apply -auto-approve -var "nimona_version=${NIMONA_VERSION}"

      - uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          status: ${{ job.status }}
          title: "Deploy bootstrap peers"
          description: "Deploy bootstraps to production"
          nocontext: false
          noprefix: false
          username: Nimona Bot
          avatar_url: ${{ secrets.DISCORD_AVATAR_URL }}

      - name: Update deployment status (success)
        if: success()
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: "${{ github.token }}"
          state: "success"
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}

      - name: Update deployment status (failure)
        if: failure()
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: "${{ github.token }}"
          state: "failure"
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
