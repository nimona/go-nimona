// Code generated by nimona.io/go/cmd/objectify. DO NOT EDIT.

// +build !generate

package peers

import (
	"nimona.io/go/crypto"
	"nimona.io/go/encoding"
)

// ToMap returns a map compatible with f12n
func (s PeerInfoRequest) ToMap() map[string]interface{} {
	m := map[string]interface{}{
		"@ctx:s":      "/peer.request",
		"authority:s": s.AuthorityKeyHash,
		"signer:s":    s.SignerKeyHash,
	}
	if s.Protocols != nil {
		m["protocols:a<s>"] = s.Protocols
	}
	if s.ContentIDs != nil {
		m["contentIDs:a<s>"] = s.ContentIDs
	}
	if s.ContentTypes != nil {
		m["contentTypes:a<s>"] = s.ContentTypes
	}
	if s.RequesterAuthorityKey != nil {
		m["@authority:o"] = s.RequesterAuthorityKey.ToMap()
	}
	if s.RequesterSignerKey != nil {
		m["@signer:o"] = s.RequesterSignerKey.ToMap()
	}
	if s.RequestSignature != nil {
		m["@signature:o"] = s.RequestSignature.ToMap()
	}
	return m
}

// ToObject returns a f12n object
func (s PeerInfoRequest) ToObject() *encoding.Object {
	return encoding.NewObjectFromMap(s.ToMap())
}

// FromMap populates the struct from a f12n compatible map
func (s *PeerInfoRequest) FromMap(m map[string]interface{}) error {
	if v, ok := m["authority:s"].(string); ok {
		s.AuthorityKeyHash = v
	}
	if v, ok := m["signer:s"].(string); ok {
		s.SignerKeyHash = v
	}
	s.Protocols = []string{}
	if ss, ok := m["protocols:a<s>"].([]interface{}); ok {
		for _, si := range ss {
			if v, ok := si.(string); ok {
				s.Protocols = append(s.Protocols, v)
			}
		}
	}
	if v, ok := m["protocols:a<s>"].([]string); ok {
		s.Protocols = v
	}
	s.ContentIDs = []string{}
	if ss, ok := m["contentIDs:a<s>"].([]interface{}); ok {
		for _, si := range ss {
			if v, ok := si.(string); ok {
				s.ContentIDs = append(s.ContentIDs, v)
			}
		}
	}
	if v, ok := m["contentIDs:a<s>"].([]string); ok {
		s.ContentIDs = v
	}
	s.ContentTypes = []string{}
	if ss, ok := m["contentTypes:a<s>"].([]interface{}); ok {
		for _, si := range ss {
			if v, ok := si.(string); ok {
				s.ContentTypes = append(s.ContentTypes, v)
			}
		}
	}
	if v, ok := m["contentTypes:a<s>"].([]string); ok {
		s.ContentTypes = v
	}
	if v, ok := m["@authority:o"].(map[string]interface{}); ok {
		s.RequesterAuthorityKey = &crypto.Key{}
		if err := s.RequesterAuthorityKey.FromMap(v); err != nil {
			return err
		}
	} else if v, ok := m["@authority:o"].(*crypto.Key); ok {
		s.RequesterAuthorityKey = v
	}
	if v, ok := m["@authority:o"].(*crypto.Key); ok {
		s.RequesterAuthorityKey = v
	}
	if v, ok := m["@signer:o"].(map[string]interface{}); ok {
		s.RequesterSignerKey = &crypto.Key{}
		if err := s.RequesterSignerKey.FromMap(v); err != nil {
			return err
		}
	} else if v, ok := m["@signer:o"].(*crypto.Key); ok {
		s.RequesterSignerKey = v
	}
	if v, ok := m["@signer:o"].(*crypto.Key); ok {
		s.RequesterSignerKey = v
	}
	if v, ok := m["@signature:o"].(map[string]interface{}); ok {
		s.RequestSignature = &crypto.Signature{}
		if err := s.RequestSignature.FromMap(v); err != nil {
			return err
		}
	} else if v, ok := m["@signature:o"].(*crypto.Signature); ok {
		s.RequestSignature = v
	}
	if v, ok := m["@signature:o"].(*crypto.Signature); ok {
		s.RequestSignature = v
	}
	return nil
}

// FromObject populates the struct from a f12n object
func (s *PeerInfoRequest) FromObject(o *encoding.Object) error {
	return s.FromMap(o.ToMap())
}

// GetType returns the object's type
func (s PeerInfoRequest) GetType() string {
	return "/peer.request"
}
