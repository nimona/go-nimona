// Code generated by nimona.io. DO NOT EDIT.

package nimona

import (
	"github.com/vikyd/zero"

	"nimona.io/internal/tilde"
)

var _ = zero.IsZeroVal
var _ = tilde.NewScanner

func (t *NetworkAlias) DocumentMap() *DocumentMap {
	m := tilde.Map{}

	// # t.$type
	//
	// Type: string, Kind: string, TildeKind: InvalidValueKind0
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		m.Set("$type", tilde.String("core/network/alias"))
	}

	// # t.Hostname
	//
	// Type: string, Kind: string, TildeKind: String
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		m.Set("hostname", tilde.String(t.Hostname))
	}

	return NewDocumentMap(m)
}

func (t *NetworkAlias) FromDocumentMap(d *DocumentMap) error {
	*t = NetworkAlias{}

	// # t.Hostname
	//
	// Type: string, Kind: string, TildeKind: String
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		if v, err := d.m.Get("hostname"); err == nil {
			if v, ok := v.(tilde.String); ok {
				t.Hostname = string(v)
			}
		}
	}

	return nil
}
func (t *NetworkIdentity) DocumentMap() *DocumentMap {
	m := tilde.Map{}

	// # t.$type
	//
	// Type: string, Kind: string, TildeKind: InvalidValueKind0
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		m.Set("$type", tilde.String("core/network/identity"))
	}

	// # t.NetworkAlias
	//
	// Type: nimona.NetworkAlias, Kind: struct, TildeKind: Map
	// IsSlice: false, IsStruct: true, IsPointer: false
	{
		if !zero.IsZeroVal(t.NetworkAlias) {
			m.Set("networkAlias", t.NetworkAlias.DocumentMap().m)
		}
	}

	// # t.NetworkInfoRootID
	//
	// Type: nimona.DocumentID, Kind: struct, TildeKind: Map
	// IsSlice: false, IsStruct: true, IsPointer: false
	{
		if !zero.IsZeroVal(t.NetworkInfoRootID) {
			m.Set("networkInfoRootID", t.NetworkInfoRootID.DocumentMap().m)
		}
	}

	return NewDocumentMap(m)
}

func (t *NetworkIdentity) FromDocumentMap(d *DocumentMap) error {
	*t = NetworkIdentity{}

	// # t.NetworkAlias
	//
	// Type: nimona.NetworkAlias, Kind: struct, TildeKind: Map
	// IsSlice: false, IsStruct: true, IsPointer: false
	{
		if v, err := d.m.Get("networkAlias"); err == nil {
			if v, ok := v.(tilde.Map); ok {
				e := NetworkAlias{}
				d := NewDocumentMap(v)
				e.FromDocumentMap(d)
				t.NetworkAlias = e
			}
		}
	}

	// # t.NetworkInfoRootID
	//
	// Type: nimona.DocumentID, Kind: struct, TildeKind: Map
	// IsSlice: false, IsStruct: true, IsPointer: false
	{
		if v, err := d.m.Get("networkInfoRootID"); err == nil {
			if v, ok := v.(tilde.Map); ok {
				e := DocumentID{}
				d := NewDocumentMap(v)
				e.FromDocumentMap(d)
				t.NetworkInfoRootID = e
			}
		}
	}

	return nil
}
func (t *NetworkInfo) DocumentMap() *DocumentMap {
	m := tilde.Map{}

	// # t.$type
	//
	// Type: string, Kind: string, TildeKind: InvalidValueKind0
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		m.Set("$type", tilde.String("core/network/info"))
	}

	// # t.Metadata
	//
	// Type: nimona.Metadata, Kind: struct, TildeKind: Map
	// IsSlice: false, IsStruct: true, IsPointer: false
	{
		if !zero.IsZeroVal(t.Metadata) {
			m.Set("$metadata", t.Metadata.DocumentMap().m)
		}
	}

	// # t.NetworkAlias
	//
	// Type: nimona.NetworkAlias, Kind: struct, TildeKind: Map
	// IsSlice: false, IsStruct: true, IsPointer: false
	{
		m.Set("networkAlias", t.NetworkAlias.DocumentMap().m)
	}

	// # t.PeerAddresses
	//
	// Type: []nimona.PeerAddr, Kind: slice, TildeKind: List
	// IsSlice: true, IsStruct: false, IsPointer: false
	//
	// ElemType: nimona.PeerAddr, ElemKind: struct
	// IsElemSlice: false, IsElemStruct: true, IsElemPointer: false
	{
		sm := tilde.List{}
		for _, v := range t.PeerAddresses {
			if !zero.IsZeroVal(t.PeerAddresses) {
				sm = append(sm, v.DocumentMap().m)
			}
		}
		m.Set("peerAddresses", sm)
	}

	return NewDocumentMap(m)
}

func (t *NetworkInfo) FromDocumentMap(d *DocumentMap) error {
	*t = NetworkInfo{}

	// # t.Metadata
	//
	// Type: nimona.Metadata, Kind: struct, TildeKind: Map
	// IsSlice: false, IsStruct: true, IsPointer: false
	{
		if v, err := d.m.Get("$metadata"); err == nil {
			if v, ok := v.(tilde.Map); ok {
				e := Metadata{}
				d := NewDocumentMap(v)
				e.FromDocumentMap(d)
				t.Metadata = e
			}
		}
	}

	// # t.NetworkAlias
	//
	// Type: nimona.NetworkAlias, Kind: struct, TildeKind: Map
	// IsSlice: false, IsStruct: true, IsPointer: false
	{
		if v, err := d.m.Get("networkAlias"); err == nil {
			if v, ok := v.(tilde.Map); ok {
				e := NetworkAlias{}
				d := NewDocumentMap(v)
				e.FromDocumentMap(d)
				t.NetworkAlias = e
			}
		}
	}

	// # t.PeerAddresses
	//
	// Type: []nimona.PeerAddr, Kind: slice, TildeKind: List
	// IsSlice: true, IsStruct: false, IsPointer: false
	//
	// ElemType: nimona.PeerAddr, ElemKind: struct, ElemTildeKind: Map
	// IsElemSlice: false, IsElemStruct: true, IsElemPointer: false
	{
		sm := []PeerAddr{}
		if vs, err := d.m.Get("peerAddresses"); err == nil {
			if vs, ok := vs.(tilde.List); ok {
				for _, vi := range vs {
					if v, ok := vi.(tilde.Map); ok {
						e := PeerAddr{}
						d := NewDocumentMap(v)
						e.FromDocumentMap(d)
						sm = append(sm, e)
					}
				}
			}
		}
		if len(sm) > 0 {
			t.PeerAddresses = sm
		}
	}

	return nil
}
