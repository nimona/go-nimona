// Code generated by nimona.io. DO NOT EDIT.

package nimona

import (
	"github.com/vikyd/zero"

	"nimona.io/internal/tilde"
)

var _ = zero.IsZeroVal
var _ = tilde.NewScanner

func (t *NetworkAnnouncePeerRequest) DocumentMap() *DocumentMap {
	m := tilde.Map{}

	// # t.$type
	//
	// Type: string, Kind: string, TildeKind: InvalidValueKind0
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		m.Set("$type", tilde.String("core/network/announcePeer.request"))
	}

	// # t.Metadata
	//
	// Type: nimona.Metadata, Kind: struct, TildeKind: Map
	// IsSlice: false, IsStruct: true, IsPointer: false
	{
		if !zero.IsZeroVal(t.Metadata) {
			m.Set("$metadata", t.Metadata.DocumentMap().m)
		}
	}

	// # t.PeerInfo
	//
	// Type: nimona.PeerInfo, Kind: struct, TildeKind: Map
	// IsSlice: false, IsStruct: true, IsPointer: false
	{
		if !zero.IsZeroVal(t.PeerInfo) {
			m.Set("peerInfo", t.PeerInfo.DocumentMap().m)
		}
	}

	return NewDocumentMap(m)
}

func (t *NetworkAnnouncePeerRequest) FromDocumentMap(d *DocumentMap) error {
	*t = NetworkAnnouncePeerRequest{}

	// # t.Metadata
	//
	// Type: nimona.Metadata, Kind: struct, TildeKind: Map
	// IsSlice: false, IsStruct: true, IsPointer: false
	{
		if v, err := d.m.Get("$metadata"); err == nil {
			if v, ok := v.(tilde.Map); ok {
				e := Metadata{}
				d := NewDocumentMap(v)
				e.FromDocumentMap(d)
				t.Metadata = e
			}
		}
	}

	// # t.PeerInfo
	//
	// Type: nimona.PeerInfo, Kind: struct, TildeKind: Map
	// IsSlice: false, IsStruct: true, IsPointer: false
	{
		if v, err := d.m.Get("peerInfo"); err == nil {
			if v, ok := v.(tilde.Map); ok {
				e := PeerInfo{}
				d := NewDocumentMap(v)
				e.FromDocumentMap(d)
				t.PeerInfo = e
			}
		}
	}

	return nil
}
func (t *NetworkAnnouncePeerResponse) DocumentMap() *DocumentMap {
	m := tilde.Map{}

	// # t.$type
	//
	// Type: string, Kind: string, TildeKind: InvalidValueKind0
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		m.Set("$type", tilde.String("core/network/announcePeer.response"))
	}

	// # t.Error
	//
	// Type: bool, Kind: bool, TildeKind: Bool
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		if !zero.IsZeroVal(t.Error) {
			m.Set("error", tilde.Bool(t.Error))
		}
	}

	// # t.ErrorDescription
	//
	// Type: string, Kind: string, TildeKind: String
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		if !zero.IsZeroVal(t.ErrorDescription) {
			m.Set("errorDescription", tilde.String(t.ErrorDescription))
		}
	}

	// # t.Metadata
	//
	// Type: nimona.Metadata, Kind: struct, TildeKind: Map
	// IsSlice: false, IsStruct: true, IsPointer: false
	{
		if !zero.IsZeroVal(t.Metadata) {
			m.Set("$metadata", t.Metadata.DocumentMap().m)
		}
	}

	return NewDocumentMap(m)
}

func (t *NetworkAnnouncePeerResponse) FromDocumentMap(d *DocumentMap) error {
	*t = NetworkAnnouncePeerResponse{}

	// # t.Error
	//
	// Type: bool, Kind: bool, TildeKind: Bool
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		if v, err := d.m.Get("error"); err == nil {
			if v, ok := v.(tilde.Bool); ok {
				t.Error = bool(v)
			}
		}
	}

	// # t.ErrorDescription
	//
	// Type: string, Kind: string, TildeKind: String
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		if v, err := d.m.Get("errorDescription"); err == nil {
			if v, ok := v.(tilde.String); ok {
				t.ErrorDescription = string(v)
			}
		}
	}

	// # t.Metadata
	//
	// Type: nimona.Metadata, Kind: struct, TildeKind: Map
	// IsSlice: false, IsStruct: true, IsPointer: false
	{
		if v, err := d.m.Get("$metadata"); err == nil {
			if v, ok := v.(tilde.Map); ok {
				e := Metadata{}
				d := NewDocumentMap(v)
				e.FromDocumentMap(d)
				t.Metadata = e
			}
		}
	}

	return nil
}
func (t *NetworkInfoRequest) DocumentMap() *DocumentMap {
	m := tilde.Map{}

	// # t.$type
	//
	// Type: string, Kind: string, TildeKind: InvalidValueKind0
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		m.Set("$type", tilde.String("core/network/info.request"))
	}

	return NewDocumentMap(m)
}

func (t *NetworkInfoRequest) FromDocumentMap(d *DocumentMap) error {
	*t = NetworkInfoRequest{}

	return nil
}
func (t *NetworkJoinRequest) DocumentMap() *DocumentMap {
	m := tilde.Map{}

	// # t.$type
	//
	// Type: string, Kind: string, TildeKind: InvalidValueKind0
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		m.Set("$type", tilde.String("core/network/join.request"))
	}

	// # t.Metadata
	//
	// Type: nimona.Metadata, Kind: struct, TildeKind: Map
	// IsSlice: false, IsStruct: true, IsPointer: false
	{
		if !zero.IsZeroVal(t.Metadata) {
			m.Set("$metadata", t.Metadata.DocumentMap().m)
		}
	}

	// # t.RequestedHandle
	//
	// Type: string, Kind: string, TildeKind: String
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		if !zero.IsZeroVal(t.RequestedHandle) {
			m.Set("requestedHandle", tilde.String(t.RequestedHandle))
		}
	}

	return NewDocumentMap(m)
}

func (t *NetworkJoinRequest) FromDocumentMap(d *DocumentMap) error {
	*t = NetworkJoinRequest{}

	// # t.Metadata
	//
	// Type: nimona.Metadata, Kind: struct, TildeKind: Map
	// IsSlice: false, IsStruct: true, IsPointer: false
	{
		if v, err := d.m.Get("$metadata"); err == nil {
			if v, ok := v.(tilde.Map); ok {
				e := Metadata{}
				d := NewDocumentMap(v)
				e.FromDocumentMap(d)
				t.Metadata = e
			}
		}
	}

	// # t.RequestedHandle
	//
	// Type: string, Kind: string, TildeKind: String
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		if v, err := d.m.Get("requestedHandle"); err == nil {
			if v, ok := v.(tilde.String); ok {
				t.RequestedHandle = string(v)
			}
		}
	}

	return nil
}
func (t *NetworkJoinResponse) DocumentMap() *DocumentMap {
	m := tilde.Map{}

	// # t.$type
	//
	// Type: string, Kind: string, TildeKind: InvalidValueKind0
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		m.Set("$type", tilde.String("core/network/join.response"))
	}

	// # t.Accepted
	//
	// Type: bool, Kind: bool, TildeKind: Bool
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		m.Set("accepted", tilde.Bool(t.Accepted))
	}

	// # t.Error
	//
	// Type: bool, Kind: bool, TildeKind: Bool
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		if !zero.IsZeroVal(t.Error) {
			m.Set("error", tilde.Bool(t.Error))
		}
	}

	// # t.ErrorDescription
	//
	// Type: string, Kind: string, TildeKind: String
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		if !zero.IsZeroVal(t.ErrorDescription) {
			m.Set("errorDescription", tilde.String(t.ErrorDescription))
		}
	}

	// # t.Handle
	//
	// Type: string, Kind: string, TildeKind: String
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		if !zero.IsZeroVal(t.Handle) {
			m.Set("handle", tilde.String(t.Handle))
		}
	}

	return NewDocumentMap(m)
}

func (t *NetworkJoinResponse) FromDocumentMap(d *DocumentMap) error {
	*t = NetworkJoinResponse{}

	// # t.Accepted
	//
	// Type: bool, Kind: bool, TildeKind: Bool
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		if v, err := d.m.Get("accepted"); err == nil {
			if v, ok := v.(tilde.Bool); ok {
				t.Accepted = bool(v)
			}
		}
	}

	// # t.Error
	//
	// Type: bool, Kind: bool, TildeKind: Bool
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		if v, err := d.m.Get("error"); err == nil {
			if v, ok := v.(tilde.Bool); ok {
				t.Error = bool(v)
			}
		}
	}

	// # t.ErrorDescription
	//
	// Type: string, Kind: string, TildeKind: String
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		if v, err := d.m.Get("errorDescription"); err == nil {
			if v, ok := v.(tilde.String); ok {
				t.ErrorDescription = string(v)
			}
		}
	}

	// # t.Handle
	//
	// Type: string, Kind: string, TildeKind: String
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		if v, err := d.m.Get("handle"); err == nil {
			if v, ok := v.(tilde.String); ok {
				t.Handle = string(v)
			}
		}
	}

	return nil
}
func (t *NetworkLookupPeerRequest) DocumentMap() *DocumentMap {
	m := tilde.Map{}

	// # t.$type
	//
	// Type: string, Kind: string, TildeKind: InvalidValueKind0
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		m.Set("$type", tilde.String("core/network/lookupPeer.request"))
	}

	// # t.Metadata
	//
	// Type: nimona.Metadata, Kind: struct, TildeKind: Map
	// IsSlice: false, IsStruct: true, IsPointer: false
	{
		if !zero.IsZeroVal(t.Metadata) {
			m.Set("$metadata", t.Metadata.DocumentMap().m)
		}
	}

	// # t.PeerKey
	//
	// Type: nimona.PeerKey, Kind: struct, TildeKind: Map
	// IsSlice: false, IsStruct: true, IsPointer: false
	{
		if !zero.IsZeroVal(t.PeerKey) {
			m.Set("peerKey", t.PeerKey.DocumentMap().m)
		}
	}

	return NewDocumentMap(m)
}

func (t *NetworkLookupPeerRequest) FromDocumentMap(d *DocumentMap) error {
	*t = NetworkLookupPeerRequest{}

	// # t.Metadata
	//
	// Type: nimona.Metadata, Kind: struct, TildeKind: Map
	// IsSlice: false, IsStruct: true, IsPointer: false
	{
		if v, err := d.m.Get("$metadata"); err == nil {
			if v, ok := v.(tilde.Map); ok {
				e := Metadata{}
				d := NewDocumentMap(v)
				e.FromDocumentMap(d)
				t.Metadata = e
			}
		}
	}

	// # t.PeerKey
	//
	// Type: nimona.PeerKey, Kind: struct, TildeKind: Map
	// IsSlice: false, IsStruct: true, IsPointer: false
	{
		if v, err := d.m.Get("peerKey"); err == nil {
			if v, ok := v.(tilde.Map); ok {
				e := PeerKey{}
				d := NewDocumentMap(v)
				e.FromDocumentMap(d)
				t.PeerKey = e
			}
		}
	}

	return nil
}
func (t *NetworkLookupPeerResponse) DocumentMap() *DocumentMap {
	m := tilde.Map{}

	// # t.$type
	//
	// Type: string, Kind: string, TildeKind: InvalidValueKind0
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		m.Set("$type", tilde.String("core/network/lookupPeer.response"))
	}

	// # t.Error
	//
	// Type: bool, Kind: bool, TildeKind: Bool
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		if !zero.IsZeroVal(t.Error) {
			m.Set("error", tilde.Bool(t.Error))
		}
	}

	// # t.ErrorDescription
	//
	// Type: string, Kind: string, TildeKind: String
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		if !zero.IsZeroVal(t.ErrorDescription) {
			m.Set("errorDescription", tilde.String(t.ErrorDescription))
		}
	}

	// # t.Found
	//
	// Type: bool, Kind: bool, TildeKind: Bool
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		if !zero.IsZeroVal(t.Found) {
			m.Set("found", tilde.Bool(t.Found))
		}
	}

	// # t.Metadata
	//
	// Type: nimona.Metadata, Kind: struct, TildeKind: Map
	// IsSlice: false, IsStruct: true, IsPointer: false
	{
		if !zero.IsZeroVal(t.Metadata) {
			m.Set("$metadata", t.Metadata.DocumentMap().m)
		}
	}

	// # t.PeerInfo
	//
	// Type: nimona.PeerInfo, Kind: struct, TildeKind: Map
	// IsSlice: false, IsStruct: true, IsPointer: false
	{
		if !zero.IsZeroVal(t.PeerInfo) {
			m.Set("peerInfo", t.PeerInfo.DocumentMap().m)
		}
	}

	return NewDocumentMap(m)
}

func (t *NetworkLookupPeerResponse) FromDocumentMap(d *DocumentMap) error {
	*t = NetworkLookupPeerResponse{}

	// # t.Error
	//
	// Type: bool, Kind: bool, TildeKind: Bool
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		if v, err := d.m.Get("error"); err == nil {
			if v, ok := v.(tilde.Bool); ok {
				t.Error = bool(v)
			}
		}
	}

	// # t.ErrorDescription
	//
	// Type: string, Kind: string, TildeKind: String
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		if v, err := d.m.Get("errorDescription"); err == nil {
			if v, ok := v.(tilde.String); ok {
				t.ErrorDescription = string(v)
			}
		}
	}

	// # t.Found
	//
	// Type: bool, Kind: bool, TildeKind: Bool
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		if v, err := d.m.Get("found"); err == nil {
			if v, ok := v.(tilde.Bool); ok {
				t.Found = bool(v)
			}
		}
	}

	// # t.Metadata
	//
	// Type: nimona.Metadata, Kind: struct, TildeKind: Map
	// IsSlice: false, IsStruct: true, IsPointer: false
	{
		if v, err := d.m.Get("$metadata"); err == nil {
			if v, ok := v.(tilde.Map); ok {
				e := Metadata{}
				d := NewDocumentMap(v)
				e.FromDocumentMap(d)
				t.Metadata = e
			}
		}
	}

	// # t.PeerInfo
	//
	// Type: nimona.PeerInfo, Kind: struct, TildeKind: Map
	// IsSlice: false, IsStruct: true, IsPointer: false
	{
		if v, err := d.m.Get("peerInfo"); err == nil {
			if v, ok := v.(tilde.Map); ok {
				e := PeerInfo{}
				d := NewDocumentMap(v)
				e.FromDocumentMap(d)
				t.PeerInfo = e
			}
		}
	}

	return nil
}
func (t *NetworkResolveHandleRequest) DocumentMap() *DocumentMap {
	m := tilde.Map{}

	// # t.$type
	//
	// Type: string, Kind: string, TildeKind: InvalidValueKind0
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		m.Set("$type", tilde.String("core/network/resolveHandle.request"))
	}

	// # t.Handle
	//
	// Type: string, Kind: string, TildeKind: String
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		if !zero.IsZeroVal(t.Handle) {
			m.Set("handle", tilde.String(t.Handle))
		}
	}

	return NewDocumentMap(m)
}

func (t *NetworkResolveHandleRequest) FromDocumentMap(d *DocumentMap) error {
	*t = NetworkResolveHandleRequest{}

	// # t.Handle
	//
	// Type: string, Kind: string, TildeKind: String
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		if v, err := d.m.Get("handle"); err == nil {
			if v, ok := v.(tilde.String); ok {
				t.Handle = string(v)
			}
		}
	}

	return nil
}
func (t *NetworkResolveHandleResponse) DocumentMap() *DocumentMap {
	m := tilde.Map{}

	// # t.$type
	//
	// Type: string, Kind: string, TildeKind: InvalidValueKind0
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		m.Set("$type", tilde.String("core/network/resolveHandle.response"))
	}

	// # t.Error
	//
	// Type: bool, Kind: bool, TildeKind: Bool
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		if !zero.IsZeroVal(t.Error) {
			m.Set("error", tilde.Bool(t.Error))
		}
	}

	// # t.ErrorDescription
	//
	// Type: string, Kind: string, TildeKind: String
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		if !zero.IsZeroVal(t.ErrorDescription) {
			m.Set("errorDescription", tilde.String(t.ErrorDescription))
		}
	}

	// # t.Found
	//
	// Type: bool, Kind: bool, TildeKind: Bool
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		if !zero.IsZeroVal(t.Found) {
			m.Set("found", tilde.Bool(t.Found))
		}
	}

	// # t.IdentityID
	//
	// Type: nimona.Identity, Kind: struct, TildeKind: Map
	// IsSlice: false, IsStruct: true, IsPointer: false
	{
		if !zero.IsZeroVal(t.IdentityID) {
			m.Set("identityID", t.IdentityID.DocumentMap().m)
		}
	}

	// # t.PeerAddresses
	//
	// Type: []nimona.PeerAddr, Kind: slice, TildeKind: List
	// IsSlice: true, IsStruct: false, IsPointer: false
	//
	// ElemType: nimona.PeerAddr, ElemKind: struct
	// IsElemSlice: false, IsElemStruct: true, IsElemPointer: false
	{
		if !zero.IsZeroVal(t.PeerAddresses) {
			sm := tilde.List{}
			for _, v := range t.PeerAddresses {
				if !zero.IsZeroVal(t.PeerAddresses) {
					sm = append(sm, v.DocumentMap().m)
				}
			}
			m.Set("peerAddresses", sm)
		}
	}

	return NewDocumentMap(m)
}

func (t *NetworkResolveHandleResponse) FromDocumentMap(d *DocumentMap) error {
	*t = NetworkResolveHandleResponse{}

	// # t.Error
	//
	// Type: bool, Kind: bool, TildeKind: Bool
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		if v, err := d.m.Get("error"); err == nil {
			if v, ok := v.(tilde.Bool); ok {
				t.Error = bool(v)
			}
		}
	}

	// # t.ErrorDescription
	//
	// Type: string, Kind: string, TildeKind: String
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		if v, err := d.m.Get("errorDescription"); err == nil {
			if v, ok := v.(tilde.String); ok {
				t.ErrorDescription = string(v)
			}
		}
	}

	// # t.Found
	//
	// Type: bool, Kind: bool, TildeKind: Bool
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		if v, err := d.m.Get("found"); err == nil {
			if v, ok := v.(tilde.Bool); ok {
				t.Found = bool(v)
			}
		}
	}

	// # t.IdentityID
	//
	// Type: nimona.Identity, Kind: struct, TildeKind: Map
	// IsSlice: false, IsStruct: true, IsPointer: false
	{
		if v, err := d.m.Get("identityID"); err == nil {
			if v, ok := v.(tilde.Map); ok {
				e := Identity{}
				d := NewDocumentMap(v)
				e.FromDocumentMap(d)
				t.IdentityID = e
			}
		}
	}

	// # t.PeerAddresses
	//
	// Type: []nimona.PeerAddr, Kind: slice, TildeKind: List
	// IsSlice: true, IsStruct: false, IsPointer: false
	//
	// ElemType: nimona.PeerAddr, ElemKind: struct, ElemTildeKind: Map
	// IsElemSlice: false, IsElemStruct: true, IsElemPointer: false
	{
		sm := []PeerAddr{}
		if vs, err := d.m.Get("peerAddresses"); err == nil {
			if vs, ok := vs.(tilde.List); ok {
				for _, vi := range vs {
					if v, ok := vi.(tilde.Map); ok {
						e := PeerAddr{}
						d := NewDocumentMap(v)
						e.FromDocumentMap(d)
						sm = append(sm, e)
					}
				}
			}
		}
		if len(sm) > 0 {
			t.PeerAddresses = sm
		}
	}

	return nil
}
