// Code generated by MockGen. DO NOT EDIT.
// Source: streammanager.go

// Package streammanagermock is a generated GoMock package.
package streammanagermock

import (
	gomock "github.com/golang/mock/gomock"
	context "nimona.io/pkg/context"
	object "nimona.io/pkg/object"
	peer "nimona.io/pkg/peer"
	streammanager "nimona.io/pkg/streammanager"
	reflect "reflect"
)

// MockStreamManager is a mock of StreamManager interface
type MockStreamManager struct {
	ctrl     *gomock.Controller
	recorder *MockStreamManagerMockRecorder
}

// MockStreamManagerMockRecorder is the mock recorder for MockStreamManager
type MockStreamManagerMockRecorder struct {
	mock *MockStreamManager
}

// NewMockStreamManager creates a new mock instance
func NewMockStreamManager(ctrl *gomock.Controller) *MockStreamManager {
	mock := &MockStreamManager{ctrl: ctrl}
	mock.recorder = &MockStreamManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStreamManager) EXPECT() *MockStreamManagerMockRecorder {
	return m.recorder
}

// Sync mocks base method
func (m *MockStreamManager) Sync(ctx context.Context, stream object.Hash, recipient *peer.Peer) (*streammanager.Graph, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", ctx, stream, recipient)
	ret0, _ := ret[0].(*streammanager.Graph)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sync indicates an expected call of Sync
func (mr *MockStreamManagerMockRecorder) Sync(ctx, stream, recipient interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockStreamManager)(nil).Sync), ctx, stream, recipient)
}

// Put mocks base method
func (m *MockStreamManager) Put(arg0 object.Object) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put
func (mr *MockStreamManagerMockRecorder) Put(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockStreamManager)(nil).Put), arg0)
}

// Get mocks base method
func (m *MockStreamManager) Get(ctx context.Context, root object.Hash) (*streammanager.Graph, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, root)
	ret0, _ := ret[0].(*streammanager.Graph)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockStreamManagerMockRecorder) Get(ctx, root interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStreamManager)(nil).Get), ctx, root)
}
