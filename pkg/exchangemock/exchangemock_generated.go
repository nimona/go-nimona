// Code generated by MockGen. DO NOT EDIT.
// Source: exchange.go

// Package exchangemock is a generated GoMock package.
package exchangemock

import (
	gomock "github.com/golang/mock/gomock"
	context "nimona.io/pkg/context"
	exchange "nimona.io/pkg/exchange"
	object "nimona.io/pkg/object"
	peer "nimona.io/pkg/peer"
	reflect "reflect"
)

// MockExchange is a mock of Exchange interface
type MockExchange struct {
	ctrl     *gomock.Controller
	recorder *MockExchangeMockRecorder
}

// MockExchangeMockRecorder is the mock recorder for MockExchange
type MockExchangeMockRecorder struct {
	mock *MockExchange
}

// NewMockExchange creates a new mock instance
func NewMockExchange(ctrl *gomock.Controller) *MockExchange {
	mock := &MockExchange{ctrl: ctrl}
	mock.recorder = &MockExchangeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExchange) EXPECT() *MockExchangeMockRecorder {
	return m.recorder
}

// Subscribe mocks base method
func (m *MockExchange) Subscribe(filters ...exchange.EnvelopeFilter) exchange.EnvelopeSubscription {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filters {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Subscribe", varargs...)
	ret0, _ := ret[0].(exchange.EnvelopeSubscription)
	return ret0
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockExchangeMockRecorder) Subscribe(filters ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockExchange)(nil).Subscribe), filters...)
}

// Send mocks base method
func (m *MockExchange) Send(ctx context.Context, object object.Object, p *peer.Peer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, object, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockExchangeMockRecorder) Send(ctx, object, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockExchange)(nil).Send), ctx, object, p)
}
