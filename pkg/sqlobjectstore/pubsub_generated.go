// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package sqlobjectstore

import (
	"nimona.io/internal/pubsub"
	"nimona.io/pkg/object"
)

type (
	sqlStore string // nolint
	// SqlStorePubSub -
	SqlStorePubSub interface {
		Publish(object.Object)
		Subscribe(...SqlStoreFilter) SqlStoreSubscription
	}
	SqlStoreFilter func(object.Object) bool
	// SqlStoreSubscription is returned for every subscription
	SqlStoreSubscription interface {
		Next() (object.Object, error)
		Cancel()
	}
	psSqlStoreSubscription struct {
		subscription pubsub.Subscription
	}
	psSqlStore struct {
		pubsub pubsub.PubSub
	}
)

// NewSqlStore constructs and returns a new SqlStorePubSub
func NewSqlStorePubSub() SqlStorePubSub {
	return &psSqlStore{
		pubsub: pubsub.New(),
	}
}

// Cancel the subscription
func (s *psSqlStoreSubscription) Cancel() {
	s.subscription.Cancel()
}

// Next returns the an item from the queue
func (s *psSqlStoreSubscription) Next() (object.Object, error) {
	next, err := s.subscription.Next()
	if err != nil {
		return object.Object{}, err
	}
	return next.(object.Object), nil
}

// Subscribe to published events with optional filters
func (ps *psSqlStore) Subscribe(filters ...SqlStoreFilter) SqlStoreSubscription {
	// cast filters
	iFilters := make([]pubsub.Filter, len(filters))
	for i, filter := range filters {
		filter := filter
		iFilters[i] = func(v interface{}) bool {
			return filter(v.(object.Object))
		}
	}
	// create a new subscription
	sub := &psSqlStoreSubscription{
		subscription: ps.pubsub.Subscribe(iFilters...),
	}

	return sub
}

// Publish to all subscribers
func (ps *psSqlStore) Publish(v object.Object) {
	ps.pubsub.Publish(v)
}
