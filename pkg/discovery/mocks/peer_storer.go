// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "nimona.io/pkg/context"
import discovery "nimona.io/pkg/discovery"
import mock "github.com/stretchr/testify/mock"
import peer "nimona.io/pkg/peer"

// PeerStorer is an autogenerated mock type for the PeerStorer type
type PeerStorer struct {
	mock.Mock
}

// Add provides a mock function with given fields: _a0, _a1
func (_m *PeerStorer) Add(_a0 *peer.Peer, _a1 bool) {
	_m.Called(_a0, _a1)
}

// AddDiscoverer provides a mock function with given fields: _a0
func (_m *PeerStorer) AddDiscoverer(_a0 discovery.Discoverer) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(discovery.Discoverer) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Lookup provides a mock function with given fields: _a0, _a1
func (_m *PeerStorer) Lookup(_a0 context.Context, _a1 ...peer.LookupOption) ([]*peer.Peer, error) {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*peer.Peer
	if rf, ok := ret.Get(0).(func(context.Context, ...peer.LookupOption) []*peer.Peer); ok {
		r0 = rf(_a0, _a1...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*peer.Peer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...peer.LookupOption) error); ok {
		r1 = rf(_a0, _a1...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
