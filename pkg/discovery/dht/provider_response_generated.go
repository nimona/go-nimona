// Code generated by nimona.io/tools/objectify. DO NOT EDIT.

// +build !generate

package dht

import (
	"nimona.io/pkg/crypto"
	"nimona.io/pkg/net/peer"
	"nimona.io/pkg/object"
)

const (
	ProviderResponseType = "nimona.io/dht/provider.response"
)

// ToObject returns a f12n object
func (s ProviderResponse) ToObject() *object.Object {
	o := object.New()
	o.SetType(ProviderResponseType)
	if s.RequestID != "" {
		o.SetRaw("requestID", s.RequestID)
	}
	if len(s.Providers) > 0 {
		o.SetRaw("providers", s.Providers)
	}
	if len(s.ClosestPeers) > 0 {
		o.SetRaw("closestPeers", s.ClosestPeers)
	}
	if s.Signer != nil {
		o.SetRaw("@signer", s.Signer)
	}
	if s.Authority != nil {
		o.SetRaw("@authority", s.Authority)
	}
	if s.Signature != nil {
		o.SetRaw("@signature", s.Signature)
	}
	return o
}

// FromObject populates the struct from a f12n object
func (s *ProviderResponse) FromObject(o *object.Object) error {
	if v, ok := o.GetRaw("requestID").(string); ok {
		s.RequestID = v
	}
	if ss, ok := o.GetRaw("providers").([]*Provider); ok {
		s.Providers = ss
	} else if ss, ok := o.GetRaw("providers").([]interface{}); ok {
		s.Providers = []*Provider{}
		for _, si := range ss {
			if v, ok := si.(*Provider); ok {
				s.Providers = append(s.Providers, v)
			} else if v, ok := si.(*object.Object); ok {
				sProviders := &Provider{}
				if err := sProviders.FromObject(v); err != nil {
					return err
				}
				s.Providers = append(s.Providers, sProviders)
			}
		}
	}
	if ss, ok := o.GetRaw("closestPeers").([]*peer.PeerInfo); ok {
		s.ClosestPeers = ss
	} else if ss, ok := o.GetRaw("closestPeers").([]interface{}); ok {
		s.ClosestPeers = []*peer.PeerInfo{}
		for _, si := range ss {
			if v, ok := si.(*peer.PeerInfo); ok {
				s.ClosestPeers = append(s.ClosestPeers, v)
			} else if v, ok := si.(*object.Object); ok {
				sClosestPeers := &peer.PeerInfo{}
				if err := sClosestPeers.FromObject(v); err != nil {
					return err
				}
				s.ClosestPeers = append(s.ClosestPeers, sClosestPeers)
			}
		}
	}
	s.RawObject = o
	if v, ok := o.GetRaw("@signer").(*crypto.Key); ok {
		s.Signer = v
	} else if v, ok := o.GetRaw("@signer").(*object.Object); ok {
		s.Signer = &crypto.Key{}
		s.Signer.FromObject(v)
	}
	if v, ok := o.GetRaw("@authority").(*crypto.Key); ok {
		s.Authority = v
	} else if v, ok := o.GetRaw("@authority").(*object.Object); ok {
		s.Authority = &crypto.Key{}
		s.Authority.FromObject(v)
	}
	if v, ok := o.GetRaw("@signature").(*crypto.Signature); ok {
		s.Signature = v
	} else if v, ok := o.GetRaw("@signature").(*object.Object); ok {
		s.Signature = &crypto.Signature{}
		s.Signature.FromObject(v)
	}
	return nil
}

// GetType returns the object's type
func (s ProviderResponse) GetType() string {
	return ProviderResponseType
}
