// Code generated by nimona.io/tools/objectify. DO NOT EDIT.

// +build !generate

package dht

import (
	"github.com/mitchellh/mapstructure"
	"nimona.io/pkg/object"
)

const (
	PeerInfoRequestType = "nimona.io/dht/peerinfo.request"
)

// ToObject returns a f12n object
func (s PeerInfoRequest) ToObject() *object.Object {
	o := object.New()
	o.SetType(PeerInfoRequestType)
	if s.RequestID != "" {
		o.SetRaw("requestID", s.RequestID)
	}
	if s.PeerID != "" {
		o.SetRaw("peerID", s.PeerID)
	}
	return o
}

func anythingToAnythingForPeerInfoRequest(
	from interface{},
	to interface{},
) error {
	config := &mapstructure.DecoderConfig{
		Result:  to,
		TagName: "json",
	}

	decoder, err := mapstructure.NewDecoder(config)
	if err != nil {
		return err
	}

	if err := decoder.Decode(from); err != nil {
		return err
	}

	return nil
}

// FromObject populates the struct from a f12n object
func (s *PeerInfoRequest) FromObject(o *object.Object) error {
	atoa := anythingToAnythingForPeerInfoRequest
	if err := atoa(o.GetRaw("requestID"), &s.RequestID); err != nil {
		return err
	}
	if err := atoa(o.GetRaw("peerID"), &s.PeerID); err != nil {
		return err
	}

	if ao, ok := interface{}(s).(interface{ afterFromObject() }); ok {
		ao.afterFromObject()
	}

	return nil
}

// GetType returns the object's type
func (s PeerInfoRequest) GetType() string {
	return PeerInfoRequestType
}
