// Code generated by nimona.io/tools/objectify. DO NOT EDIT.

// +build !generate

package dht

import (
	"nimona.io/pkg/crypto"
	"nimona.io/pkg/object"
)

// ToMap returns a map compatible with f12n
func (s Provider) ToMap() map[string]interface{} {
	m := map[string]interface{}{
		"@ctx:s": "nimona.io/dht/provider",
	}
	if s.BlockIDs != nil {
		m["blockIDs:a<s>"] = s.BlockIDs
	}
	if s.Signer != nil {
		m["@signer:o"] = s.Signer.ToMap()
	}
	if s.Authority != nil {
		m["@authority:o"] = s.Authority.ToMap()
	}
	if s.Signature != nil {
		m["@signature:o"] = s.Signature.ToMap()
	}
	return m
}

// ToObject returns a f12n object
func (s Provider) ToObject() *object.Object {
	return object.FromMap(s.ToMap())
}

// FromMap populates the struct from a f12n compatible map
func (s *Provider) FromMap(m map[string]interface{}) error {
	s.BlockIDs = []string{}
	if ss, ok := m["blockIDs:a<s>"].([]interface{}); ok {
		for _, si := range ss {
			if v, ok := si.(string); ok {
				s.BlockIDs = append(s.BlockIDs, v)
			}
		}
	}
	if v, ok := m["blockIDs:a<s>"].([]string); ok {
		s.BlockIDs = v
	}
	s.RawObject = object.FromMap(m)
	if v, ok := m["@:o"].(*object.Object); ok {
		s.RawObject = v
	}
	if v, ok := m["@signer:o"].(map[string]interface{}); ok {
		s.Signer = &crypto.Key{}
		if err := s.Signer.FromMap(v); err != nil {
			return err
		}
	} else if v, ok := m["@signer:o"].(*crypto.Key); ok {
		s.Signer = v
	}
	if v, ok := m["@signer:o"].(*crypto.Key); ok {
		s.Signer = v
	}
	if v, ok := m["@authority:o"].(map[string]interface{}); ok {
		s.Authority = &crypto.Key{}
		if err := s.Authority.FromMap(v); err != nil {
			return err
		}
	} else if v, ok := m["@authority:o"].(*crypto.Key); ok {
		s.Authority = v
	}
	if v, ok := m["@authority:o"].(*crypto.Key); ok {
		s.Authority = v
	}
	if v, ok := m["@signature:o"].(map[string]interface{}); ok {
		s.Signature = &crypto.Signature{}
		if err := s.Signature.FromMap(v); err != nil {
			return err
		}
	} else if v, ok := m["@signature:o"].(*crypto.Signature); ok {
		s.Signature = v
	}
	if v, ok := m["@signature:o"].(*crypto.Signature); ok {
		s.Signature = v
	}
	return nil
}

// FromObject populates the struct from a f12n object
func (s *Provider) FromObject(o *object.Object) error {
	return s.FromMap(o.ToMap())
}

// GetType returns the object's type
func (s Provider) GetType() string {
	return "nimona.io/dht/provider"
}
