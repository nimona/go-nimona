// Code generated by nimona.io/tools/objectify. DO NOT EDIT.

// +build !generate

package dht

import (
	"nimona.io/pkg/crypto"
	"nimona.io/pkg/object"
)

const (
	ProviderType = "nimona.io/dht/provider"
)

// ToObject returns a f12n object
func (s Provider) ToObject() *object.Object {
	o := object.New()
	o.SetType(ProviderType)
	if len(s.ObjectIDs) > 0 {
		o.SetRaw("objectIDs", s.ObjectIDs)
	}
	if s.Signer != nil {
		o.SetRaw("@signer", s.Signer)
	}
	if s.Authority != nil {
		o.SetRaw("@authority", s.Authority)
	}
	if s.Signature != nil {
		o.SetRaw("@signature", s.Signature)
	}
	return o
}

// FromObject populates the struct from a f12n object
func (s *Provider) FromObject(o *object.Object) error {
	if ss, ok := o.GetRaw("objectIDs").([]string); ok {
		s.ObjectIDs = ss
	} else if ss, ok := o.GetRaw("objectIDs").([]interface{}); ok {
		s.ObjectIDs = []string{}
		for _, si := range ss {
			if v, ok := si.(string); ok {
				s.ObjectIDs = append(s.ObjectIDs, v)
			}
		}
	}
	s.RawObject = o
	if v, ok := o.GetRaw("@signer").(*crypto.Key); ok {
		s.Signer = v
	} else if v, ok := o.GetRaw("@signer").(*object.Object); ok {
		s.Signer = &crypto.Key{}
		s.Signer.FromObject(v)
	}
	if v, ok := o.GetRaw("@authority").(*crypto.Key); ok {
		s.Authority = v
	} else if v, ok := o.GetRaw("@authority").(*object.Object); ok {
		s.Authority = &crypto.Key{}
		s.Authority.FromObject(v)
	}
	if v, ok := o.GetRaw("@signature").(*crypto.Signature); ok {
		s.Signature = v
	} else if v, ok := o.GetRaw("@signature").(*object.Object); ok {
		s.Signature = &crypto.Signature{}
		s.Signature.FromObject(v)
	}
	return nil
}

// GetType returns the object's type
func (s Provider) GetType() string {
	return ProviderType
}
