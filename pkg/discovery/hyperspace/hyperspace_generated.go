// Code generated by nimona.io/tools/codegen. DO NOT EDIT.

package hyperspace

import (
	json "encoding/json"

	crypto "nimona.io/pkg/crypto"
	object "nimona.io/pkg/object"
)

type (
	Request struct {
		QueryContentBloom []int64             `json:"queryContentBloom:ai,omitempty"`
		Nonce             string              `json:"nonce:s,omitempty"`
		Signature         *crypto.Signature   `json:"@signature:o,omitempty"`
		Authors           []*crypto.PublicKey `json:"@authors:ao,omitempty"`
	}
	Announced struct {
		AvailableContentBloom []int64             `json:"availableContentBloom:ai,omitempty"`
		Nonce                 string              `json:"nonce:s,omitempty"`
		Signature             *crypto.Signature   `json:"@signature:o,omitempty"`
		Authors               []*crypto.PublicKey `json:"@authors:ao,omitempty"`
	}
)

func (e *Request) GetType() string {
	return "nimona.io/discovery/hyperspace.Request"
}

func (e *Request) ToObject() object.Object {
	m := map[string]interface{}{
		"@ctx:s": "nimona.io/discovery/hyperspace.Request",
	}
	b, _ := json.Marshal(e)
	json.Unmarshal(b, &m)
	return object.Object(m)
}

func (e *Request) FromObject(o object.Object) error {
	b, _ := json.Marshal(map[string]interface{}(o))
	return json.Unmarshal(b, e)
}

func (e *Announced) GetType() string {
	return "nimona.io/discovery/hyperspace.Announced"
}

func (e *Announced) ToObject() object.Object {
	m := map[string]interface{}{
		"@ctx:s": "nimona.io/discovery/hyperspace.Announced",
	}
	b, _ := json.Marshal(e)
	json.Unmarshal(b, &m)
	return object.Object(m)
}

func (e *Announced) FromObject(o object.Object) error {
	b, _ := json.Marshal(map[string]interface{}(o))
	return json.Unmarshal(b, e)
}
