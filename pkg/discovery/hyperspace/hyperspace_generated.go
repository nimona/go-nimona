// Code generated by nimona.io/tools/codegen. DO NOT EDIT.

package hyperspace

import (
	json "encoding/json"

	crypto "nimona.io/pkg/crypto"
	object "nimona.io/pkg/object"
)

type (
	Request struct {
		QueryContentBloom []int64           `json:"queryContentBloom:ai,omitempty"`
		Nonce             string            `json:"nonce:s,omitempty"`
		Signature         *crypto.Signature `json:"@signature:o,omitempty"`
		Identity          crypto.PublicKey  `json:"@identity:s,omitempty"`
	}
	Announced struct {
		AvailableContentBloom []int64           `json:"availableContentBloom:ai,omitempty"`
		Nonce                 string            `json:"nonce:s,omitempty"`
		Signature             *crypto.Signature `json:"@signature:o,omitempty"`
		Identity              crypto.PublicKey  `json:"@identity:s,omitempty"`
	}
)

func (e *Request) GetType() string {
	return "nimona.io/discovery/hyperspace.Request"
}

func (e *Request) ToObject() object.Object {
	m := map[string]interface{}{}
	m["@type:s"] = "nimona.io/discovery/hyperspace.Request"
	if len(e.QueryContentBloom) > 0 {
		m["queryContentBloom:ai"] = e.QueryContentBloom
	}
	m["nonce:s"] = e.Nonce
	if e.Signature != nil {
		m["@signature:o"] = e.Signature.ToObject().ToMap()
	}
	m["@identity:s"] = e.Identity
	return object.Object(m)
}

func (e *Request) FromObject(o object.Object) error {
	b, _ := json.Marshal(map[string]interface{}(o))
	return json.Unmarshal(b, e)
}

func (e *Announced) GetType() string {
	return "nimona.io/discovery/hyperspace.Announced"
}

func (e *Announced) ToObject() object.Object {
	m := map[string]interface{}{}
	m["@type:s"] = "nimona.io/discovery/hyperspace.Announced"
	if len(e.AvailableContentBloom) > 0 {
		m["availableContentBloom:ai"] = e.AvailableContentBloom
	}
	m["nonce:s"] = e.Nonce
	if e.Signature != nil {
		m["@signature:o"] = e.Signature.ToObject().ToMap()
	}
	m["@identity:s"] = e.Identity
	return object.Object(m)
}

func (e *Announced) FromObject(o object.Object) error {
	b, _ := json.Marshal(map[string]interface{}(o))
	return json.Unmarshal(b, e)
}
