// Code generated by nimona.io/tools/codegen. DO NOT EDIT.

package subscription

import (
	"errors"

	crypto "nimona.io/pkg/crypto"
	object "nimona.io/pkg/object"
)

type (
	Subscription struct {
		raw      object.Object
		Metadata object.Metadata
		Subjects []crypto.PublicKey
		Types    []string
		Streams  []object.Hash
		Expiry   string
	}
)

func (e Subscription) GetType() string {
	return "nimona.io/subscription.Subscription"
}

func (e Subscription) IsStreamRoot() bool {
	return false
}

func (e Subscription) GetSchema() *object.SchemaObject {
	return &object.SchemaObject{
		Properties: []*object.SchemaProperty{{
			Name:       "subjects",
			Type:       "nimona.io/crypto.PublicKey",
			Hint:       "s",
			IsRepeated: true,
			IsOptional: false,
		}, {
			Name:       "types",
			Type:       "string",
			Hint:       "s",
			IsRepeated: true,
			IsOptional: false,
		}, {
			Name:       "streams",
			Type:       "nimona.io/object.Hash",
			Hint:       "s",
			IsRepeated: true,
			IsOptional: false,
		}, {
			Name:       "expiry",
			Type:       "string",
			Hint:       "s",
			IsRepeated: false,
			IsOptional: false,
		}},
	}
}

func (e Subscription) ToObject() object.Object {
	o := object.Object{}
	o = o.SetType("nimona.io/subscription.Subscription")
	if len(e.Metadata.Stream) > 0 {
		o = o.SetStream(e.Metadata.Stream)
	}
	if len(e.Metadata.Parents) > 0 {
		o = o.SetParents(e.Metadata.Parents)
	}
	if !e.Metadata.Owner.IsEmpty() {
		o = o.SetOwner(e.Metadata.Owner)
	}
	if !e.Metadata.Signature.IsEmpty() {
		o = o.SetSignature(e.Metadata.Signature)
	}
	o = o.SetPolicy(e.Metadata.Policy)
	if len(e.Subjects) > 0 {
		v := object.List{}
		for _, iv := range e.Subjects {
			v = v.Append(object.String(iv))
		}
		o = o.Set("subjects:as", v)
	}
	if len(e.Types) > 0 {
		v := object.List{}
		for _, iv := range e.Types {
			v = v.Append(object.String(iv))
		}
		o = o.Set("types:as", v)
	}
	if len(e.Streams) > 0 {
		v := object.List{}
		for _, iv := range e.Streams {
			v = v.Append(object.String(iv))
		}
		o = o.Set("streams:as", v)
	}
	if e.Expiry != "" {
		o = o.Set("expiry:s", e.Expiry)
	}
	// if schema := e.GetSchema(); schema != nil {
	// 	m["_schema:m"] = schema.ToObject().ToMap()
	// }
	return o
}

func (e *Subscription) FromObject(o object.Object) error {
	data, ok := o.Raw().Value("data:m").(object.Map)
	if !ok {
		return errors.New("missing data")
	}
	e.raw = object.Object{}
	e.raw = e.raw.SetType(o.GetType())
	e.Metadata.Stream = o.GetStream()
	e.Metadata.Parents = o.GetParents()
	e.Metadata.Owner = o.GetOwner()
	e.Metadata.Signature = o.GetSignature()
	e.Metadata.Policy = o.GetPolicy()
	if v := data.Value("subjects:as"); v != nil && v.IsList() {
		m := v.PrimitiveHinted().([]string)
		e.Subjects = make([]crypto.PublicKey, len(m))
		for i, iv := range m {
			e.Subjects[i] = crypto.PublicKey(iv)
		}
	}
	if v := data.Value("types:as"); v != nil && v.IsList() {
		m := v.PrimitiveHinted().([]string)
		e.Types = make([]string, len(m))
		for i, iv := range m {
			e.Types[i] = string(iv)
		}
	}
	if v := data.Value("streams:as"); v != nil && v.IsList() {
		m := v.PrimitiveHinted().([]string)
		e.Streams = make([]object.Hash, len(m))
		for i, iv := range m {
			e.Streams[i] = object.Hash(iv)
		}
	}
	if v := data.Value("expiry:s"); v != nil {
		e.Expiry = string(v.PrimitiveHinted().(string))
	}
	return nil
}
