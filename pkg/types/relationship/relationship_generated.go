// Code generated by nimona.io/tools/codegen. DO NOT EDIT.

package relationship

import (
	object "nimona.io/pkg/object"
	time "nimona.io/pkg/time"
	profile "nimona.io/pkg/types/profile"
)

type (
	Relationship struct {
		Metadata object.Metadata
		Alias    string
		Profile  profile.Profile
		Created  time.DateTime
	}
)

func (e *Relationship) Type() string {
	return "Relationship"
}

func (e *Relationship) MarshalMap() (object.Map, error) {
	return e.ToObject().Map(), nil
}

func (e *Relationship) MarshalObject() (*object.Object, error) {
	return e.ToObject(), nil
}

func (e Relationship) ToObject() *object.Object {
	r := &object.Object{
		Type:     "Relationship",
		Metadata: e.Metadata,
		Data:     object.Map{},
	}
	r.Data["alias"] = object.String(e.Alias)
	if v, err := e.Profile.MarshalObject(); err == nil {
		r.Data["profile"] = (v)
	}
	if v, err := e.Created.MarshalString(); err == nil {
		r.Data["created"] = object.String(v)
	}
	return r
}

func (e *Relationship) UnmarshalMap(m object.Map) error {
	return e.FromObject(object.FromMap(m))
}

func (e *Relationship) UnmarshalObject(o *object.Object) error {
	return e.FromObject(o)
}

func (e *Relationship) FromObject(o *object.Object) error {
	e.Metadata = o.Metadata
	if v, ok := o.Data["alias"]; ok {
		if t, ok := v.(object.String); ok {
			e.Alias = string(t)
		}
	}
	if v, ok := o.Data["profile"]; ok {
		if ev, ok := v.(*object.Object); ok {
			es := profile.Profile{}
			if err := es.UnmarshalObject((ev)); err == nil {
				e.Profile = es
			}
		}
	}
	if v, ok := o.Data["created"]; ok {
		if ev, ok := v.(object.String); ok {
			es := time.DateTime{}
			if err := es.UnmarshalString(string(ev)); err == nil {
				e.Created = es
			}
		}
	}
	return nil
}
