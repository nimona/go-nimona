// Code generated by nimona.io/tools/codegen. DO NOT EDIT.

package profile

import (
	object "nimona.io/pkg/object"
	time "nimona.io/pkg/time"
)

type (
	DisplayPicture struct {
		Metadata object.Metadata
		W100px   object.CID
		W1000px  object.CID
		WAny     object.CID
	}
	Profile struct {
		Metadata       object.Metadata
		Nickname       string
		GivenName      string
		MiddleName     string
		FamilyName     string
		DisplayPicture DisplayPicture
		Created        time.DateTime
	}
)

func (e *DisplayPicture) Type() string {
	return "DisplayPicture"
}

func (e *DisplayPicture) MarshalMap() (object.Map, error) {
	return e.ToObject().Map(), nil
}

func (e *DisplayPicture) MarshalObject() (*object.Object, error) {
	return e.ToObject(), nil
}

func (e DisplayPicture) ToObject() *object.Object {
	r := &object.Object{
		Type:     "DisplayPicture",
		Metadata: e.Metadata,
		Data:     object.Map{},
	}
	r.Data["w100px"] = object.String(e.W100px)
	r.Data["w1000px"] = object.String(e.W1000px)
	r.Data["wAny"] = object.String(e.WAny)
	return r
}

func (e *DisplayPicture) UnmarshalMap(m object.Map) error {
	return e.FromObject(object.FromMap(m))
}

func (e *DisplayPicture) UnmarshalObject(o *object.Object) error {
	return e.FromObject(o)
}

func (e *DisplayPicture) FromObject(o *object.Object) error {
	e.Metadata = o.Metadata
	if v, ok := o.Data["w100px"]; ok {
		if t, ok := v.(object.String); ok {
			e.W100px = object.CID(t)
		}
	}
	if v, ok := o.Data["w1000px"]; ok {
		if t, ok := v.(object.String); ok {
			e.W1000px = object.CID(t)
		}
	}
	if v, ok := o.Data["wAny"]; ok {
		if t, ok := v.(object.String); ok {
			e.WAny = object.CID(t)
		}
	}
	return nil
}

func (e *Profile) Type() string {
	return "Profile"
}

func (e *Profile) MarshalMap() (object.Map, error) {
	return e.ToObject().Map(), nil
}

func (e *Profile) MarshalObject() (*object.Object, error) {
	return e.ToObject(), nil
}

func (e Profile) ToObject() *object.Object {
	r := &object.Object{
		Type:     "Profile",
		Metadata: e.Metadata,
		Data:     object.Map{},
	}
	r.Data["nickname"] = object.String(e.Nickname)
	r.Data["givenName"] = object.String(e.GivenName)
	r.Data["middleName"] = object.String(e.MiddleName)
	r.Data["familyName"] = object.String(e.FamilyName)
	if v, err := e.DisplayPicture.MarshalObject(); err == nil {
		r.Data["displayPicture"] = (v)
	}
	if v, err := e.Created.MarshalString(); err == nil {
		r.Data["created"] = object.String(v)
	}
	return r
}

func (e *Profile) UnmarshalMap(m object.Map) error {
	return e.FromObject(object.FromMap(m))
}

func (e *Profile) UnmarshalObject(o *object.Object) error {
	return e.FromObject(o)
}

func (e *Profile) FromObject(o *object.Object) error {
	e.Metadata = o.Metadata
	if v, ok := o.Data["nickname"]; ok {
		if t, ok := v.(object.String); ok {
			e.Nickname = string(t)
		}
	}
	if v, ok := o.Data["givenName"]; ok {
		if t, ok := v.(object.String); ok {
			e.GivenName = string(t)
		}
	}
	if v, ok := o.Data["middleName"]; ok {
		if t, ok := v.(object.String); ok {
			e.MiddleName = string(t)
		}
	}
	if v, ok := o.Data["familyName"]; ok {
		if t, ok := v.(object.String); ok {
			e.FamilyName = string(t)
		}
	}
	if v, ok := o.Data["displayPicture"]; ok {
		if ev, ok := v.(*object.Object); ok {
			es := DisplayPicture{}
			if err := es.UnmarshalObject((ev)); err == nil {
				e.DisplayPicture = es
			}
		}
	}
	if v, ok := o.Data["created"]; ok {
		if ev, ok := v.(object.String); ok {
			es := time.DateTime{}
			if err := es.UnmarshalString(string(ev)); err == nil {
				e.Created = es
			}
		}
	}
	return nil
}
