// Code generated by MockGen. DO NOT EDIT.
// Source: keychain.go

// Package keychainmock is a generated GoMock package.
package keychainmock

import (
	gomock "github.com/golang/mock/gomock"
	crypto "nimona.io/pkg/crypto"
	keychain "nimona.io/pkg/keychain"
	peer "nimona.io/pkg/peer"
	reflect "reflect"
)

// MockKeychain is a mock of Keychain interface
type MockKeychain struct {
	ctrl     *gomock.Controller
	recorder *MockKeychainMockRecorder
}

// MockKeychainMockRecorder is the mock recorder for MockKeychain
type MockKeychainMockRecorder struct {
	mock *MockKeychain
}

// NewMockKeychain creates a new mock instance
func NewMockKeychain(ctrl *gomock.Controller) *MockKeychain {
	mock := &MockKeychain{ctrl: ctrl}
	mock.recorder = &MockKeychainMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKeychain) EXPECT() *MockKeychainMockRecorder {
	return m.recorder
}

// Put mocks base method
func (m *MockKeychain) Put(arg0 keychain.KeyType, arg1 crypto.PrivateKey) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Put", arg0, arg1)
}

// Put indicates an expected call of Put
func (mr *MockKeychainMockRecorder) Put(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockKeychain)(nil).Put), arg0, arg1)
}

// List mocks base method
func (m *MockKeychain) List(arg0 keychain.KeyType) []crypto.PrivateKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]crypto.PrivateKey)
	return ret0
}

// List indicates an expected call of List
func (mr *MockKeychainMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockKeychain)(nil).List), arg0)
}

// ListPublicKeys mocks base method
func (m *MockKeychain) ListPublicKeys(arg0 keychain.KeyType) []crypto.PublicKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPublicKeys", arg0)
	ret0, _ := ret[0].([]crypto.PublicKey)
	return ret0
}

// ListPublicKeys indicates an expected call of ListPublicKeys
func (mr *MockKeychainMockRecorder) ListPublicKeys(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPublicKeys", reflect.TypeOf((*MockKeychain)(nil).ListPublicKeys), arg0)
}

// GetPrimaryPeerKey mocks base method
func (m *MockKeychain) GetPrimaryPeerKey() crypto.PrivateKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrimaryPeerKey")
	ret0, _ := ret[0].(crypto.PrivateKey)
	return ret0
}

// GetPrimaryPeerKey indicates an expected call of GetPrimaryPeerKey
func (mr *MockKeychainMockRecorder) GetPrimaryPeerKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrimaryPeerKey", reflect.TypeOf((*MockKeychain)(nil).GetPrimaryPeerKey))
}

// PutCertificate mocks base method
func (m *MockKeychain) PutCertificate(arg0 *peer.Certificate) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PutCertificate", arg0)
}

// PutCertificate indicates an expected call of PutCertificate
func (mr *MockKeychainMockRecorder) PutCertificate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutCertificate", reflect.TypeOf((*MockKeychain)(nil).PutCertificate), arg0)
}

// GetCertificates mocks base method
func (m *MockKeychain) GetCertificates(arg0 crypto.PublicKey) []*peer.Certificate {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificates", arg0)
	ret0, _ := ret[0].([]*peer.Certificate)
	return ret0
}

// GetCertificates indicates an expected call of GetCertificates
func (mr *MockKeychainMockRecorder) GetCertificates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificates", reflect.TypeOf((*MockKeychain)(nil).GetCertificates), arg0)
}
