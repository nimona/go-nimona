// Code generated by MockGen. DO NOT EDIT.
// Source: localpeer.go

// Package localpeermock is a generated GoMock package.
package localpeermock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	crypto "nimona.io/pkg/crypto"
	localpeer "nimona.io/pkg/localpeer"
	object "nimona.io/pkg/object"
)

// MockLocalPeer is a mock of LocalPeer interface.
type MockLocalPeer struct {
	ctrl     *gomock.Controller
	recorder *MockLocalPeerMockRecorder
}

// MockLocalPeerMockRecorder is the mock recorder for MockLocalPeer.
type MockLocalPeerMockRecorder struct {
	mock *MockLocalPeer
}

// NewMockLocalPeer creates a new mock instance.
func NewMockLocalPeer(ctrl *gomock.Controller) *MockLocalPeer {
	mock := &MockLocalPeer{ctrl: ctrl}
	mock.recorder = &MockLocalPeerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocalPeer) EXPECT() *MockLocalPeerMockRecorder {
	return m.recorder
}

// ForgetPeerCertificate mocks base method.
func (m *MockLocalPeer) ForgetPeerCertificate() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ForgetPeerCertificate")
}

// ForgetPeerCertificate indicates an expected call of ForgetPeerCertificate.
func (mr *MockLocalPeerMockRecorder) ForgetPeerCertificate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForgetPeerCertificate", reflect.TypeOf((*MockLocalPeer)(nil).ForgetPeerCertificate))
}

// GetCIDs mocks base method.
func (m *MockLocalPeer) GetCIDs() []object.CID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCIDs")
	ret0, _ := ret[0].([]object.CID)
	return ret0
}

// GetCIDs indicates an expected call of GetCIDs.
func (mr *MockLocalPeerMockRecorder) GetCIDs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCIDs", reflect.TypeOf((*MockLocalPeer)(nil).GetCIDs))
}

// GetContentTypes mocks base method.
func (m *MockLocalPeer) GetContentTypes() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContentTypes")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetContentTypes indicates an expected call of GetContentTypes.
func (mr *MockLocalPeerMockRecorder) GetContentTypes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContentTypes", reflect.TypeOf((*MockLocalPeer)(nil).GetContentTypes))
}

// GetIdentityPublicKey mocks base method.
func (m *MockLocalPeer) GetIdentityPublicKey() crypto.PublicKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentityPublicKey")
	ret0, _ := ret[0].(crypto.PublicKey)
	return ret0
}

// GetIdentityPublicKey indicates an expected call of GetIdentityPublicKey.
func (mr *MockLocalPeerMockRecorder) GetIdentityPublicKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentityPublicKey", reflect.TypeOf((*MockLocalPeer)(nil).GetIdentityPublicKey))
}

// GetPeerCertificate mocks base method.
func (m *MockLocalPeer) GetPeerCertificate() *object.CertificateResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeerCertificate")
	ret0, _ := ret[0].(*object.CertificateResponse)
	return ret0
}

// GetPeerCertificate indicates an expected call of GetPeerCertificate.
func (mr *MockLocalPeerMockRecorder) GetPeerCertificate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeerCertificate", reflect.TypeOf((*MockLocalPeer)(nil).GetPeerCertificate))
}

// GetPeerKey mocks base method.
func (m *MockLocalPeer) GetPeerKey() crypto.PrivateKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeerKey")
	ret0, _ := ret[0].(crypto.PrivateKey)
	return ret0
}

// GetPeerKey indicates an expected call of GetPeerKey.
func (mr *MockLocalPeerMockRecorder) GetPeerKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeerKey", reflect.TypeOf((*MockLocalPeer)(nil).GetPeerKey))
}

// ListenForUpdates mocks base method.
func (m *MockLocalPeer) ListenForUpdates() (<-chan localpeer.UpdateEvent, func()) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenForUpdates")
	ret0, _ := ret[0].(<-chan localpeer.UpdateEvent)
	ret1, _ := ret[1].(func())
	return ret0, ret1
}

// ListenForUpdates indicates an expected call of ListenForUpdates.
func (mr *MockLocalPeerMockRecorder) ListenForUpdates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenForUpdates", reflect.TypeOf((*MockLocalPeer)(nil).ListenForUpdates))
}

// RegisterCIDs mocks base method.
func (m *MockLocalPeer) RegisterCIDs(arg0 ...object.CID) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "RegisterCIDs", varargs...)
}

// RegisterCIDs indicates an expected call of RegisterCIDs.
func (mr *MockLocalPeerMockRecorder) RegisterCIDs(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCIDs", reflect.TypeOf((*MockLocalPeer)(nil).RegisterCIDs), arg0...)
}

// RegisterContentTypes mocks base method.
func (m *MockLocalPeer) RegisterContentTypes(arg0 ...string) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "RegisterContentTypes", varargs...)
}

// RegisterContentTypes indicates an expected call of RegisterContentTypes.
func (mr *MockLocalPeerMockRecorder) RegisterContentTypes(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterContentTypes", reflect.TypeOf((*MockLocalPeer)(nil).RegisterContentTypes), arg0...)
}

// SetPeerCertificate mocks base method.
func (m *MockLocalPeer) SetPeerCertificate(arg0 *object.CertificateResponse) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPeerCertificate", arg0)
}

// SetPeerCertificate indicates an expected call of SetPeerCertificate.
func (mr *MockLocalPeerMockRecorder) SetPeerCertificate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPeerCertificate", reflect.TypeOf((*MockLocalPeer)(nil).SetPeerCertificate), arg0)
}

// SetPeerKey mocks base method.
func (m *MockLocalPeer) SetPeerKey(arg0 crypto.PrivateKey) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPeerKey", arg0)
}

// SetPeerKey indicates an expected call of SetPeerKey.
func (mr *MockLocalPeerMockRecorder) SetPeerKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPeerKey", reflect.TypeOf((*MockLocalPeer)(nil).SetPeerKey), arg0)
}
