// Code generated by MockGen. DO NOT EDIT.
// Source: localpeer.go

// Package localpeermock is a generated GoMock package.
package localpeermock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	crypto "nimona.io/pkg/crypto"
	localpeer "nimona.io/pkg/localpeer"
)

// MockLocalPeer is a mock of LocalPeer interface.
type MockLocalPeer struct {
	ctrl     *gomock.Controller
	recorder *MockLocalPeerMockRecorder
}

// MockLocalPeerMockRecorder is the mock recorder for MockLocalPeer.
type MockLocalPeerMockRecorder struct {
	mock *MockLocalPeer
}

// NewMockLocalPeer creates a new mock instance.
func NewMockLocalPeer(ctrl *gomock.Controller) *MockLocalPeer {
	mock := &MockLocalPeer{ctrl: ctrl}
	mock.recorder = &MockLocalPeerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocalPeer) EXPECT() *MockLocalPeerMockRecorder {
	return m.recorder
}

// GetPeerKey mocks base method.
func (m *MockLocalPeer) GetPeerKey() crypto.PrivateKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeerKey")
	ret0, _ := ret[0].(crypto.PrivateKey)
	return ret0
}

// GetPeerKey indicates an expected call of GetPeerKey.
func (mr *MockLocalPeerMockRecorder) GetPeerKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeerKey", reflect.TypeOf((*MockLocalPeer)(nil).GetPeerKey))
}

// ListenForUpdates mocks base method.
func (m *MockLocalPeer) ListenForUpdates() (<-chan localpeer.UpdateEvent, func()) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenForUpdates")
	ret0, _ := ret[0].(<-chan localpeer.UpdateEvent)
	ret1, _ := ret[1].(func())
	return ret0, ret1
}

// ListenForUpdates indicates an expected call of ListenForUpdates.
func (mr *MockLocalPeerMockRecorder) ListenForUpdates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenForUpdates", reflect.TypeOf((*MockLocalPeer)(nil).ListenForUpdates))
}

// SetPeerKey mocks base method.
func (m *MockLocalPeer) SetPeerKey(arg0 crypto.PrivateKey) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPeerKey", arg0)
}

// SetPeerKey indicates an expected call of SetPeerKey.
func (mr *MockLocalPeerMockRecorder) SetPeerKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPeerKey", reflect.TypeOf((*MockLocalPeer)(nil).SetPeerKey), arg0)
}
