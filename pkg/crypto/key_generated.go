// Code generated by nimona.io/tools/objectify. DO NOT EDIT.

// +build !generate

package crypto

import (
	"nimona.io/pkg/object"
)

// ToMap returns a map compatible with f12n
func (s Key) ToMap() map[string]interface{} {
	m := map[string]interface{}{
		"@ctx:s":    "/key",
		"alg:s":     s.Algorithm,
		"kid:s":     s.KeyID,
		"kty:s":     s.KeyType,
		"use:s":     s.KeyUsage,
		"key_ops:s": s.KeyOps,
		"x5c:s":     s.X509CertChain,
		"x5t:s":     s.X509CertThumbprint,
		"x5tS256:s": s.X509CertThumbprintS256,
		"x5u:s":     s.X509URL,
		"crv:s":     s.Curve,
	}
	if s.X != nil {
		m["x:d"] = s.X
	}
	if s.Y != nil {
		m["y:d"] = s.Y
	}
	if s.D != nil {
		m["d:d"] = s.D
	}
	return m
}

// ToObject returns a f12n object
func (s Key) ToObject() *object.Object {
	return object.NewObjectFromMap(s.ToMap())
}

// FromMap populates the struct from a f12n compatible map
func (s *Key) FromMap(m map[string]interface{}) error {
	if v, ok := m["alg:s"].(string); ok {
		s.Algorithm = v
	}
	if v, ok := m["kid:s"].(string); ok {
		s.KeyID = v
	}
	if v, ok := m["kty:s"].(string); ok {
		s.KeyType = v
	}
	if v, ok := m["use:s"].(string); ok {
		s.KeyUsage = v
	}
	if v, ok := m["key_ops:s"].(string); ok {
		s.KeyOps = v
	}
	if v, ok := m["x5c:s"].(string); ok {
		s.X509CertChain = v
	}
	if v, ok := m["x5t:s"].(string); ok {
		s.X509CertThumbprint = v
	}
	if v, ok := m["x5tS256:s"].(string); ok {
		s.X509CertThumbprintS256 = v
	}
	if v, ok := m["x5u:s"].(string); ok {
		s.X509URL = v
	}
	if v, ok := m["crv:s"].(string); ok {
		s.Curve = v
	}
	s.X = []byte{}
	if ss, ok := m["x:d"].([]interface{}); ok {
		for _, si := range ss {
			if v, ok := si.(byte); ok {
				s.X = append(s.X, v)
			}
		}
	}
	if v, ok := m["x:d"].([]byte); ok {
		s.X = v
	}
	s.Y = []byte{}
	if ss, ok := m["y:d"].([]interface{}); ok {
		for _, si := range ss {
			if v, ok := si.(byte); ok {
				s.Y = append(s.Y, v)
			}
		}
	}
	if v, ok := m["y:d"].([]byte); ok {
		s.Y = v
	}
	s.D = []byte{}
	if ss, ok := m["d:d"].([]interface{}); ok {
		for _, si := range ss {
			if v, ok := si.(byte); ok {
				s.D = append(s.D, v)
			}
		}
	}
	if v, ok := m["d:d"].([]byte); ok {
		s.D = v
	}
	return nil
}

// FromObject populates the struct from a f12n object
func (s *Key) FromObject(o *object.Object) error {
	return s.FromMap(o.ToMap())
}

// GetType returns the object's type
func (s Key) GetType() string {
	return "/key"
}
