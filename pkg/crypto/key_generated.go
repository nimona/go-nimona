// Code generated by nimona.io/tools/objectify. DO NOT EDIT.

// +build !generate

package crypto

import (
	"github.com/mitchellh/mapstructure"
	"nimona.io/pkg/object"
)

const (
	KeyType = "/key"
)

// ToObject returns a f12n object
func (s Key) ToObject() *object.Object {
	o := object.New()
	o.SetType(KeyType)
	if s.Algorithm != "" {
		o.SetRaw("alg", s.Algorithm)
	}
	if s.KeyID != "" {
		o.SetRaw("kid", s.KeyID)
	}
	if s.KeyType != "" {
		o.SetRaw("kty", s.KeyType)
	}
	if s.KeyUsage != "" {
		o.SetRaw("use", s.KeyUsage)
	}
	if s.KeyOps != "" {
		o.SetRaw("key_ops", s.KeyOps)
	}
	if s.X509CertChain != "" {
		o.SetRaw("x5c", s.X509CertChain)
	}
	if s.X509CertThumbprint != "" {
		o.SetRaw("x5t", s.X509CertThumbprint)
	}
	if s.X509CertThumbprintS256 != "" {
		o.SetRaw("x5tS256", s.X509CertThumbprintS256)
	}
	if s.X509URL != "" {
		o.SetRaw("x5u", s.X509URL)
	}
	if s.Curve != "" {
		o.SetRaw("crv", s.Curve)
	}
	if len(s.X) > 0 {
		o.SetRaw("x", s.X)
	}
	if len(s.Y) > 0 {
		o.SetRaw("y", s.Y)
	}
	if len(s.D) > 0 {
		o.SetRaw("d", s.D)
	}
	return o
}

func anythingToAnythingForKey(
	from interface{},
	to interface{},
) error {
	config := &mapstructure.DecoderConfig{
		Result:  to,
		TagName: "json",
	}

	decoder, err := mapstructure.NewDecoder(config)
	if err != nil {
		return err
	}

	if err := decoder.Decode(from); err != nil {
		return err
	}

	return nil
}

// FromObject populates the struct from a f12n object
func (s *Key) FromObject(o *object.Object) error {
	atoa := anythingToAnythingForKey
	if err := atoa(o.GetRaw("alg"), &s.Algorithm); err != nil {
		return err
	}
	if err := atoa(o.GetRaw("kid"), &s.KeyID); err != nil {
		return err
	}
	if err := atoa(o.GetRaw("kty"), &s.KeyType); err != nil {
		return err
	}
	if err := atoa(o.GetRaw("use"), &s.KeyUsage); err != nil {
		return err
	}
	if err := atoa(o.GetRaw("key_ops"), &s.KeyOps); err != nil {
		return err
	}
	if err := atoa(o.GetRaw("x5c"), &s.X509CertChain); err != nil {
		return err
	}
	if err := atoa(o.GetRaw("x5t"), &s.X509CertThumbprint); err != nil {
		return err
	}
	if err := atoa(o.GetRaw("x5tS256"), &s.X509CertThumbprintS256); err != nil {
		return err
	}
	if err := atoa(o.GetRaw("x5u"), &s.X509URL); err != nil {
		return err
	}
	if err := atoa(o.GetRaw("crv"), &s.Curve); err != nil {
		return err
	}
	if err := atoa(o.GetRaw("x"), &s.X); err != nil {
		return err
	}
	if err := atoa(o.GetRaw("y"), &s.Y); err != nil {
		return err
	}
	if err := atoa(o.GetRaw("d"), &s.D); err != nil {
		return err
	}

	return nil
}

// GetType returns the object's type
func (s Key) GetType() string {
	return KeyType
}
