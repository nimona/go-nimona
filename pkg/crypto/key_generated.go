// Code generated by nimona.io/tools/objectify. DO NOT EDIT.

// +build !generate

package crypto

import (
	"nimona.io/pkg/object"
)

const (
	KeyType = "/key"
)

// ToObject returns a f12n object
func (s Key) ToObject() *object.Object {
	o := object.New()
	o.SetType(KeyType)
	if s.Algorithm != "" {
		o.SetRaw("alg", s.Algorithm)
	}
	if s.KeyID != "" {
		o.SetRaw("kid", s.KeyID)
	}
	if s.KeyType != "" {
		o.SetRaw("kty", s.KeyType)
	}
	if s.KeyUsage != "" {
		o.SetRaw("use", s.KeyUsage)
	}
	if s.KeyOps != "" {
		o.SetRaw("key_ops", s.KeyOps)
	}
	if s.X509CertChain != "" {
		o.SetRaw("x5c", s.X509CertChain)
	}
	if s.X509CertThumbprint != "" {
		o.SetRaw("x5t", s.X509CertThumbprint)
	}
	if s.X509CertThumbprintS256 != "" {
		o.SetRaw("x5tS256", s.X509CertThumbprintS256)
	}
	if s.X509URL != "" {
		o.SetRaw("x5u", s.X509URL)
	}
	if s.Curve != "" {
		o.SetRaw("crv", s.Curve)
	}
	if len(s.X) > 0 {
		o.SetRaw("x", s.X)
	}
	if len(s.Y) > 0 {
		o.SetRaw("y", s.Y)
	}
	if len(s.D) > 0 {
		o.SetRaw("d", s.D)
	}
	return o
}

// FromObject populates the struct from a f12n object
func (s *Key) FromObject(o *object.Object) error {
	if v, ok := o.GetRaw("alg").(string); ok {
		s.Algorithm = v
	}
	if v, ok := o.GetRaw("kid").(string); ok {
		s.KeyID = v
	}
	if v, ok := o.GetRaw("kty").(string); ok {
		s.KeyType = v
	}
	if v, ok := o.GetRaw("use").(string); ok {
		s.KeyUsage = v
	}
	if v, ok := o.GetRaw("key_ops").(string); ok {
		s.KeyOps = v
	}
	if v, ok := o.GetRaw("x5c").(string); ok {
		s.X509CertChain = v
	}
	if v, ok := o.GetRaw("x5t").(string); ok {
		s.X509CertThumbprint = v
	}
	if v, ok := o.GetRaw("x5tS256").(string); ok {
		s.X509CertThumbprintS256 = v
	}
	if v, ok := o.GetRaw("x5u").(string); ok {
		s.X509URL = v
	}
	if v, ok := o.GetRaw("crv").(string); ok {
		s.Curve = v
	}
	if ss, ok := o.GetRaw("x").([]byte); ok {
		s.X = ss
	} else if ss, ok := o.GetRaw("x").([]interface{}); ok {
		s.X = []byte{}
		for _, si := range ss {
			if v, ok := si.(byte); ok {
				s.X = append(s.X, v)
			}
		}
	}
	if ss, ok := o.GetRaw("y").([]byte); ok {
		s.Y = ss
	} else if ss, ok := o.GetRaw("y").([]interface{}); ok {
		s.Y = []byte{}
		for _, si := range ss {
			if v, ok := si.(byte); ok {
				s.Y = append(s.Y, v)
			}
		}
	}
	if ss, ok := o.GetRaw("d").([]byte); ok {
		s.D = ss
	} else if ss, ok := o.GetRaw("d").([]interface{}); ok {
		s.D = []byte{}
		for _, si := range ss {
			if v, ok := si.(byte); ok {
				s.D = append(s.D, v)
			}
		}
	}
	return nil
}

// GetType returns the object's type
func (s Key) GetType() string {
	return KeyType
}
