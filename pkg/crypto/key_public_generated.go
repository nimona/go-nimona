// Code generated by nimona.io/tools/objectify. DO NOT EDIT.

// +build !generate

package crypto

import (
	"github.com/mitchellh/mapstructure"
	"nimona.io/pkg/object"
)

const (
	PublicKeyType = "/key.public"
)

// ToObject returns a f12n object
func (s PublicKey) ToObject() *object.Object {
	o := object.New()
	o.SetType(PublicKeyType)
	if s.Algorithm != "" {
		o.SetRaw("alg", s.Algorithm)
	}
	if s.KeyType != "" {
		o.SetRaw("kty", s.KeyType)
	}
	if s.Curve != "" {
		o.SetRaw("crv", s.Curve)
	}
	if len(s.X) > 0 {
		o.SetRaw("x", s.X)
	}
	if len(s.Y) > 0 {
		o.SetRaw("y", s.Y)
	}
	if s.Signature != nil {
		o.SetRaw("@signature", s.Signature)
	}
	return o
}

func anythingToAnythingForPublicKey(
	from interface{},
	to interface{},
) error {
	config := &mapstructure.DecoderConfig{
		Result:  to,
		TagName: "json",
	}

	decoder, err := mapstructure.NewDecoder(config)
	if err != nil {
		return err
	}

	if err := decoder.Decode(from); err != nil {
		return err
	}

	return nil
}

// FromObject populates the struct from a f12n object
func (s *PublicKey) FromObject(o *object.Object) error {
	atoa := anythingToAnythingForPublicKey
	if err := atoa(o.GetRaw("alg"), &s.Algorithm); err != nil {
		return err
	}
	if err := atoa(o.GetRaw("kty"), &s.KeyType); err != nil {
		return err
	}
	if err := atoa(o.GetRaw("crv"), &s.Curve); err != nil {
		return err
	}
	if err := atoa(o.GetRaw("x"), &s.X); err != nil {
		return err
	}
	if err := atoa(o.GetRaw("y"), &s.Y); err != nil {
		return err
	}
	if v, ok := o.GetRaw("@signature").(*Signature); ok {
		s.Signature = v
	} else if v, ok := o.GetRaw("@signature").(map[string]interface{}); ok {
		s.Signature = &Signature{}
		o := &object.Object{}
		if err := o.FromMap(v); err != nil {
			return err
		}
		s.Signature.FromObject(o)
	}

	if ao, ok := interface{}(s).(interface{ afterFromObject() }); ok {
		ao.afterFromObject()
	}

	return nil
}

// GetType returns the object's type
func (s PublicKey) GetType() string {
	return PublicKeyType
}
