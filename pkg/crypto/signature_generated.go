// Code generated by nimona.io/tools/objectify. DO NOT EDIT.

// +build !generate

package crypto

import (
	"nimona.io/pkg/object"
)

const (
	SignatureType = "/signature"
)

// ToObject returns a f12n object
func (s Signature) ToObject() *object.Object {
	o := object.New()
	o.SetType(SignatureType)
	if s.Alg != "" {
		o.SetRaw("alg", s.Alg)
	}
	if len(s.R) > 0 {
		o.SetRaw("r", s.R)
	}
	if len(s.S) > 0 {
		o.SetRaw("s", s.S)
	}
	return o
}

// FromObject populates the struct from a f12n object
func (s *Signature) FromObject(o *object.Object) error {
	if v, ok := o.GetRaw("alg").(string); ok {
		s.Alg = v
	}
	if ss, ok := o.GetRaw("r").([]byte); ok {
		s.R = ss
	} else if ss, ok := o.GetRaw("r").([]interface{}); ok {
		s.R = []byte{}
		for _, si := range ss {
			if v, ok := si.(byte); ok {
				s.R = append(s.R, v)
			}
		}
	}
	if ss, ok := o.GetRaw("s").([]byte); ok {
		s.S = ss
	} else if ss, ok := o.GetRaw("s").([]interface{}); ok {
		s.S = []byte{}
		for _, si := range ss {
			if v, ok := si.(byte); ok {
				s.S = append(s.S, v)
			}
		}
	}
	return nil
}

// GetType returns the object's type
func (s Signature) GetType() string {
	return SignatureType
}
