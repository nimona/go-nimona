// Code generated by nimona.io/tools/objectify. DO NOT EDIT.

// +build !generate

package crypto

import (
	"github.com/mitchellh/mapstructure"
	"nimona.io/pkg/object"
)

const (
	SignatureType = "/signature"
)

// ToObject returns a f12n object
func (s Signature) ToObject() *object.Object {
	o := object.New()
	o.SetType(SignatureType)
	if s.PublicKey != nil {
		o.SetRaw("pub", s.PublicKey)
	}
	if s.Alg != "" {
		o.SetRaw("alg", s.Alg)
	}
	if len(s.R) > 0 {
		o.SetRaw("r", s.R)
	}
	if len(s.S) > 0 {
		o.SetRaw("s", s.S)
	}
	return o
}

func anythingToAnythingForSignature(
	from interface{},
	to interface{},
) error {
	config := &mapstructure.DecoderConfig{
		Result:  to,
		TagName: "json",
	}

	decoder, err := mapstructure.NewDecoder(config)
	if err != nil {
		return err
	}

	if err := decoder.Decode(from); err != nil {
		return err
	}

	return nil
}

// FromObject populates the struct from a f12n object
func (s *Signature) FromObject(o *object.Object) error {
	atoa := anythingToAnythingForSignature
	if v, ok := o.GetRaw("pub").(*PublicKey); ok {
		s.PublicKey = v
	} else if v, ok := o.GetRaw("pub").(map[string]interface{}); ok {
		s.PublicKey = &PublicKey{}
		o := &object.Object{}
		if err := o.FromMap(v); err != nil {
			return err
		}
		s.PublicKey.FromObject(o)
	}
	if err := atoa(o.GetRaw("alg"), &s.Alg); err != nil {
		return err
	}
	if err := atoa(o.GetRaw("r"), &s.R); err != nil {
		return err
	}
	if err := atoa(o.GetRaw("s"), &s.S); err != nil {
		return err
	}

	if ao, ok := interface{}(s).(interface{ afterFromObject() }); ok {
		ao.afterFromObject()
	}

	return nil
}

// GetType returns the object's type
func (s Signature) GetType() string {
	return SignatureType
}
