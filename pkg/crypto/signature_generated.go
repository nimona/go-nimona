// Code generated by nimona.io/tools/objectify. DO NOT EDIT.

// +build !generate

package crypto

import (
	"nimona.io/pkg/encoding"
)

// ToMap returns a map compatible with f12n
func (s Signature) ToMap() map[string]interface{} {
	m := map[string]interface{}{
		"@ctx:s": "/signature",
		"alg:s":  s.Alg,
	}
	if s.R != nil {
		m["r:d"] = s.R
	}
	if s.S != nil {
		m["s:d"] = s.S
	}
	return m
}

// ToObject returns a f12n object
func (s Signature) ToObject() *encoding.Object {
	return encoding.NewObjectFromMap(s.ToMap())
}

// FromMap populates the struct from a f12n compatible map
func (s *Signature) FromMap(m map[string]interface{}) error {
	if v, ok := m["alg:s"].(string); ok {
		s.Alg = v
	}
	s.R = []byte{}
	if ss, ok := m["r:d"].([]interface{}); ok {
		for _, si := range ss {
			if v, ok := si.(byte); ok {
				s.R = append(s.R, v)
			}
		}
	}
	if v, ok := m["r:d"].([]byte); ok {
		s.R = v
	}
	s.S = []byte{}
	if ss, ok := m["s:d"].([]interface{}); ok {
		for _, si := range ss {
			if v, ok := si.(byte); ok {
				s.S = append(s.S, v)
			}
		}
	}
	if v, ok := m["s:d"].([]byte); ok {
		s.S = v
	}
	return nil
}

// FromObject populates the struct from a f12n object
func (s *Signature) FromObject(o *encoding.Object) error {
	return s.FromMap(o.ToMap())
}

// GetType returns the object's type
func (s Signature) GetType() string {
	return "/signature"
}
