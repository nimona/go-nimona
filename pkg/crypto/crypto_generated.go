// Code generated by nimona.io/tools/codegen. DO NOT EDIT.

package crypto

import (
	json "encoding/json"

	object "nimona.io/pkg/object"
)

type (
	Certificate struct {
		Subject   PublicKey  `json:"subject:s,omitempty"`
		Created   string     `json:"created:s,omitempty"`
		Expires   string     `json:"expires:s,omitempty"`
		Signature *Signature `json:"@signature:o,omitempty"`
	}
	Signature struct {
		Signer PublicKey `json:"signer:s,omitempty"`
		Alg    string    `json:"alg:s,omitempty"`
		X      []byte    `json:"x:d,omitempty"`
	}
)

func (e *Certificate) GetType() string {
	return "nimona.io/crypto.Certificate"
}

func (e *Certificate) ToObject() object.Object {
	m := map[string]interface{}{}
	m["@type:s"] = "nimona.io/crypto.Certificate"
	m["subject:s"] = e.Subject
	m["created:s"] = e.Created
	m["expires:s"] = e.Expires
	if e.Signature != nil {
		m["@signature:o"] = e.Signature.ToObject().ToMap()
	}
	return object.Object(m)
}

func (e *Certificate) FromObject(o object.Object) error {
	b, _ := json.Marshal(map[string]interface{}(o))
	return json.Unmarshal(b, e)
}

func (e *Signature) GetType() string {
	return "nimona.io/crypto.Signature"
}

func (e *Signature) ToObject() object.Object {
	m := map[string]interface{}{}
	m["@type:s"] = "nimona.io/crypto.Signature"
	m["signer:s"] = e.Signer
	m["alg:s"] = e.Alg
	m["x:d"] = e.X
	return object.Object(m)
}

func (e *Signature) FromObject(o object.Object) error {
	b, _ := json.Marshal(map[string]interface{}(o))
	return json.Unmarshal(b, e)
}
