// Code generated by nimona.io/tools/objectify. DO NOT EDIT.

// +build !generate

package crypto

import (
	"nimona.io/pkg/object"
)

const (
	MandateType = "/mandate"
)

// ToObject returns a f12n object
func (s Mandate) ToObject() *object.Object {
	o := object.New()
	o.SetType(MandateType)
	if s.Signer != nil {
		o.SetRaw("@signer", s.Signer)
	}
	if s.Subject != nil {
		o.SetRaw("subject", s.Subject)
	}
	if s.Description != "" {
		o.SetRaw("description", s.Description)
	}
	if len(s.Resources) > 0 {
		o.SetRaw("resources", s.Resources)
	}
	if len(s.Actions) > 0 {
		o.SetRaw("actions", s.Actions)
	}
	if s.Effect != "" {
		o.SetRaw("effect", s.Effect)
	}
	if s.Signature != nil {
		o.SetRaw("@signature", s.Signature)
	}
	return o
}

// FromObject populates the struct from a f12n object
func (s *Mandate) FromObject(o *object.Object) error {
	if v, ok := o.GetRaw("@signer").(*Key); ok {
		s.Signer = v
	} else if v, ok := o.GetRaw("@signer").(*object.Object); ok {
		s.Signer = &Key{}
		s.Signer.FromObject(v)
	}
	if v, ok := o.GetRaw("subject").(*Key); ok {
		s.Subject = v
	} else if v, ok := o.GetRaw("subject").(*object.Object); ok {
		s.Subject = &Key{}
		s.Subject.FromObject(v)
	}
	if v, ok := o.GetRaw("description").(string); ok {
		s.Description = v
	}
	if ss, ok := o.GetRaw("resources").([]string); ok {
		s.Resources = ss
	} else if ss, ok := o.GetRaw("resources").([]interface{}); ok {
		s.Resources = []string{}
		for _, si := range ss {
			if v, ok := si.(string); ok {
				s.Resources = append(s.Resources, v)
			}
		}
	}
	if ss, ok := o.GetRaw("actions").([]string); ok {
		s.Actions = ss
	} else if ss, ok := o.GetRaw("actions").([]interface{}); ok {
		s.Actions = []string{}
		for _, si := range ss {
			if v, ok := si.(string); ok {
				s.Actions = append(s.Actions, v)
			}
		}
	}
	if v, ok := o.GetRaw("effect").(string); ok {
		s.Effect = v
	}
	if v, ok := o.GetRaw("@signature").(*Signature); ok {
		s.Signature = v
	} else if v, ok := o.GetRaw("@signature").(*object.Object); ok {
		s.Signature = &Signature{}
		s.Signature.FromObject(v)
	}
	return nil
}

// GetType returns the object's type
func (s Mandate) GetType() string {
	return MandateType
}
