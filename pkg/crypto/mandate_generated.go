// Code generated by nimona.io/tools/objectify. DO NOT EDIT.

// +build !generate

package crypto

import (
	"github.com/mitchellh/mapstructure"
	"nimona.io/pkg/object"
)

const (
	MandateType = "/mandate"
)

// ToObject returns a f12n object
func (s Mandate) ToObject() *object.Object {
	o := object.New()
	o.SetType(MandateType)
	if s.Signer != nil {
		o.SetRaw("@signer", s.Signer)
	}
	if s.Subject != nil {
		o.SetRaw("subject", s.Subject)
	}
	if s.Description != "" {
		o.SetRaw("description", s.Description)
	}
	if len(s.Resources) > 0 {
		o.SetRaw("resources", s.Resources)
	}
	if len(s.Actions) > 0 {
		o.SetRaw("actions", s.Actions)
	}
	if s.Effect != "" {
		o.SetRaw("effect", s.Effect)
	}
	if s.Signature != nil {
		o.SetRaw("@signature", s.Signature)
	}
	return o
}

func anythingToAnythingForMandate(
	from interface{},
	to interface{},
) error {
	config := &mapstructure.DecoderConfig{
		Result:  to,
		TagName: "json",
	}

	decoder, err := mapstructure.NewDecoder(config)
	if err != nil {
		return err
	}

	if err := decoder.Decode(from); err != nil {
		return err
	}

	return nil
}

// FromObject populates the struct from a f12n object
func (s *Mandate) FromObject(o *object.Object) error {
	atoa := anythingToAnythingForMandate
	if v, ok := o.GetRaw("@signer").(*Key); ok {
		s.Signer = v
	} else if v, ok := o.GetRaw("@signer").(map[string]interface{}); ok {
		s.Signer = &Key{}
		o := &object.Object{}
		if err := o.FromMap(v); err != nil {
			return err
		}
		s.Signer.FromObject(o)
	}
	if v, ok := o.GetRaw("subject").(*Key); ok {
		s.Subject = v
	} else if v, ok := o.GetRaw("subject").(map[string]interface{}); ok {
		s.Subject = &Key{}
		o := &object.Object{}
		if err := o.FromMap(v); err != nil {
			return err
		}
		s.Subject.FromObject(o)
	}
	if err := atoa(o.GetRaw("description"), &s.Description); err != nil {
		return err
	}
	if err := atoa(o.GetRaw("resources"), &s.Resources); err != nil {
		return err
	}
	if err := atoa(o.GetRaw("actions"), &s.Actions); err != nil {
		return err
	}
	if err := atoa(o.GetRaw("effect"), &s.Effect); err != nil {
		return err
	}
	if v, ok := o.GetRaw("@signature").(*Signature); ok {
		s.Signature = v
	} else if v, ok := o.GetRaw("@signature").(map[string]interface{}); ok {
		s.Signature = &Signature{}
		o := &object.Object{}
		if err := o.FromMap(v); err != nil {
			return err
		}
		s.Signature.FromObject(o)
	}

	return nil
}

// GetType returns the object's type
func (s Mandate) GetType() string {
	return MandateType
}
