// Code generated by nimona.io/tools/objectify. DO NOT EDIT.

// +build !generate

package peer

import (
	"github.com/mitchellh/mapstructure"
	"nimona.io/pkg/crypto"
	"nimona.io/pkg/object"
)

const (
	PeerInfoRequestType = "/peer.request"
)

// ToObject returns a f12n object
func (s PeerInfoRequest) ToObject() *object.Object {
	o := object.New()
	o.SetType(PeerInfoRequestType)
	if s.AuthorityKeyHash != "" {
		o.SetRaw("authority", s.AuthorityKeyHash)
	}
	if s.SignerKeyHash != "" {
		o.SetRaw("signer", s.SignerKeyHash)
	}
	if len(s.Protocols) > 0 {
		o.SetRaw("protocols", s.Protocols)
	}
	if len(s.ContentIDs) > 0 {
		o.SetRaw("contentIDs", s.ContentIDs)
	}
	if len(s.ContentTypes) > 0 {
		o.SetRaw("contentTypes", s.ContentTypes)
	}
	if s.RequesterAuthorityKey != nil {
		o.SetRaw("@authority", s.RequesterAuthorityKey)
	}
	if s.RequesterSignerKey != nil {
		o.SetRaw("@signer", s.RequesterSignerKey)
	}
	if s.RequestSignature != nil {
		o.SetRaw("@signature", s.RequestSignature)
	}
	return o
}

func anythingToAnythingForPeerInfoRequest(
	from interface{},
	to interface{},
) error {
	config := &mapstructure.DecoderConfig{
		Result:  to,
		TagName: "json",
	}

	decoder, err := mapstructure.NewDecoder(config)
	if err != nil {
		return err
	}

	if err := decoder.Decode(from); err != nil {
		return err
	}

	return nil
}

// FromObject populates the struct from a f12n object
func (s *PeerInfoRequest) FromObject(o *object.Object) error {
	atoa := anythingToAnythingForPeerInfoRequest
	if err := atoa(o.GetRaw("authority"), &s.AuthorityKeyHash); err != nil {
		return err
	}
	if err := atoa(o.GetRaw("signer"), &s.SignerKeyHash); err != nil {
		return err
	}
	if err := atoa(o.GetRaw("protocols"), &s.Protocols); err != nil {
		return err
	}
	if err := atoa(o.GetRaw("contentIDs"), &s.ContentIDs); err != nil {
		return err
	}
	if err := atoa(o.GetRaw("contentTypes"), &s.ContentTypes); err != nil {
		return err
	}
	if v, ok := o.GetRaw("@authority").(*crypto.Key); ok {
		s.RequesterAuthorityKey = v
	} else if v, ok := o.GetRaw("@authority").(map[string]interface{}); ok {
		s.RequesterAuthorityKey = &crypto.Key{}
		o := &object.Object{}
		if err := o.FromMap(v); err != nil {
			return err
		}
		s.RequesterAuthorityKey.FromObject(o)
	}
	if v, ok := o.GetRaw("@signer").(*crypto.Key); ok {
		s.RequesterSignerKey = v
	} else if v, ok := o.GetRaw("@signer").(map[string]interface{}); ok {
		s.RequesterSignerKey = &crypto.Key{}
		o := &object.Object{}
		if err := o.FromMap(v); err != nil {
			return err
		}
		s.RequesterSignerKey.FromObject(o)
	}
	if v, ok := o.GetRaw("@signature").(*crypto.Signature); ok {
		s.RequestSignature = v
	} else if v, ok := o.GetRaw("@signature").(map[string]interface{}); ok {
		s.RequestSignature = &crypto.Signature{}
		o := &object.Object{}
		if err := o.FromMap(v); err != nil {
			return err
		}
		s.RequestSignature.FromObject(o)
	}

	return nil
}

// GetType returns the object's type
func (s PeerInfoRequest) GetType() string {
	return PeerInfoRequestType
}
