// Code generated by nimona.io/tools/objectify. DO NOT EDIT.

// +build !generate

package peer

import (
	"nimona.io/pkg/crypto"
	"nimona.io/pkg/object"
)

// ToMap returns a map compatible with f12n
func (s PeerInfo) ToMap() map[string]interface{} {
	m := map[string]interface{}{
		"@ctx:s": "/peer",
	}
	if s.Addresses != nil {
		m["addresses:a<s>"] = s.Addresses
	}
	if s.Protocols != nil {
		m["protocols:a<s>"] = s.Protocols
	}
	if s.ContentIDs != nil {
		m["contentIDs:a<s>"] = s.ContentIDs
	}
	if s.ContentTypes != nil {
		m["contentTypes:a<s>"] = s.ContentTypes
	}
	if s.AuthorityKey != nil {
		m["@authority:o"] = s.AuthorityKey.ToMap()
	}
	if s.SignerKey != nil {
		m["@signer:o"] = s.SignerKey.ToMap()
	}
	if s.Signature != nil {
		m["@signature:o"] = s.Signature.ToMap()
	}
	return m
}

// ToObject returns a f12n object
func (s PeerInfo) ToObject() *object.Object {
	return object.NewObjectFromMap(s.ToMap())
}

// FromMap populates the struct from a f12n compatible map
func (s *PeerInfo) FromMap(m map[string]interface{}) error {
	s.Addresses = []string{}
	if ss, ok := m["addresses:a<s>"].([]interface{}); ok {
		for _, si := range ss {
			if v, ok := si.(string); ok {
				s.Addresses = append(s.Addresses, v)
			}
		}
	}
	if v, ok := m["addresses:a<s>"].([]string); ok {
		s.Addresses = v
	}
	s.Protocols = []string{}
	if ss, ok := m["protocols:a<s>"].([]interface{}); ok {
		for _, si := range ss {
			if v, ok := si.(string); ok {
				s.Protocols = append(s.Protocols, v)
			}
		}
	}
	if v, ok := m["protocols:a<s>"].([]string); ok {
		s.Protocols = v
	}
	s.ContentIDs = []string{}
	if ss, ok := m["contentIDs:a<s>"].([]interface{}); ok {
		for _, si := range ss {
			if v, ok := si.(string); ok {
				s.ContentIDs = append(s.ContentIDs, v)
			}
		}
	}
	if v, ok := m["contentIDs:a<s>"].([]string); ok {
		s.ContentIDs = v
	}
	s.ContentTypes = []string{}
	if ss, ok := m["contentTypes:a<s>"].([]interface{}); ok {
		for _, si := range ss {
			if v, ok := si.(string); ok {
				s.ContentTypes = append(s.ContentTypes, v)
			}
		}
	}
	if v, ok := m["contentTypes:a<s>"].([]string); ok {
		s.ContentTypes = v
	}
	if v, ok := m["@authority:o"].(map[string]interface{}); ok {
		s.AuthorityKey = &crypto.Key{}
		if err := s.AuthorityKey.FromMap(v); err != nil {
			return err
		}
	} else if v, ok := m["@authority:o"].(*crypto.Key); ok {
		s.AuthorityKey = v
	}
	if v, ok := m["@authority:o"].(*crypto.Key); ok {
		s.AuthorityKey = v
	}
	if v, ok := m["@signer:o"].(map[string]interface{}); ok {
		s.SignerKey = &crypto.Key{}
		if err := s.SignerKey.FromMap(v); err != nil {
			return err
		}
	} else if v, ok := m["@signer:o"].(*crypto.Key); ok {
		s.SignerKey = v
	}
	if v, ok := m["@signer:o"].(*crypto.Key); ok {
		s.SignerKey = v
	}
	if v, ok := m["@signature:o"].(map[string]interface{}); ok {
		s.Signature = &crypto.Signature{}
		if err := s.Signature.FromMap(v); err != nil {
			return err
		}
	} else if v, ok := m["@signature:o"].(*crypto.Signature); ok {
		s.Signature = v
	}
	if v, ok := m["@signature:o"].(*crypto.Signature); ok {
		s.Signature = v
	}
	return nil
}

// FromObject populates the struct from a f12n object
func (s *PeerInfo) FromObject(o *object.Object) error {
	return s.FromMap(o.ToMap())
}

// GetType returns the object's type
func (s PeerInfo) GetType() string {
	return "/peer"
}
