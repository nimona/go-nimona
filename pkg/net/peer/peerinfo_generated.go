// Code generated by nimona.io/tools/objectify. DO NOT EDIT.

// +build !generate

package peer

import (
	"github.com/mitchellh/mapstructure"
	"nimona.io/pkg/crypto"
	"nimona.io/pkg/object"
)

const (
	PeerInfoType = "/peer"
)

// ToObject returns a f12n object
func (s PeerInfo) ToObject() *object.Object {
	o := object.New()
	o.SetType(PeerInfoType)
	if len(s.Addresses) > 0 {
		o.SetRaw("addresses", s.Addresses)
	}
	if len(s.Protocols) > 0 {
		o.SetRaw("protocols", s.Protocols)
	}
	if len(s.ContentIDs) > 0 {
		o.SetRaw("contentIDs", s.ContentIDs)
	}
	if len(s.ContentTypes) > 0 {
		o.SetRaw("contentTypes", s.ContentTypes)
	}
	if s.AuthorityKey != nil {
		o.SetRaw("@authority", s.AuthorityKey)
	}
	if s.SignerKey != nil {
		o.SetRaw("@signer", s.SignerKey)
	}
	if s.Signature != nil {
		o.SetRaw("@signature", s.Signature)
	}
	if s.Mandate != nil {
		o.SetRaw("@mandate", s.Mandate)
	}
	return o
}

func anythingToAnythingForPeerInfo(
	from interface{},
	to interface{},
) error {
	config := &mapstructure.DecoderConfig{
		Result:  to,
		TagName: "json",
	}

	decoder, err := mapstructure.NewDecoder(config)
	if err != nil {
		return err
	}

	if err := decoder.Decode(from); err != nil {
		return err
	}

	return nil
}

// FromObject populates the struct from a f12n object
func (s *PeerInfo) FromObject(o *object.Object) error {
	atoa := anythingToAnythingForPeerInfo
	if err := atoa(o.GetRaw("addresses"), &s.Addresses); err != nil {
		return err
	}
	if err := atoa(o.GetRaw("protocols"), &s.Protocols); err != nil {
		return err
	}
	if err := atoa(o.GetRaw("contentIDs"), &s.ContentIDs); err != nil {
		return err
	}
	if err := atoa(o.GetRaw("contentTypes"), &s.ContentTypes); err != nil {
		return err
	}
	if v, ok := o.GetRaw("@authority").(*crypto.Key); ok {
		s.AuthorityKey = v
	} else if v, ok := o.GetRaw("@authority").(map[string]interface{}); ok {
		s.AuthorityKey = &crypto.Key{}
		o := &object.Object{}
		if err := o.FromMap(v); err != nil {
			return err
		}
		s.AuthorityKey.FromObject(o)
	}
	if v, ok := o.GetRaw("@signer").(*crypto.Key); ok {
		s.SignerKey = v
	} else if v, ok := o.GetRaw("@signer").(map[string]interface{}); ok {
		s.SignerKey = &crypto.Key{}
		o := &object.Object{}
		if err := o.FromMap(v); err != nil {
			return err
		}
		s.SignerKey.FromObject(o)
	}
	if v, ok := o.GetRaw("@signature").(*crypto.Signature); ok {
		s.Signature = v
	} else if v, ok := o.GetRaw("@signature").(map[string]interface{}); ok {
		s.Signature = &crypto.Signature{}
		o := &object.Object{}
		if err := o.FromMap(v); err != nil {
			return err
		}
		s.Signature.FromObject(o)
	}
	if v, ok := o.GetRaw("@mandate").(*crypto.Mandate); ok {
		s.Mandate = v
	} else if v, ok := o.GetRaw("@mandate").(map[string]interface{}); ok {
		s.Mandate = &crypto.Mandate{}
		o := &object.Object{}
		if err := o.FromMap(v); err != nil {
			return err
		}
		s.Mandate.FromObject(o)
	}

	return nil
}

// GetType returns the object's type
func (s PeerInfo) GetType() string {
	return PeerInfoType
}
