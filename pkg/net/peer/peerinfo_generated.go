// Code generated by nimona.io/tools/objectify. DO NOT EDIT.

// +build !generate

package peer

import (
	"nimona.io/pkg/crypto"
	"nimona.io/pkg/object"
)

const (
	PeerInfoType = "/peer"
)

// ToObject returns a f12n object
func (s PeerInfo) ToObject() *object.Object {
	o := object.New()
	o.SetType(PeerInfoType)
	if len(s.Addresses) > 0 {
		o.SetRaw("addresses", s.Addresses)
	}
	if len(s.Protocols) > 0 {
		o.SetRaw("protocols", s.Protocols)
	}
	if len(s.ContentIDs) > 0 {
		o.SetRaw("contentIDs", s.ContentIDs)
	}
	if len(s.ContentTypes) > 0 {
		o.SetRaw("contentTypes", s.ContentTypes)
	}
	if s.AuthorityKey != nil {
		o.SetRaw("@authority", s.AuthorityKey)
	}
	if s.SignerKey != nil {
		o.SetRaw("@signer", s.SignerKey)
	}
	if s.Signature != nil {
		o.SetRaw("@signature", s.Signature)
	}
	if s.Mandate != nil {
		o.SetRaw("@mandate", s.Mandate)
	}
	return o
}

// FromObject populates the struct from a f12n object
func (s *PeerInfo) FromObject(o *object.Object) error {
	if ss, ok := o.GetRaw("addresses").([]string); ok {
		s.Addresses = ss
	} else if ss, ok := o.GetRaw("addresses").([]interface{}); ok {
		s.Addresses = []string{}
		for _, si := range ss {
			if v, ok := si.(string); ok {
				s.Addresses = append(s.Addresses, v)
			}
		}
	}
	if ss, ok := o.GetRaw("protocols").([]string); ok {
		s.Protocols = ss
	} else if ss, ok := o.GetRaw("protocols").([]interface{}); ok {
		s.Protocols = []string{}
		for _, si := range ss {
			if v, ok := si.(string); ok {
				s.Protocols = append(s.Protocols, v)
			}
		}
	}
	if ss, ok := o.GetRaw("contentIDs").([]string); ok {
		s.ContentIDs = ss
	} else if ss, ok := o.GetRaw("contentIDs").([]interface{}); ok {
		s.ContentIDs = []string{}
		for _, si := range ss {
			if v, ok := si.(string); ok {
				s.ContentIDs = append(s.ContentIDs, v)
			}
		}
	}
	if ss, ok := o.GetRaw("contentTypes").([]string); ok {
		s.ContentTypes = ss
	} else if ss, ok := o.GetRaw("contentTypes").([]interface{}); ok {
		s.ContentTypes = []string{}
		for _, si := range ss {
			if v, ok := si.(string); ok {
				s.ContentTypes = append(s.ContentTypes, v)
			}
		}
	}
	if v, ok := o.GetRaw("@authority").(*crypto.Key); ok {
		s.AuthorityKey = v
	} else if v, ok := o.GetRaw("@authority").(*object.Object); ok {
		s.AuthorityKey = &crypto.Key{}
		s.AuthorityKey.FromObject(v)
	}
	if v, ok := o.GetRaw("@signer").(*crypto.Key); ok {
		s.SignerKey = v
	} else if v, ok := o.GetRaw("@signer").(*object.Object); ok {
		s.SignerKey = &crypto.Key{}
		s.SignerKey.FromObject(v)
	}
	if v, ok := o.GetRaw("@signature").(*crypto.Signature); ok {
		s.Signature = v
	} else if v, ok := o.GetRaw("@signature").(*object.Object); ok {
		s.Signature = &crypto.Signature{}
		s.Signature.FromObject(v)
	}
	if v, ok := o.GetRaw("@mandate").(*crypto.Mandate); ok {
		s.Mandate = v
	} else if v, ok := o.GetRaw("@mandate").(*object.Object); ok {
		s.Mandate = &crypto.Mandate{}
		s.Mandate.FromObject(v)
	}
	return nil
}

// GetType returns the object's type
func (s PeerInfo) GetType() string {
	return PeerInfoType
}
