// Code generated by nimona.io/tools/objectify. DO NOT EDIT.

// +build !generate

package handshake

import (
	"nimona.io/pkg/net/peer"
	"nimona.io/pkg/object"
)

const (
	SynType = "/handshake.syn"
)

// ToObject returns a f12n object
func (s Syn) ToObject() *object.Object {
	o := object.New()
	o.SetType(SynType)
	if s.Nonce != "" {
		o.SetRaw("nonce", s.Nonce)
	}
	if s.PeerInfo != nil {
		o.SetRaw("peerInfo", s.PeerInfo)
	}
	return o
}

// FromObject populates the struct from a f12n object
func (s *Syn) FromObject(o *object.Object) error {
	s.RawObject = o
	if v, ok := o.GetRaw("nonce").(string); ok {
		s.Nonce = v
	}
	if v, ok := o.GetRaw("peerInfo").(*peer.PeerInfo); ok {
		s.PeerInfo = v
	} else if v, ok := o.GetRaw("peerInfo").(*object.Object); ok {
		s.PeerInfo = &peer.PeerInfo{}
		s.PeerInfo.FromObject(v)
	}
	return nil
}

// GetType returns the object's type
func (s Syn) GetType() string {
	return SynType
}
