// Code generated by nimona.io/tools/objectify. DO NOT EDIT.

// +build !generate

package handshake

import (
	"nimona.io/pkg/crypto"
	"nimona.io/pkg/object"
)

const (
	AckType = "/handshake.ack"
)

// ToObject returns a f12n object
func (s Ack) ToObject() *object.Object {
	o := object.New()
	o.SetType(AckType)
	if s.Nonce != "" {
		o.SetRaw("nonce", s.Nonce)
	}
	if s.Signer != nil {
		o.SetRaw("@signer", s.Signer)
	}
	if s.Signature != nil {
		o.SetRaw("@signature", s.Signature)
	}
	return o
}

// FromObject populates the struct from a f12n object
func (s *Ack) FromObject(o *object.Object) error {
	if v, ok := o.GetRaw("nonce").(string); ok {
		s.Nonce = v
	}
	if v, ok := o.GetRaw("@signer").(*crypto.Key); ok {
		s.Signer = v
	} else if v, ok := o.GetRaw("@signer").(*object.Object); ok {
		s.Signer = &crypto.Key{}
		s.Signer.FromObject(v)
	}
	if v, ok := o.GetRaw("@signature").(*crypto.Signature); ok {
		s.Signature = v
	} else if v, ok := o.GetRaw("@signature").(*object.Object); ok {
		s.Signature = &crypto.Signature{}
		s.Signature.FromObject(v)
	}
	return nil
}

// GetType returns the object's type
func (s Ack) GetType() string {
	return AckType
}
