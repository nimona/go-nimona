// Code generated by nimona.io/tools/codegen. DO NOT EDIT.

package objectmanager

import (
	crypto "nimona.io/pkg/crypto"
	"nimona.io/pkg/errors"
	object "nimona.io/pkg/object"
)

type (
	Request struct {
		raw        object.Object
		Stream     object.Hash
		Parents    []object.Hash
		Owners     []crypto.PublicKey
		Policy     object.Policy
		Signatures []object.Signature
		ObjectHash object.Hash
	}
	Response struct {
		raw        object.Object
		Stream     object.Hash
		Parents    []object.Hash
		Owners     []crypto.PublicKey
		Policy     object.Policy
		Signatures []object.Signature
		ObjectHash *object.Object
	}
)

func (e Request) GetType() string {
	return "nimona.io/objectmanager.Request"
}

func (e Request) IsStreamRoot() bool {
	return false
}

func (e Request) GetSchema() *object.SchemaObject {
	return &object.SchemaObject{
		Properties: []*object.SchemaProperty{{
			Name:       "objectHash",
			Type:       "nimona.io/object.Hash",
			Hint:       "s",
			IsRepeated: false,
			IsOptional: false,
		}},
	}
}

func (e Request) ToObject() object.Object {
	o := object.Object{}
	o = o.SetType("nimona.io/objectmanager.Request")
	if len(e.Stream) > 0 {
		o = o.SetStream(e.Stream)
	}
	if len(e.Parents) > 0 {
		o = o.SetParents(e.Parents)
	}
	if len(e.Owners) > 0 {
		o = o.SetOwners(e.Owners)
	}
	o = o.AddSignature(e.Signatures...)
	o = o.SetPolicy(e.Policy)
	if e.ObjectHash != "" {
		o = o.Set("objectHash:s", e.ObjectHash)
	}
	// if schema := e.GetSchema(); schema != nil {
	// 	m["_schema:m"] = schema.ToObject().ToMap()
	// }
	return o
}

func (e *Request) FromObject(o object.Object) error {
	content, ok := o.Raw().Value("content:m").(object.Map)
	if !ok {
		return errors.New("missing content")
	}
	e.raw = object.Object{}
	e.raw = e.raw.SetType(o.GetType())
	e.Stream = o.GetStream()
	e.Parents = o.GetParents()
	e.Owners = o.GetOwners()
	e.Signatures = o.GetSignatures()
	e.Policy = o.GetPolicy()
	if v := content.Value("objectHash:s"); v != nil {
		e.ObjectHash = object.Hash(v.PrimitiveHinted().(string))
	}
	return nil
}

func (e Response) GetType() string {
	return "nimona.io/objectmanager.Response"
}

func (e Response) IsStreamRoot() bool {
	return false
}

func (e Response) GetSchema() *object.SchemaObject {
	return &object.SchemaObject{
		Properties: []*object.SchemaProperty{{
			Name:       "objectHash",
			Type:       "nimona.io/object.Object",
			Hint:       "m",
			IsRepeated: false,
			IsOptional: false,
		}},
	}
}

func (e Response) ToObject() object.Object {
	o := object.Object{}
	o = o.SetType("nimona.io/objectmanager.Response")
	if len(e.Stream) > 0 {
		o = o.SetStream(e.Stream)
	}
	if len(e.Parents) > 0 {
		o = o.SetParents(e.Parents)
	}
	if len(e.Owners) > 0 {
		o = o.SetOwners(e.Owners)
	}
	o = o.AddSignature(e.Signatures...)
	o = o.SetPolicy(e.Policy)
	if e.ObjectHash != nil {
		o = o.Set("objectHash:m", e.ObjectHash.ToObject().Raw())
	}
	// if schema := e.GetSchema(); schema != nil {
	// 	m["_schema:m"] = schema.ToObject().ToMap()
	// }
	return o
}

func (e *Response) FromObject(o object.Object) error {
	content, ok := o.Raw().Value("content:m").(object.Map)
	if !ok {
		return errors.New("missing content")
	}
	e.raw = object.Object{}
	e.raw = e.raw.SetType(o.GetType())
	e.Stream = o.GetStream()
	e.Parents = o.GetParents()
	e.Owners = o.GetOwners()
	e.Signatures = o.GetSignatures()
	e.Policy = o.GetPolicy()
	if v := content.Value("objectHash:m"); v != nil && v.IsMap() {
		eo := object.Object(v.(object.Map))
		e.ObjectHash = &eo
	}
	return nil
}
