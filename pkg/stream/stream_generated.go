// Code generated by nimona.io/tools/codegen. DO NOT EDIT.

package stream

import (
	json "encoding/json"

	crypto "nimona.io/pkg/crypto"
	object "nimona.io/pkg/object"
)

type (
	Policy struct {
		Subjects   []string `json:"subjects:as,omitempty"`
		Resources  []string `json:"resources:as,omitempty"`
		Conditions []string `json:"conditions:as,omitempty"`
		Action     string   `json:"action:s,omitempty"`
	}
	StreamRequest struct {
		Nonce     string            `json:"nonce:s,omitempty"`
		Stream    object.Hash       `json:"stream:s,omitempty"`
		Signature *crypto.Signature `json:"@signature:o,omitempty"`
		Identity  crypto.PublicKey  `json:"@identity:s,omitempty"`
	}
	StreamResponse struct {
		Nonce     string            `json:"nonce:s,omitempty"`
		Stream    object.Hash       `json:"stream:s,omitempty"`
		Children  []object.Hash     `json:"children:as,omitempty"`
		Signature *crypto.Signature `json:"@signature:o,omitempty"`
		Identity  crypto.PublicKey  `json:"@identity:s,omitempty"`
	}
)

func (e *Policy) GetType() string {
	return "nimona.io/stream.Policy"
}

func (e *Policy) ToObject() object.Object {
	m := map[string]interface{}{}
	m["@type:s"] = "nimona.io/stream.Policy"
	if len(e.Subjects) > 0 {
		m["subjects:as"] = e.Subjects
	}
	if len(e.Resources) > 0 {
		m["resources:as"] = e.Resources
	}
	if len(e.Conditions) > 0 {
		m["conditions:as"] = e.Conditions
	}
	m["action:s"] = e.Action
	return object.Object(m)
}

func (e *Policy) FromObject(o object.Object) error {
	b, _ := json.Marshal(map[string]interface{}(o))
	return json.Unmarshal(b, e)
}

func (e *StreamRequest) GetType() string {
	return "nimona.io/stream.StreamRequest"
}

func (e *StreamRequest) ToObject() object.Object {
	m := map[string]interface{}{}
	m["@type:s"] = "nimona.io/stream.StreamRequest"
	m["nonce:s"] = e.Nonce
	m["stream:s"] = e.Stream
	if e.Signature != nil {
		m["@signature:o"] = e.Signature.ToObject().ToMap()
	}
	m["@identity:s"] = e.Identity
	return object.Object(m)
}

func (e *StreamRequest) FromObject(o object.Object) error {
	b, _ := json.Marshal(map[string]interface{}(o))
	return json.Unmarshal(b, e)
}

func (e *StreamResponse) GetType() string {
	return "nimona.io/stream.StreamResponse"
}

func (e *StreamResponse) ToObject() object.Object {
	m := map[string]interface{}{}
	m["@type:s"] = "nimona.io/stream.StreamResponse"
	m["nonce:s"] = e.Nonce
	m["stream:s"] = e.Stream
	if len(e.Children) > 0 {
		m["children:as"] = e.Children
	}
	if e.Signature != nil {
		m["@signature:o"] = e.Signature.ToObject().ToMap()
	}
	m["@identity:s"] = e.Identity
	return object.Object(m)
}

func (e *StreamResponse) FromObject(o object.Object) error {
	b, _ := json.Marshal(map[string]interface{}(o))
	return json.Unmarshal(b, e)
}
