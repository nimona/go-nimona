// Code generated by nimona.io/tools/codegen. DO NOT EDIT.

package stream

import (
	object "nimona.io/pkg/object"
)

type (
	Policy struct {
		Metadata   object.Metadata `nimona:"metadata:m,omitempty"`
		Subjects   []string        `nimona:"subjects:as,omitempty"`
		Resources  []string        `nimona:"resources:as,omitempty"`
		Conditions []string        `nimona:"conditions:as,omitempty"`
		Action     string          `nimona:"action:s,omitempty"`
	}
	Request struct {
		Metadata  object.Metadata `nimona:"metadata:m,omitempty"`
		RequestID string          `nimona:"requestID:s,omitempty"`
		RootHash  object.Hash     `nimona:"rootHash:r,omitempty"`
	}
	Response struct {
		Metadata  object.Metadata `nimona:"metadata:m,omitempty"`
		RequestID string          `nimona:"requestID:s,omitempty"`
		RootHash  object.Hash     `nimona:"rootHash:r,omitempty"`
		Leaves    []object.Hash   `nimona:"leaves:ar,omitempty"`
	}
	Announcement struct {
		Metadata     object.Metadata `nimona:"metadata:m,omitempty"`
		StreamHash   object.Hash     `nimona:"streamHash:r,omitempty"`
		ObjectHashes []object.Hash   `nimona:"objectHashes:ar,omitempty"`
	}
	Subscription struct {
		Metadata   object.Metadata `nimona:"metadata:m,omitempty"`
		RootHashes []object.Hash   `nimona:"rootHashes:ar,omitempty"`
		Expiry     string          `nimona:"expiry:s,omitempty"`
	}
)

func (e *Policy) Type() string {
	return "nimona.io/stream.Policy"
}

func (e Policy) ToObject() *object.Object {
	o, err := object.Encode(&e)
	if err != nil {
		panic(err)
	}
	return o
}

func (e *Policy) FromObject(o *object.Object) error {
	return object.Decode(o, e)
}

func (e *Request) Type() string {
	return "nimona.io/stream.Request"
}

func (e Request) ToObject() *object.Object {
	o, err := object.Encode(&e)
	if err != nil {
		panic(err)
	}
	return o
}

func (e *Request) FromObject(o *object.Object) error {
	return object.Decode(o, e)
}

func (e *Response) Type() string {
	return "nimona.io/stream.Response"
}

func (e Response) ToObject() *object.Object {
	o, err := object.Encode(&e)
	if err != nil {
		panic(err)
	}
	return o
}

func (e *Response) FromObject(o *object.Object) error {
	return object.Decode(o, e)
}

func (e *Announcement) Type() string {
	return "nimona.io/stream.Announcement"
}

func (e Announcement) ToObject() *object.Object {
	o, err := object.Encode(&e)
	if err != nil {
		panic(err)
	}
	return o
}

func (e *Announcement) FromObject(o *object.Object) error {
	return object.Decode(o, e)
}

func (e *Subscription) Type() string {
	return "nimona.io/stream.Subscription"
}

func (e Subscription) ToObject() *object.Object {
	o, err := object.Encode(&e)
	if err != nil {
		panic(err)
	}
	return o
}

func (e *Subscription) FromObject(o *object.Object) error {
	return object.Decode(o, e)
}
