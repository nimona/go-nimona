// Code generated by nimona.io/tools/codegen. DO NOT EDIT.

package stream

import (
	"nimona.io/pkg/immutable"
	object "nimona.io/pkg/object"
)

type (
	Policy struct {
		Header     object.Header
		Subjects   []string
		Resources  []string
		Conditions []string
		Action     string
	}
	Request struct {
		Header object.Header
		Nonce  string
		Stream object.Hash
		Leaves []object.Hash
	}
	Response struct {
		Header   object.Header
		Nonce    string
		Stream   object.Hash
		Children []object.Hash
	}
	ObjectRequest struct {
		Header  object.Header
		Nonce   string
		Stream  object.Hash
		Objects []object.Hash
	}
	ObjectResponse struct {
		Header  object.Header
		Nonce   string
		Stream  object.Hash
		Objects []*object.Object
	}
	Announcement struct {
		Header object.Header
		Nonce  string
		Stream object.Hash
		Leaves []object.Hash
	}
)

func (e Policy) GetType() string {
	return "nimona.io/stream.Policy"
}

func (e Policy) GetSchema() *object.SchemaObject {
	return &object.SchemaObject{
		Properties: []*object.SchemaProperty{
			&object.SchemaProperty{
				Name:       "subjects",
				Type:       "string",
				Hint:       "s",
				IsRepeated: true,
				IsOptional: false,
			},
			&object.SchemaProperty{
				Name:       "resources",
				Type:       "string",
				Hint:       "s",
				IsRepeated: true,
				IsOptional: false,
			},
			&object.SchemaProperty{
				Name:       "conditions",
				Type:       "string",
				Hint:       "s",
				IsRepeated: true,
				IsOptional: false,
			},
			&object.SchemaProperty{
				Name:       "action",
				Type:       "string",
				Hint:       "s",
				IsRepeated: false,
				IsOptional: false,
			},
		},
	}
}

func (e Policy) ToObject() object.Object {
	d := map[string]interface{}{}
	if len(e.Subjects) > 0 {
		d["subjects:as"] = e.Subjects
	}
	if len(e.Resources) > 0 {
		d["resources:as"] = e.Resources
	}
	if len(e.Conditions) > 0 {
		d["conditions:as"] = e.Conditions
	}
	if e.Action != "" {
		d["action:s"] = e.Action
	}
	// if schema := e.GetSchema(); schema != nil {
	// 	m["_schema:o"] = schema.ToObject().ToMap()
	// }
	o := object.Object{
		Header: e.Header,
		Data:   immutable.AnyToValue(":o", d).(immutable.Map),
	}
	o.SetType("nimona.io/stream.Policy")
	return o
}

func (e *Policy) FromObject(o object.Object) error {
	e.Header = o.Header
	if v := o.Data.Value("subjects:as"); v != nil && v.IsList() {
		m := v.PrimitiveHinted().([]string)
		e.Subjects = make([]string, len(m))
		for i, iv := range m {
			e.Subjects[i] = string(iv)
		}
	}
	if v := o.Data.Value("resources:as"); v != nil && v.IsList() {
		m := v.PrimitiveHinted().([]string)
		e.Resources = make([]string, len(m))
		for i, iv := range m {
			e.Resources[i] = string(iv)
		}
	}
	if v := o.Data.Value("conditions:as"); v != nil && v.IsList() {
		m := v.PrimitiveHinted().([]string)
		e.Conditions = make([]string, len(m))
		for i, iv := range m {
			e.Conditions[i] = string(iv)
		}
	}
	if v := o.Data.Value("action:s"); v != nil {
		e.Action = string(v.PrimitiveHinted().(string))
	}
	return nil
}

func (e Request) GetType() string {
	return "nimona.io/stream.Request"
}

func (e Request) GetSchema() *object.SchemaObject {
	return &object.SchemaObject{
		Properties: []*object.SchemaProperty{
			&object.SchemaProperty{
				Name:       "nonce",
				Type:       "string",
				Hint:       "s",
				IsRepeated: false,
				IsOptional: false,
			},
			&object.SchemaProperty{
				Name:       "stream",
				Type:       "nimona.io/object.Hash",
				Hint:       "s",
				IsRepeated: false,
				IsOptional: false,
			},
			&object.SchemaProperty{
				Name:       "leaves",
				Type:       "nimona.io/object.Hash",
				Hint:       "s",
				IsRepeated: true,
				IsOptional: false,
			},
		},
	}
}

func (e Request) ToObject() object.Object {
	d := map[string]interface{}{}
	if e.Nonce != "" {
		d["nonce:s"] = e.Nonce
	}
	if e.Stream != "" {
		d["stream:s"] = e.Stream
	}
	if len(e.Leaves) > 0 {
		d["leaves:as"] = e.Leaves
	}
	// if schema := e.GetSchema(); schema != nil {
	// 	m["_schema:o"] = schema.ToObject().ToMap()
	// }
	o := object.Object{
		Header: e.Header,
		Data:   immutable.AnyToValue(":o", d).(immutable.Map),
	}
	o.SetType("nimona.io/stream.Request")
	return o
}

func (e *Request) FromObject(o object.Object) error {
	e.Header = o.Header
	if v := o.Data.Value("nonce:s"); v != nil {
		e.Nonce = string(v.PrimitiveHinted().(string))
	}
	if v := o.Data.Value("stream:s"); v != nil {
		e.Stream = object.Hash(v.PrimitiveHinted().(string))
	}
	if v := o.Data.Value("leaves:as"); v != nil && v.IsList() {
		m := v.PrimitiveHinted().([]string)
		e.Leaves = make([]object.Hash, len(m))
		for i, iv := range m {
			e.Leaves[i] = object.Hash(iv)
		}
	}
	return nil
}

func (e Response) GetType() string {
	return "nimona.io/stream.Response"
}

func (e Response) GetSchema() *object.SchemaObject {
	return &object.SchemaObject{
		Properties: []*object.SchemaProperty{
			&object.SchemaProperty{
				Name:       "nonce",
				Type:       "string",
				Hint:       "s",
				IsRepeated: false,
				IsOptional: false,
			},
			&object.SchemaProperty{
				Name:       "stream",
				Type:       "nimona.io/object.Hash",
				Hint:       "s",
				IsRepeated: false,
				IsOptional: false,
			},
			&object.SchemaProperty{
				Name:       "children",
				Type:       "nimona.io/object.Hash",
				Hint:       "s",
				IsRepeated: true,
				IsOptional: false,
			},
		},
	}
}

func (e Response) ToObject() object.Object {
	d := map[string]interface{}{}
	if e.Nonce != "" {
		d["nonce:s"] = e.Nonce
	}
	if e.Stream != "" {
		d["stream:s"] = e.Stream
	}
	if len(e.Children) > 0 {
		d["children:as"] = e.Children
	}
	// if schema := e.GetSchema(); schema != nil {
	// 	m["_schema:o"] = schema.ToObject().ToMap()
	// }
	o := object.Object{
		Header: e.Header,
		Data:   immutable.AnyToValue(":o", d).(immutable.Map),
	}
	o.SetType("nimona.io/stream.Response")
	return o
}

func (e *Response) FromObject(o object.Object) error {
	e.Header = o.Header
	if v := o.Data.Value("nonce:s"); v != nil {
		e.Nonce = string(v.PrimitiveHinted().(string))
	}
	if v := o.Data.Value("stream:s"); v != nil {
		e.Stream = object.Hash(v.PrimitiveHinted().(string))
	}
	if v := o.Data.Value("children:as"); v != nil && v.IsList() {
		m := v.PrimitiveHinted().([]string)
		e.Children = make([]object.Hash, len(m))
		for i, iv := range m {
			e.Children[i] = object.Hash(iv)
		}
	}
	return nil
}

func (e ObjectRequest) GetType() string {
	return "nimona.io/stream.ObjectRequest"
}

func (e ObjectRequest) GetSchema() *object.SchemaObject {
	return &object.SchemaObject{
		Properties: []*object.SchemaProperty{
			&object.SchemaProperty{
				Name:       "nonce",
				Type:       "string",
				Hint:       "s",
				IsRepeated: false,
				IsOptional: false,
			},
			&object.SchemaProperty{
				Name:       "stream",
				Type:       "nimona.io/object.Hash",
				Hint:       "s",
				IsRepeated: false,
				IsOptional: false,
			},
			&object.SchemaProperty{
				Name:       "objects",
				Type:       "nimona.io/object.Hash",
				Hint:       "s",
				IsRepeated: true,
				IsOptional: false,
			},
		},
	}
}

func (e ObjectRequest) ToObject() object.Object {
	d := map[string]interface{}{}
	if e.Nonce != "" {
		d["nonce:s"] = e.Nonce
	}
	if e.Stream != "" {
		d["stream:s"] = e.Stream
	}
	if len(e.Objects) > 0 {
		d["objects:as"] = e.Objects
	}
	// if schema := e.GetSchema(); schema != nil {
	// 	m["_schema:o"] = schema.ToObject().ToMap()
	// }
	o := object.Object{
		Header: e.Header,
		Data:   immutable.AnyToValue(":o", d).(immutable.Map),
	}
	o.SetType("nimona.io/stream.ObjectRequest")
	return o
}

func (e *ObjectRequest) FromObject(o object.Object) error {
	e.Header = o.Header
	if v := o.Data.Value("nonce:s"); v != nil {
		e.Nonce = string(v.PrimitiveHinted().(string))
	}
	if v := o.Data.Value("stream:s"); v != nil {
		e.Stream = object.Hash(v.PrimitiveHinted().(string))
	}
	if v := o.Data.Value("objects:as"); v != nil && v.IsList() {
		m := v.PrimitiveHinted().([]string)
		e.Objects = make([]object.Hash, len(m))
		for i, iv := range m {
			e.Objects[i] = object.Hash(iv)
		}
	}
	return nil
}

func (e ObjectResponse) GetType() string {
	return "nimona.io/stream.ObjectResponse"
}

func (e ObjectResponse) GetSchema() *object.SchemaObject {
	return &object.SchemaObject{
		Properties: []*object.SchemaProperty{
			&object.SchemaProperty{
				Name:       "nonce",
				Type:       "string",
				Hint:       "s",
				IsRepeated: false,
				IsOptional: false,
			},
			&object.SchemaProperty{
				Name:       "stream",
				Type:       "nimona.io/object.Hash",
				Hint:       "s",
				IsRepeated: false,
				IsOptional: false,
			},
			&object.SchemaProperty{
				Name:       "objects",
				Type:       "nimona.io/object.Object",
				Hint:       "o",
				IsRepeated: true,
				IsOptional: false,
			},
		},
	}
}

func (e ObjectResponse) ToObject() object.Object {
	d := map[string]interface{}{}
	if e.Nonce != "" {
		d["nonce:s"] = e.Nonce
	}
	if e.Stream != "" {
		d["stream:s"] = e.Stream
	}
	if len(e.Objects) > 0 {
		d["objects:ao"] = func() []interface{} {
			a := make([]interface{}, len(e.Objects))
			for i, v := range e.Objects {
				a[i] = v.ToObject().ToMap()
			}
			return a
		}()
	}
	// if schema := e.GetSchema(); schema != nil {
	// 	m["_schema:o"] = schema.ToObject().ToMap()
	// }
	o := object.Object{
		Header: e.Header,
		Data:   immutable.AnyToValue(":o", d).(immutable.Map),
	}
	o.SetType("nimona.io/stream.ObjectResponse")
	return o
}

func (e *ObjectResponse) FromObject(o object.Object) error {
	e.Header = o.Header
	if v := o.Data.Value("nonce:s"); v != nil {
		e.Nonce = string(v.PrimitiveHinted().(string))
	}
	if v := o.Data.Value("stream:s"); v != nil {
		e.Stream = object.Hash(v.PrimitiveHinted().(string))
	}
	if v := o.Data.Value("objects:ao"); v != nil && v.IsList() {
		m := v.PrimitiveHinted().([]interface{})
		e.Objects = make([]*object.Object, len(m))
		for i, iv := range m {
			eo := object.FromMap(iv.(map[string]interface{}))
			e.Objects[i] = &eo
		}
	}
	return nil
}

func (e Announcement) GetType() string {
	return "nimona.io/stream.Announcement"
}

func (e Announcement) GetSchema() *object.SchemaObject {
	return &object.SchemaObject{
		Properties: []*object.SchemaProperty{
			&object.SchemaProperty{
				Name:       "nonce",
				Type:       "string",
				Hint:       "s",
				IsRepeated: false,
				IsOptional: false,
			},
			&object.SchemaProperty{
				Name:       "stream",
				Type:       "nimona.io/object.Hash",
				Hint:       "s",
				IsRepeated: false,
				IsOptional: false,
			},
			&object.SchemaProperty{
				Name:       "leaves",
				Type:       "nimona.io/object.Hash",
				Hint:       "s",
				IsRepeated: true,
				IsOptional: false,
			},
		},
	}
}

func (e Announcement) ToObject() object.Object {
	d := map[string]interface{}{}
	if e.Nonce != "" {
		d["nonce:s"] = e.Nonce
	}
	if e.Stream != "" {
		d["stream:s"] = e.Stream
	}
	if len(e.Leaves) > 0 {
		d["leaves:as"] = e.Leaves
	}
	// if schema := e.GetSchema(); schema != nil {
	// 	m["_schema:o"] = schema.ToObject().ToMap()
	// }
	o := object.Object{
		Header: e.Header,
		Data:   immutable.AnyToValue(":o", d).(immutable.Map),
	}
	o.SetType("nimona.io/stream.Announcement")
	return o
}

func (e *Announcement) FromObject(o object.Object) error {
	e.Header = o.Header
	if v := o.Data.Value("nonce:s"); v != nil {
		e.Nonce = string(v.PrimitiveHinted().(string))
	}
	if v := o.Data.Value("stream:s"); v != nil {
		e.Stream = object.Hash(v.PrimitiveHinted().(string))
	}
	if v := o.Data.Value("leaves:as"); v != nil && v.IsList() {
		m := v.PrimitiveHinted().([]string)
		e.Leaves = make([]object.Hash, len(m))
		for i, iv := range m {
			e.Leaves[i] = object.Hash(iv)
		}
	}
	return nil
}
