// Code generated by nimona.io/tools/codegen. DO NOT EDIT.

package stream

import (
	object "nimona.io/pkg/object"
	tilde "nimona.io/pkg/tilde"
)

const PolicyType = "nimona.io/stream.Policy"

type Policy struct {
	Metadata   object.Metadata `nimona:"@metadata:m,type=nimona.io/stream.Policy"`
	Subjects   []string        `nimona:"subjects:as"`
	Resources  []string        `nimona:"resources:as"`
	Conditions []string        `nimona:"conditions:as"`
	Action     string          `nimona:"action:s"`
}

const RequestType = "nimona.io/stream.Request"

type Request struct {
	Metadata  object.Metadata `nimona:"@metadata:m,type=nimona.io/stream.Request"`
	RequestID string          `nimona:"requestID:s"`
	RootHash  tilde.Digest    `nimona:"rootHash:r"`
}

const ResponseType = "nimona.io/stream.Response"

type Response struct {
	Metadata  object.Metadata `nimona:"@metadata:m,type=nimona.io/stream.Response"`
	RequestID string          `nimona:"requestID:s"`
	RootHash  tilde.Digest    `nimona:"rootHash:r"`
	Leaves    []tilde.Digest  `nimona:"leaves:ar"`
}

const AnnouncementType = "nimona.io/stream.Announcement"

type Announcement struct {
	Metadata     object.Metadata `nimona:"@metadata:m,type=nimona.io/stream.Announcement"`
	StreamHash   tilde.Digest    `nimona:"streamHash:r"`
	ObjectHashes []tilde.Digest  `nimona:"objectHashes:ar"`
}

const SubscriptionType = "nimona.io/stream.Subscription"

type Subscription struct {
	Metadata   object.Metadata `nimona:"@metadata:m,type=nimona.io/stream.Subscription"`
	RootHashes []tilde.Digest  `nimona:"rootHashes:ar"`
	Expiry     string          `nimona:"expiry:s"`
}
