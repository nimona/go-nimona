// Code generated by nimona.io/tools/codegen. DO NOT EDIT.

package stream

import (
	chore "nimona.io/pkg/chore"
	object "nimona.io/pkg/object"
)

type (
	Policy struct {
		Metadata   object.Metadata `nimona:"@metadata:m"`
		Subjects   []string        `nimona:"subjects:as"`
		Resources  []string        `nimona:"resources:as"`
		Conditions []string        `nimona:"conditions:as"`
		Action     string          `nimona:"action:s"`
	}
	Request struct {
		Metadata  object.Metadata `nimona:"@metadata:m"`
		RequestID string          `nimona:"requestID:s"`
		RootHash  chore.Hash      `nimona:"rootHash:s"`
	}
	Response struct {
		Metadata  object.Metadata `nimona:"@metadata:m"`
		RequestID string          `nimona:"requestID:s"`
		RootHash  chore.Hash      `nimona:"rootHash:s"`
		Leaves    []chore.Hash    `nimona:"leaves:as"`
	}
	Announcement struct {
		Metadata     object.Metadata `nimona:"@metadata:m"`
		StreamHash   chore.Hash      `nimona:"streamHash:s"`
		ObjectHashes []chore.Hash    `nimona:"objectHashes:as"`
	}
	Subscription struct {
		Metadata   object.Metadata `nimona:"@metadata:m"`
		RootHashes []chore.Hash    `nimona:"rootHashes:as"`
		Expiry     string          `nimona:"expiry:s"`
	}
)

func (e *Policy) Type() string {
	return "nimona.io/stream.Policy"
}

func (e *Request) Type() string {
	return "nimona.io/stream.Request"
}

func (e *Response) Type() string {
	return "nimona.io/stream.Response"
}

func (e *Announcement) Type() string {
	return "nimona.io/stream.Announcement"
}

func (e *Subscription) Type() string {
	return "nimona.io/stream.Subscription"
}
