// Code generated by nimona.io/tools/codegen. DO NOT EDIT.

package exchange

import (
	crypto "nimona.io/pkg/crypto"
	"nimona.io/pkg/immutable"
	object "nimona.io/pkg/object"
)

type (
	ObjectRequest struct {
		Header     object.Header
		ObjectHash object.Hash
	}
	DataForward struct {
		Header    object.Header
		Recipient crypto.PublicKey
		Data      []byte
	}
)

func (e ObjectRequest) GetType() string {
	return "nimona.io/exchange.ObjectRequest"
}

func (e ObjectRequest) GetSchema() *object.SchemaObject {
	return &object.SchemaObject{
		Properties: []*object.SchemaProperty{
			&object.SchemaProperty{
				Name:       "objectHash",
				Type:       "nimona.io/object.Hash",
				Hint:       "s",
				IsRepeated: false,
				IsOptional: false,
			},
		},
	}
}

func (e ObjectRequest) ToObject() object.Object {
	d := map[string]interface{}{}
	if e.ObjectHash != "" {
		d["objectHash:s"] = e.ObjectHash
	}
	// if schema := e.GetSchema(); schema != nil {
	// 	m["_schema:o"] = schema.ToObject().ToMap()
	// }
	o := object.Object{
		Header: e.Header,
		Data:   immutable.AnyToValue(":o", d).(immutable.Map),
	}
	o.SetType("nimona.io/exchange.ObjectRequest")
	return o
}

func (e *ObjectRequest) FromObject(o object.Object) error {
	e.Header = o.Header
	if v := o.Data.Value("objectHash:s"); v != nil {
		e.ObjectHash = object.Hash(v.PrimitiveHinted().(string))
	}
	return nil
}

func (e DataForward) GetType() string {
	return "nimona.io/exchange.DataForward"
}

func (e DataForward) GetSchema() *object.SchemaObject {
	return &object.SchemaObject{
		Properties: []*object.SchemaProperty{
			&object.SchemaProperty{
				Name:       "recipient",
				Type:       "nimona.io/crypto.PublicKey",
				Hint:       "s",
				IsRepeated: false,
				IsOptional: false,
			},
			&object.SchemaProperty{
				Name:       "data",
				Type:       "data",
				Hint:       "d",
				IsRepeated: false,
				IsOptional: false,
			},
		},
	}
}

func (e DataForward) ToObject() object.Object {
	d := map[string]interface{}{}
	if e.Recipient != "" {
		d["recipient:s"] = e.Recipient
	}
	if len(e.Data) != 0 {
		d["data:d"] = e.Data
	}
	// if schema := e.GetSchema(); schema != nil {
	// 	m["_schema:o"] = schema.ToObject().ToMap()
	// }
	o := object.Object{
		Header: e.Header,
		Data:   immutable.AnyToValue(":o", d).(immutable.Map),
	}
	o.SetType("nimona.io/exchange.DataForward")
	return o
}

func (e *DataForward) FromObject(o object.Object) error {
	e.Header = o.Header
	if v := o.Data.Value("recipient:s"); v != nil {
		e.Recipient = crypto.PublicKey(v.PrimitiveHinted().(string))
	}
	if v := o.Data.Value("data:d"); v != nil {
		e.Data = []byte(v.PrimitiveHinted().([]byte))
	}
	return nil
}
