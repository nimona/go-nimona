// Code generated by nimona.io/tools/codegen. DO NOT EDIT.

package exchange

import (
	json "encoding/json"

	crypto "nimona.io/pkg/crypto"
	object "nimona.io/pkg/object"
)

type (
	ObjectRequest struct {
		ObjectHash object.Hash        `json:"objectHash:s,omitempty"`
		Signature  *object.Signature  `json:"_signature:o,omitempty"`
		Owners     []crypto.PublicKey `json:"@owners:as,omitempty"`
	}
	DataForward struct {
		Recipient crypto.PublicKey   `json:"recipient:s,omitempty"`
		Data      []byte             `json:"data:d,omitempty"`
		Signature *object.Signature  `json:"_signature:o,omitempty"`
		Owners    []crypto.PublicKey `json:"@owners:as,omitempty"`
	}
)

func (e ObjectRequest) GetType() string {
	return "nimona.io/exchange.ObjectRequest"
}
func (e ObjectRequest) GetSchema() *object.SchemaObject {
	return &object.SchemaObject{
		Properties: []*object.SchemaProperty{
			&object.SchemaProperty{
				Name:       "objectHash",
				Type:       "nimona.io/object.Hash",
				Hint:       "s",
				IsRepeated: false,
				IsOptional: false,
			},
			&object.SchemaProperty{
				Name:       "_signature",
				Type:       "nimona.io/object.Signature",
				Hint:       "o",
				IsRepeated: false,
				IsOptional: false,
			},
			&object.SchemaProperty{
				Name:       "@owners",
				Type:       "nimona.io/crypto.PublicKey",
				Hint:       "s",
				IsRepeated: true,
				IsOptional: false,
			},
		},
	}
}

func (e ObjectRequest) ToObject() object.Object {
	m := map[string]interface{}{}
	m["@type:s"] = "nimona.io/exchange.ObjectRequest"
	if e.ObjectHash != "" {
		m["objectHash:s"] = e.ObjectHash
	}
	if e.Signature != nil {
		m["_signature:o"] = e.Signature.ToObject().ToMap()
	}
	if len(e.Owners) > 0 {
		m["@owners:as"] = e.Owners
	}
	if schema := e.GetSchema(); schema != nil {
		m["_schema:o"] = schema.ToObject().ToMap()
	}
	return object.Object(m)
}

func (e *ObjectRequest) FromObject(o object.Object) error {
	b, _ := json.Marshal(map[string]interface{}(o))
	return json.Unmarshal(b, e)
}

func (e DataForward) GetType() string {
	return "nimona.io/exchange.DataForward"
}
func (e DataForward) GetSchema() *object.SchemaObject {
	return &object.SchemaObject{
		Properties: []*object.SchemaProperty{
			&object.SchemaProperty{
				Name:       "recipient",
				Type:       "nimona.io/crypto.PublicKey",
				Hint:       "s",
				IsRepeated: false,
				IsOptional: false,
			},
			&object.SchemaProperty{
				Name:       "data",
				Type:       "data",
				Hint:       "d",
				IsRepeated: false,
				IsOptional: false,
			},
			&object.SchemaProperty{
				Name:       "_signature",
				Type:       "nimona.io/object.Signature",
				Hint:       "o",
				IsRepeated: false,
				IsOptional: false,
			},
			&object.SchemaProperty{
				Name:       "@owners",
				Type:       "nimona.io/crypto.PublicKey",
				Hint:       "s",
				IsRepeated: true,
				IsOptional: false,
			},
		},
	}
}

func (e DataForward) ToObject() object.Object {
	m := map[string]interface{}{}
	m["@type:s"] = "nimona.io/exchange.DataForward"
	if e.Recipient != "" {
		m["recipient:s"] = e.Recipient
	}
	if len(e.Data) != 0 {
		m["data:d"] = e.Data
	}
	if e.Signature != nil {
		m["_signature:o"] = e.Signature.ToObject().ToMap()
	}
	if len(e.Owners) > 0 {
		m["@owners:as"] = e.Owners
	}
	if schema := e.GetSchema(); schema != nil {
		m["_schema:o"] = schema.ToObject().ToMap()
	}
	return object.Object(m)
}

func (e *DataForward) FromObject(o object.Object) error {
	b, _ := json.Marshal(map[string]interface{}(o))
	return json.Unmarshal(b, e)
}
