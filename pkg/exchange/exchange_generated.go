// Code generated by nimona.io/tools/codegen. DO NOT EDIT.

package exchange

import (
	json "encoding/json"

	crypto "nimona.io/pkg/crypto"
	object "nimona.io/pkg/object"
)

type (
	ObjectRequest struct {
		ObjectHash string              `json:"objectHash:s"`
		Signature  *crypto.Signature   `json:"@signature:o"`
		Authors    []*crypto.PublicKey `json:"@authors:ao"`
	}
	ObjectForward struct {
		Recipient string              `json:"Recipient:s"`
		FwObject  *object.Object      `json:"FwObject:o"`
		Signature *crypto.Signature   `json:"@signature:o"`
		Authors   []*crypto.PublicKey `json:"@authors:ao"`
	}
)

func (e *ObjectRequest) EventName() string {
	return "ObjectRequest"
}

func (e *ObjectRequest) GetType() string {
	return "nimona.io/exchange.ObjectRequest"
}

func (e *ObjectRequest) ToObject() object.Object {
	m := map[string]interface{}{
		"@ctx:s":    "nimona.io/exchange.ObjectRequest",
		"@domain:s": "nimona.io/exchange",
		"@event:s":  "ObjectRequest",
	}
	b, _ := json.Marshal(e)
	json.Unmarshal(b, &m)
	return object.Object(m)
}

func (e *ObjectRequest) FromObject(o object.Object) error {
	b, _ := json.Marshal(map[string]interface{}(o))
	return json.Unmarshal(b, e)
}

func (e *ObjectForward) EventName() string {
	return "ObjectForward"
}

func (e *ObjectForward) GetType() string {
	return "nimona.io/exchange.ObjectForward"
}

func (e *ObjectForward) ToObject() object.Object {
	m := map[string]interface{}{
		"@ctx:s":    "nimona.io/exchange.ObjectForward",
		"@domain:s": "nimona.io/exchange",
		"@event:s":  "ObjectForward",
	}
	b, _ := json.Marshal(e)
	json.Unmarshal(b, &m)
	return object.Object(m)
}

func (e *ObjectForward) FromObject(o object.Object) error {
	b, _ := json.Marshal(map[string]interface{}(o))
	return json.Unmarshal(b, e)
}
