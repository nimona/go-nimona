// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package exchange

import (
	"sync"

	"nimona.io/pkg/crypto"
)

type (
	outboxes string // nolint
	// OutboxesMap -
	OutboxesMap struct {
		m sync.Map
	}
)

// NewOutboxesMap constructs a new SyncMap
func NewOutboxesMap() *OutboxesMap {
	return &OutboxesMap{}
}

// GetOrPut -
func (m *OutboxesMap) GetOrPut(k crypto.PublicKey, v *outbox) (*outbox, bool) {
	nv, ok := m.m.LoadOrStore(k, v)
	return nv.(*outbox), ok
}

// Put -
func (m *OutboxesMap) Put(k crypto.PublicKey, v *outbox) {
	m.m.Store(k, v)
}

// Get -
func (m *OutboxesMap) Get(k crypto.PublicKey) (*outbox, bool) {
	i, ok := m.m.Load(k)
	if !ok {
		return nil, false
	}

	v, ok := i.(*outbox)
	if !ok {
		return nil, false
	}

	return v, true
}

// Delete -
func (m *OutboxesMap) Delete(k crypto.PublicKey) {
	m.m.Delete(k)
}

// Range -
func (m *OutboxesMap) Range(i func(k crypto.PublicKey, v *outbox) bool) {
	m.m.Range(func(k, v interface{}) bool {
		return i(k.(crypto.PublicKey), v.(*outbox))
	})
}
