// Code generated by nimona.io/tools/codegen. DO NOT EDIT.

package feed

import (
	object "nimona.io/pkg/object"
)

type (
	FeedStreamRoot struct {
		Metadata   object.Metadata `nimona:"metadata:m,omitempty"`
		ObjectType string          `nimona:"objectType:s,omitempty"`
		Datetime   string          `nimona:"datetime:s,omitempty"`
	}
	Added struct {
		Metadata   object.Metadata `nimona:"metadata:m,omitempty"`
		ObjectHash []object.Hash   `nimona:"objectHash:ar,omitempty"`
		Sequence   int64           `nimona:"sequence:i,omitempty"`
		Datetime   string          `nimona:"datetime:s,omitempty"`
	}
	Removed struct {
		Metadata   object.Metadata `nimona:"metadata:m,omitempty"`
		ObjectHash []object.Hash   `nimona:"objectHash:ar,omitempty"`
		Sequence   int64           `nimona:"sequence:i,omitempty"`
		Datetime   string          `nimona:"datetime:s,omitempty"`
	}
)

func (e *FeedStreamRoot) Type() string {
	return "stream:nimona.io/feed"
}

func (e FeedStreamRoot) ToObject() *object.Object {
	r := &object.Object{
		Type:     "stream:nimona.io/feed",
		Metadata: e.Metadata,
		Data:     map[string]interface{}{},
	}
	r.Data["objectType:s"] = e.ObjectType
	r.Data["datetime:s"] = e.Datetime
	return r
}

func (e *FeedStreamRoot) FromObject(o *object.Object) error {
	return object.Decode(o, e)
}

func (e *Added) Type() string {
	return "event:nimona.io/feed.Added"
}

func (e Added) ToObject() *object.Object {
	r := &object.Object{
		Type:     "event:nimona.io/feed.Added",
		Metadata: e.Metadata,
		Data:     map[string]interface{}{},
	}
	if len(e.ObjectHash) > 0 {
		// rv := make([]object.Hash, len(e.ObjectHash))
		// for i, v := range e.ObjectHash {
		// 	rv[i] = v
		// }
		r.Data["objectHash:ar"] = e.ObjectHash
	}
	r.Data["sequence:i"] = e.Sequence
	r.Data["datetime:s"] = e.Datetime
	return r
}

func (e *Added) FromObject(o *object.Object) error {
	return object.Decode(o, e)
}

func (e *Removed) Type() string {
	return "event:nimona.io/feed.Removed"
}

func (e Removed) ToObject() *object.Object {
	r := &object.Object{
		Type:     "event:nimona.io/feed.Removed",
		Metadata: e.Metadata,
		Data:     map[string]interface{}{},
	}
	if len(e.ObjectHash) > 0 {
		// rv := make([]object.Hash, len(e.ObjectHash))
		// for i, v := range e.ObjectHash {
		// 	rv[i] = v
		// }
		r.Data["objectHash:ar"] = e.ObjectHash
	}
	r.Data["sequence:i"] = e.Sequence
	r.Data["datetime:s"] = e.Datetime
	return r
}

func (e *Removed) FromObject(o *object.Object) error {
	return object.Decode(o, e)
}
