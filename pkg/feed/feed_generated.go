// Code generated by nimona.io/tools/codegen. DO NOT EDIT.

package feed

import (
	object "nimona.io/pkg/object"
)

type (
	FeedStreamRoot struct {
		Metadata   object.Metadata `nimona:"metadata:m"`
		ObjectType string          `nimona:"objectType:s,omitempty"`
		Datetime   string          `nimona:"datetime:s,omitempty"`
	}
	Added struct {
		Metadata   object.Metadata `nimona:"metadata:m"`
		ObjectHash []object.Hash   `nimona:"objectHash:as,omitempty"`
		Sequence   int64           `nimona:"sequence:i,omitempty"`
		Datetime   string          `nimona:"datetime:s,omitempty"`
	}
	Removed struct {
		Metadata   object.Metadata `nimona:"metadata:m"`
		ObjectHash []object.Hash   `nimona:"objectHash:as,omitempty"`
		Sequence   int64           `nimona:"sequence:i,omitempty"`
		Datetime   string          `nimona:"datetime:s,omitempty"`
	}
)

func (e *FeedStreamRoot) Type() string {
	return "stream:nimona.io/feed"
}

func (e FeedStreamRoot) ToObject() *object.Object {
	o, err := object.Encode(&e)
	if err != nil {
		panic(err)
	}
	return o
}

func (e *FeedStreamRoot) FromObject(o *object.Object) error {
	return object.Decode(o, e)
}

func (e *Added) Type() string {
	return "event:nimona.io/feed.Added"
}

func (e Added) ToObject() *object.Object {
	o, err := object.Encode(&e)
	if err != nil {
		panic(err)
	}
	return o
}

func (e *Added) FromObject(o *object.Object) error {
	return object.Decode(o, e)
}

func (e *Removed) Type() string {
	return "event:nimona.io/feed.Removed"
}

func (e Removed) ToObject() *object.Object {
	o, err := object.Encode(&e)
	if err != nil {
		panic(err)
	}
	return o
}

func (e *Removed) FromObject(o *object.Object) error {
	return object.Decode(o, e)
}
