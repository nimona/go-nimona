// Code generated by MockGen. DO NOT EDIT.
// Source: keymanager.go

// Package keystreammock is a generated GoMock package.
package keystreammock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	context "nimona.io/pkg/context"
	keystream "nimona.io/pkg/keystream"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// GetController mocks base method.
func (m *MockManager) GetController() (keystream.Controller, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetController")
	ret0, _ := ret[0].(keystream.Controller)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetController indicates an expected call of GetController.
func (mr *MockManagerMockRecorder) GetController() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetController", reflect.TypeOf((*MockManager)(nil).GetController))
}

// HandleDelegationRequest mocks base method.
func (m *MockManager) HandleDelegationRequest(arg0 context.Context, arg1 *keystream.DelegationRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleDelegationRequest", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleDelegationRequest indicates an expected call of HandleDelegationRequest.
func (mr *MockManagerMockRecorder) HandleDelegationRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleDelegationRequest", reflect.TypeOf((*MockManager)(nil).HandleDelegationRequest), arg0, arg1)
}

// NewController mocks base method.
func (m *MockManager) NewController(arg0 *keystream.DelegatorSeal) (keystream.Controller, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewController", arg0)
	ret0, _ := ret[0].(keystream.Controller)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewController indicates an expected call of NewController.
func (mr *MockManagerMockRecorder) NewController(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewController", reflect.TypeOf((*MockManager)(nil).NewController), arg0)
}

// NewDelegationRequest mocks base method.
func (m *MockManager) NewDelegationRequest(arg0 context.Context, arg1 keystream.DelegationRequestVendor, arg2 keystream.Permissions) (*keystream.DelegationRequest, chan keystream.Controller, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewDelegationRequest", arg0, arg1, arg2)
	ret0, _ := ret[0].(*keystream.DelegationRequest)
	ret1, _ := ret[1].(chan keystream.Controller)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// NewDelegationRequest indicates an expected call of NewDelegationRequest.
func (mr *MockManagerMockRecorder) NewDelegationRequest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDelegationRequest", reflect.TypeOf((*MockManager)(nil).NewDelegationRequest), arg0, arg1, arg2)
}

// WaitForController mocks base method.
func (m *MockManager) WaitForController(arg0 context.Context) (keystream.Controller, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForController", arg0)
	ret0, _ := ret[0].(keystream.Controller)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitForController indicates an expected call of WaitForController.
func (mr *MockManagerMockRecorder) WaitForController(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForController", reflect.TypeOf((*MockManager)(nil).WaitForController), arg0)
}
