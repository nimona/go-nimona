// Code generated by nimona.io/tools/codegen. DO NOT EDIT.

package network

import (
	crypto "nimona.io/pkg/crypto"
	object "nimona.io/pkg/object"
)

type (
	DataForwardRequest struct {
		Metadata  object.Metadata  `nimona:"metadata:m,omitempty"`
		RequestID string           `nimona:"requestID:s,omitempty"`
		Recipient crypto.PublicKey `nimona:"recipient:s,omitempty"`
		Payload   *object.Object   `nimona:"payload:o,omitempty"`
	}
	DataForwardEnvelope struct {
		Metadata object.Metadata  `nimona:"metadata:m,omitempty"`
		Sender   crypto.PublicKey `nimona:"sender:s,omitempty"`
		Data     []byte           `nimona:"data:d,omitempty"`
	}
	DataForwardResponse struct {
		Metadata  object.Metadata `nimona:"metadata:m,omitempty"`
		RequestID string          `nimona:"requestID:s,omitempty"`
		Success   bool            `nimona:"success:b,omitempty"`
	}
)

func (e *DataForwardRequest) Type() string {
	return "nimona.io/network.DataForwardRequest"
}

func (e DataForwardRequest) ToObject() *object.Object {
	r := &object.Object{
		Type:     "nimona.io/network.DataForwardRequest",
		Metadata: e.Metadata,
		Data:     object.Map{},
	}
	// else
	// r.Data["requestID"] = object.String(e.RequestID)
	r.Data["requestID"] = object.String(e.RequestID)
	// else if $member.IsPrimitive
	r.Data["recipient"] = object.String(e.Recipient)
	// else if $member.IsObject
	if e.Payload != nil {
		r.Data["payload"] = e.Payload
	}
	return r
}

func (e *DataForwardRequest) FromObject(o *object.Object) error {
	e.Metadata = o.Metadata
	if v, ok := o.Data["requestID"]; ok {
		if t, ok := v.(object.String); ok {
			e.RequestID = string(t)
		}
	}
	if v, ok := o.Data["recipient"]; ok {
		if t, ok := v.(object.String); ok {
			e.Recipient = crypto.PublicKey(t)
		}
	}
	if v, ok := o.Data["payload"]; ok {
		if t, ok := v.(object.Map); ok {
			e.Payload = object.FromMap(t)
		} else if t, ok := v.(*object.Object); ok {
			e.Payload = t
		}
	}
	return nil
}

func (e *DataForwardEnvelope) Type() string {
	return "nimona.io/network.DataForwardEnvelope"
}

func (e DataForwardEnvelope) ToObject() *object.Object {
	r := &object.Object{
		Type:     "nimona.io/network.DataForwardEnvelope",
		Metadata: e.Metadata,
		Data:     object.Map{},
	}
	// else if $member.IsPrimitive
	r.Data["sender"] = object.String(e.Sender)
	// else
	// r.Data["data"] = object.Data(e.Data)
	r.Data["data"] = object.Data(e.Data)
	return r
}

func (e *DataForwardEnvelope) FromObject(o *object.Object) error {
	e.Metadata = o.Metadata
	if v, ok := o.Data["sender"]; ok {
		if t, ok := v.(object.String); ok {
			e.Sender = crypto.PublicKey(t)
		}
	}
	if v, ok := o.Data["data"]; ok {
		if t, ok := v.(object.Data); ok {
			e.Data = []byte(t)
		}
	}
	return nil
}

func (e *DataForwardResponse) Type() string {
	return "nimona.io/network.DataForwardResponse"
}

func (e DataForwardResponse) ToObject() *object.Object {
	r := &object.Object{
		Type:     "nimona.io/network.DataForwardResponse",
		Metadata: e.Metadata,
		Data:     object.Map{},
	}
	// else
	// r.Data["requestID"] = object.String(e.RequestID)
	r.Data["requestID"] = object.String(e.RequestID)
	// else
	// r.Data["success"] = object.Bool(e.Success)
	r.Data["success"] = object.Bool(e.Success)
	return r
}

func (e *DataForwardResponse) FromObject(o *object.Object) error {
	e.Metadata = o.Metadata
	if v, ok := o.Data["requestID"]; ok {
		if t, ok := v.(object.String); ok {
			e.RequestID = string(t)
		}
	}
	if v, ok := o.Data["success"]; ok {
		if t, ok := v.(object.Bool); ok {
			e.Success = bool(t)
		}
	}
	return nil
}
