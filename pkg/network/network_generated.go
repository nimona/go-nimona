// Code generated by nimona.io/tools/codegen. DO NOT EDIT.

package network

import (
	crypto "nimona.io/pkg/crypto"
	object "nimona.io/pkg/object"
)

type (
	DataForwardRequest struct {
		Metadata  object.Metadata
		RequestID string
		Recipient crypto.PublicKey
		Payload   *object.Object
	}
	DataForwardEnvelope struct {
		Metadata object.Metadata
		Sender   crypto.PublicKey
		Data     []byte
	}
	DataForwardResponse struct {
		Metadata  object.Metadata
		RequestID string
		Success   bool
	}
)

func (e *DataForwardRequest) Type() string {
	return "nimona.io/network.DataForwardRequest"
}

func (e *DataForwardRequest) MarshalMap() (object.Map, error) {
	return e.ToObject().Map(), nil
}

func (e DataForwardRequest) ToObject() *object.Object {
	r := &object.Object{
		Type:     "nimona.io/network.DataForwardRequest",
		Metadata: e.Metadata,
		Data:     object.Map{},
	}
	r.Data["requestID"] = object.String(e.RequestID)
	r.Data["recipient"] = object.String(e.Recipient)
	if e.Payload != nil {
		v, err := e.Payload.MarshalMap()
		if err != nil {
			// TODO error
		} else {
			r.Data["payload"] = object.Map(v)
		}
	}
	return r
}

func (e *DataForwardRequest) UnmarshalMap(m object.Map) error {
	return e.FromObject(object.FromMap(m))
}

func (e *DataForwardRequest) FromObject(o *object.Object) error {
	e.Metadata = o.Metadata
	if v, ok := o.Data["requestID"]; ok {
		if t, ok := v.(object.String); ok {
			e.RequestID = string(t)
		}
	}
	if v, ok := o.Data["recipient"]; ok {
		if t, ok := v.(object.String); ok {
			e.Recipient = crypto.PublicKey(t)
		}
	}
	if v, ok := o.Data["payload"]; ok {
		if ev, ok := v.(object.Map); ok {
			es := &object.Object{}
			if err := es.UnmarshalMap(object.Map(ev)); err != nil {
				// TODO error
			} else {
				e.Payload = es
			}
		}
	}
	return nil
}

func (e *DataForwardEnvelope) Type() string {
	return "nimona.io/network.DataForwardEnvelope"
}

func (e *DataForwardEnvelope) MarshalMap() (object.Map, error) {
	return e.ToObject().Map(), nil
}

func (e DataForwardEnvelope) ToObject() *object.Object {
	r := &object.Object{
		Type:     "nimona.io/network.DataForwardEnvelope",
		Metadata: e.Metadata,
		Data:     object.Map{},
	}
	r.Data["sender"] = object.String(e.Sender)
	r.Data["data"] = object.Data(e.Data)
	return r
}

func (e *DataForwardEnvelope) UnmarshalMap(m object.Map) error {
	return e.FromObject(object.FromMap(m))
}

func (e *DataForwardEnvelope) FromObject(o *object.Object) error {
	e.Metadata = o.Metadata
	if v, ok := o.Data["sender"]; ok {
		if t, ok := v.(object.String); ok {
			e.Sender = crypto.PublicKey(t)
		}
	}
	if v, ok := o.Data["data"]; ok {
		if t, ok := v.(object.Data); ok {
			e.Data = []byte(t)
		}
	}
	return nil
}

func (e *DataForwardResponse) Type() string {
	return "nimona.io/network.DataForwardResponse"
}

func (e *DataForwardResponse) MarshalMap() (object.Map, error) {
	return e.ToObject().Map(), nil
}

func (e DataForwardResponse) ToObject() *object.Object {
	r := &object.Object{
		Type:     "nimona.io/network.DataForwardResponse",
		Metadata: e.Metadata,
		Data:     object.Map{},
	}
	r.Data["requestID"] = object.String(e.RequestID)
	r.Data["success"] = object.Bool(e.Success)
	return r
}

func (e *DataForwardResponse) UnmarshalMap(m object.Map) error {
	return e.FromObject(object.FromMap(m))
}

func (e *DataForwardResponse) FromObject(o *object.Object) error {
	e.Metadata = o.Metadata
	if v, ok := o.Data["requestID"]; ok {
		if t, ok := v.(object.String); ok {
			e.RequestID = string(t)
		}
	}
	if v, ok := o.Data["success"]; ok {
		if t, ok := v.(object.Bool); ok {
			e.Success = bool(t)
		}
	}
	return nil
}
