// Code generated by nimona.io/tools/codegen. DO NOT EDIT.

package hyperspace

import (
	object "nimona.io/pkg/object"
	peer "nimona.io/pkg/peer"
)

type (
	Announcement struct {
		Metadata         object.Metadata      `nimona:"metadata:m,omitempty"`
		Version          int64                `nimona:"version:i,omitempty"`
		ConnectionInfo   *peer.ConnectionInfo `nimona:"connectionInfo:o,omitempty"`
		PeerVector       []uint64             `nimona:"peerVector:au,omitempty"`
		PeerCapabilities []string             `nimona:"peerCapabilities:as,omitempty"`
	}
	LookupRequest struct {
		Metadata            object.Metadata `nimona:"metadata:m,omitempty"`
		Nonce               string          `nimona:"nonce:s,omitempty"`
		QueryVector         []uint64        `nimona:"queryVector:au,omitempty"`
		RequireCapabilities []string        `nimona:"requireCapabilities:as,omitempty"`
	}
	LookupResponse struct {
		Metadata      object.Metadata `nimona:"metadata:m,omitempty"`
		Nonce         string          `nimona:"nonce:s,omitempty"`
		QueryVector   []uint64        `nimona:"queryVector:au,omitempty"`
		Announcements []*Announcement `nimona:"announcements:ao,omitempty"`
	}
)

func (e *Announcement) Type() string {
	return "nimona.io/hyperspace.Announcement"
}

func (e Announcement) ToObject() *object.Object {
	o, err := object.Encode(&e)
	if err != nil {
		panic(err)
	}
	return o
}

func (e *Announcement) FromObject(o *object.Object) error {
	return object.Decode(o, e)
}

func (e *LookupRequest) Type() string {
	return "nimona.io/hyperspace.LookupRequest"
}

func (e LookupRequest) ToObject() *object.Object {
	o, err := object.Encode(&e)
	if err != nil {
		panic(err)
	}
	return o
}

func (e *LookupRequest) FromObject(o *object.Object) error {
	return object.Decode(o, e)
}

func (e *LookupResponse) Type() string {
	return "nimona.io/hyperspace.LookupResponse"
}

func (e LookupResponse) ToObject() *object.Object {
	o, err := object.Encode(&e)
	if err != nil {
		panic(err)
	}
	return o
}

func (e *LookupResponse) FromObject(o *object.Object) error {
	return object.Decode(o, e)
}
