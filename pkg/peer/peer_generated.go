// Code generated by nimona.io/tools/codegen. DO NOT EDIT.

package peer

import (
	crypto "nimona.io/pkg/crypto"
	"nimona.io/pkg/immutable"
	object "nimona.io/pkg/object"
)

type (
	Peer struct {
		Header       object.Header
		Version      int64
		Addresses    []string
		Bloom        []int64
		ContentTypes []string
		Certificates []*object.Certificate
		Relays       []crypto.PublicKey
	}
	LookupRequest struct {
		Header object.Header
		Nonce  string
		Bloom  []int64
	}
	LookupResponse struct {
		Header object.Header
		Nonce  string
		Bloom  []int64
		Peers  []*Peer
	}
)

func (e Peer) GetType() string {
	return "nimona.io/peer.Peer"
}

func (e Peer) GetSchema() *object.SchemaObject {
	return &object.SchemaObject{
		Properties: []*object.SchemaProperty{
			&object.SchemaProperty{
				Name:       "version",
				Type:       "int",
				Hint:       "i",
				IsRepeated: false,
				IsOptional: false,
			},
			&object.SchemaProperty{
				Name:       "addresses",
				Type:       "string",
				Hint:       "s",
				IsRepeated: true,
				IsOptional: false,
			},
			&object.SchemaProperty{
				Name:       "bloom",
				Type:       "int",
				Hint:       "i",
				IsRepeated: true,
				IsOptional: false,
			},
			&object.SchemaProperty{
				Name:       "contentTypes",
				Type:       "string",
				Hint:       "s",
				IsRepeated: true,
				IsOptional: false,
			},
			&object.SchemaProperty{
				Name:       "certificates",
				Type:       "nimona.io/object.Certificate",
				Hint:       "o",
				IsRepeated: true,
				IsOptional: false,
			},
			&object.SchemaProperty{
				Name:       "relays",
				Type:       "nimona.io/crypto.PublicKey",
				Hint:       "s",
				IsRepeated: true,
				IsOptional: false,
			},
		},
	}
}

func (e Peer) ToObject() object.Object {
	d := map[string]interface{}{}
	if e.Version != 0 {
		d["version:i"] = e.Version
	}
	if len(e.Addresses) > 0 {
		d["addresses:as"] = e.Addresses
	}
	if len(e.Bloom) > 0 {
		d["bloom:ai"] = e.Bloom
	}
	if len(e.ContentTypes) > 0 {
		d["contentTypes:as"] = e.ContentTypes
	}
	if len(e.Certificates) > 0 {
		d["certificates:ao"] = func() []interface{} {
			a := make([]interface{}, len(e.Certificates))
			for i, v := range e.Certificates {
				a[i] = v.ToObject().ToMap()
			}
			return a
		}()
	}
	if len(e.Relays) > 0 {
		d["relays:as"] = e.Relays
	}
	// if schema := e.GetSchema(); schema != nil {
	// 	m["_schema:o"] = schema.ToObject().ToMap()
	// }
	o := object.Object{
		Header: e.Header,
		Data:   immutable.AnyToValue(":o", d).(immutable.Map),
	}
	o.SetType("nimona.io/peer.Peer")
	return o
}

func (e *Peer) FromObject(o object.Object) error {
	e.Header = o.Header
	if v := o.Data.Value("version:i"); v != nil {
		e.Version = int64(v.PrimitiveHinted().(int64))
	}
	if v := o.Data.Value("addresses:as"); v != nil && v.IsList() {
		m := v.PrimitiveHinted().([]string)
		e.Addresses = make([]string, len(m))
		for i, iv := range m {
			e.Addresses[i] = string(iv)
		}
	}
	if v := o.Data.Value("bloom:ai"); v != nil && v.IsList() {
		m := v.PrimitiveHinted().([]int64)
		e.Bloom = make([]int64, len(m))
		for i, iv := range m {
			e.Bloom[i] = int64(iv)
		}
	}
	if v := o.Data.Value("contentTypes:as"); v != nil && v.IsList() {
		m := v.PrimitiveHinted().([]string)
		e.ContentTypes = make([]string, len(m))
		for i, iv := range m {
			e.ContentTypes[i] = string(iv)
		}
	}
	if v := o.Data.Value("certificates:ao"); v != nil && v.IsList() {
		m := v.PrimitiveHinted().([]interface{})
		e.Certificates = make([]*object.Certificate, len(m))
		for i, iv := range m {
			es := &object.Certificate{}
			eo := object.FromMap(iv.(map[string]interface{}))
			es.FromObject(eo)
			e.Certificates[i] = es
		}
	}
	if v := o.Data.Value("relays:as"); v != nil && v.IsList() {
		m := v.PrimitiveHinted().([]string)
		e.Relays = make([]crypto.PublicKey, len(m))
		for i, iv := range m {
			e.Relays[i] = crypto.PublicKey(iv)
		}
	}
	return nil
}

func (e LookupRequest) GetType() string {
	return "nimona.io/LookupRequest"
}

func (e LookupRequest) GetSchema() *object.SchemaObject {
	return &object.SchemaObject{
		Properties: []*object.SchemaProperty{
			&object.SchemaProperty{
				Name:       "nonce",
				Type:       "string",
				Hint:       "s",
				IsRepeated: false,
				IsOptional: false,
			},
			&object.SchemaProperty{
				Name:       "bloom",
				Type:       "int",
				Hint:       "i",
				IsRepeated: true,
				IsOptional: false,
			},
		},
	}
}

func (e LookupRequest) ToObject() object.Object {
	d := map[string]interface{}{}
	if e.Nonce != "" {
		d["nonce:s"] = e.Nonce
	}
	if len(e.Bloom) > 0 {
		d["bloom:ai"] = e.Bloom
	}
	// if schema := e.GetSchema(); schema != nil {
	// 	m["_schema:o"] = schema.ToObject().ToMap()
	// }
	o := object.Object{
		Header: e.Header,
		Data:   immutable.AnyToValue(":o", d).(immutable.Map),
	}
	o.SetType("nimona.io/LookupRequest")
	return o
}

func (e *LookupRequest) FromObject(o object.Object) error {
	e.Header = o.Header
	if v := o.Data.Value("nonce:s"); v != nil {
		e.Nonce = string(v.PrimitiveHinted().(string))
	}
	if v := o.Data.Value("bloom:ai"); v != nil && v.IsList() {
		m := v.PrimitiveHinted().([]int64)
		e.Bloom = make([]int64, len(m))
		for i, iv := range m {
			e.Bloom[i] = int64(iv)
		}
	}
	return nil
}

func (e LookupResponse) GetType() string {
	return "nimona.io/LookupResponse"
}

func (e LookupResponse) GetSchema() *object.SchemaObject {
	return &object.SchemaObject{
		Properties: []*object.SchemaProperty{
			&object.SchemaProperty{
				Name:       "nonce",
				Type:       "string",
				Hint:       "s",
				IsRepeated: false,
				IsOptional: false,
			},
			&object.SchemaProperty{
				Name:       "bloom",
				Type:       "int",
				Hint:       "i",
				IsRepeated: true,
				IsOptional: false,
			},
			&object.SchemaProperty{
				Name:       "peers",
				Type:       "nimona.io/peer.Peer",
				Hint:       "o",
				IsRepeated: true,
				IsOptional: false,
			},
		},
	}
}

func (e LookupResponse) ToObject() object.Object {
	d := map[string]interface{}{}
	if e.Nonce != "" {
		d["nonce:s"] = e.Nonce
	}
	if len(e.Bloom) > 0 {
		d["bloom:ai"] = e.Bloom
	}
	if len(e.Peers) > 0 {
		d["peers:ao"] = func() []interface{} {
			a := make([]interface{}, len(e.Peers))
			for i, v := range e.Peers {
				a[i] = v.ToObject().ToMap()
			}
			return a
		}()
	}
	// if schema := e.GetSchema(); schema != nil {
	// 	m["_schema:o"] = schema.ToObject().ToMap()
	// }
	o := object.Object{
		Header: e.Header,
		Data:   immutable.AnyToValue(":o", d).(immutable.Map),
	}
	o.SetType("nimona.io/LookupResponse")
	return o
}

func (e *LookupResponse) FromObject(o object.Object) error {
	e.Header = o.Header
	if v := o.Data.Value("nonce:s"); v != nil {
		e.Nonce = string(v.PrimitiveHinted().(string))
	}
	if v := o.Data.Value("bloom:ai"); v != nil && v.IsList() {
		m := v.PrimitiveHinted().([]int64)
		e.Bloom = make([]int64, len(m))
		for i, iv := range m {
			e.Bloom[i] = int64(iv)
		}
	}
	if v := o.Data.Value("peers:ao"); v != nil && v.IsList() {
		m := v.PrimitiveHinted().([]interface{})
		e.Peers = make([]*Peer, len(m))
		for i, iv := range m {
			es := &Peer{}
			eo := object.FromMap(iv.(map[string]interface{}))
			es.FromObject(eo)
			e.Peers[i] = es
		}
	}
	return nil
}
