// Code generated by nimona.io/tools/objectify. DO NOT EDIT.

// +build !generate

package object

const (
	PolicyType = "/policy"
)

// ToObject returns a f12n object
func (s Policy) ToObject() *Object {
	o := New()
	o.SetType(PolicyType)
	if s.Description != "" {
		o.SetRaw("description", s.Description)
	}
	if len(s.Subjects) > 0 {
		o.SetRaw("subjects", s.Subjects)
	}
	if len(s.Actions) > 0 {
		o.SetRaw("actions", s.Actions)
	}
	if s.Effect != "" {
		o.SetRaw("effect", s.Effect)
	}
	return o
}

// FromObject populates the struct from a f12n object
func (s *Policy) FromObject(o *Object) error {
	if v, ok := o.GetRaw("description").(string); ok {
		s.Description = v
	}
	if ss, ok := o.GetRaw("subjects").([]string); ok {
		s.Subjects = ss
	} else if ss, ok := o.GetRaw("subjects").([]interface{}); ok {
		s.Subjects = []string{}
		for _, si := range ss {
			if v, ok := si.(string); ok {
				s.Subjects = append(s.Subjects, v)
			}
		}
	}
	if ss, ok := o.GetRaw("actions").([]string); ok {
		s.Actions = ss
	} else if ss, ok := o.GetRaw("actions").([]interface{}); ok {
		s.Actions = []string{}
		for _, si := range ss {
			if v, ok := si.(string); ok {
				s.Actions = append(s.Actions, v)
			}
		}
	}
	if v, ok := o.GetRaw("effect").(string); ok {
		s.Effect = v
	}
	return nil
}

// GetType returns the object's type
func (s Policy) GetType() string {
	return PolicyType
}
