// Code generated by nimona.io/tools/objectify. DO NOT EDIT.

// +build !generate

package mutation

import (
	"github.com/mitchellh/mapstructure"
	"nimona.io/pkg/object"
)

const (
	MutationType = "/object.mutation"
)

// ToObject returns a f12n object
func (s Mutation) ToObject() *object.Object {
	o := object.New()
	o.SetType(MutationType)
	if len(s.Operations) > 0 {
		o.SetRaw("ops", s.Operations)
	}
	if len(s.Parents) > 0 {
		o.SetRaw("@parents", s.Parents)
	}
	return o
}

func anythingToAnythingForMutation(
	from interface{},
	to interface{},
) error {
	config := &mapstructure.DecoderConfig{
		Result:  to,
		TagName: "json",
	}

	decoder, err := mapstructure.NewDecoder(config)
	if err != nil {
		return err
	}

	if err := decoder.Decode(from); err != nil {
		return err
	}

	return nil
}

// FromObject populates the struct from a f12n object
func (s *Mutation) FromObject(o *object.Object) error {
	atoa := anythingToAnythingForMutation
	if err := atoa(o.GetRaw("ops"), &s.Operations); err != nil {
		return err
	}
	if err := atoa(o.GetRaw("@parents"), &s.Parents); err != nil {
		return err
	}

	if ao, ok := interface{}(s).(interface{ afterFromObject() }); ok {
		ao.afterFromObject()
	}

	return nil
}

// GetType returns the object's type
func (s Mutation) GetType() string {
	return MutationType
}
