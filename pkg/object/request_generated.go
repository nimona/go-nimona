// Code generated by nimona.io/tools/codegen. DO NOT EDIT.

package object

import "nimona.io/pkg/errors"

type (
	Request struct {
		raw        Object
		Metadata   Metadata
		ObjectHash Hash
	}
	Response struct {
		raw        Object
		Metadata   Metadata
		ObjectHash *Object
	}
)

func (e Request) GetType() string {
	return "nimona.io/Request"
}

func (e Request) IsStreamRoot() bool {
	return false
}

func (e Request) GetSchema() *SchemaObject {
	return &SchemaObject{
		Properties: []*SchemaProperty{{
			Name:       "objectHash",
			Type:       "nimona.io/Hash",
			Hint:       "s",
			IsRepeated: false,
			IsOptional: false,
		}},
	}
}

func (e Request) ToObject() Object {
	o := Object{}
	o = o.SetType("nimona.io/Request")
	if len(e.Metadata.Stream) > 0 {
		o = o.SetStream(e.Metadata.Stream)
	}
	if len(e.Metadata.Parents) > 0 {
		o = o.SetParents(e.Metadata.Parents)
	}
	if !e.Metadata.Owner.IsEmpty() {
		o = o.SetOwner(e.Metadata.Owner)
	}
	if !e.Metadata.Signature.IsEmpty() {
		o = o.SetSignature(e.Metadata.Signature)
	}
	o = o.SetPolicy(e.Metadata.Policy)
	if e.ObjectHash != "" {
		o = o.Set("objectHash:s", e.ObjectHash)
	}
	// if schema := e.GetSchema(); schema != nil {
	// 	m["_schema:m"] = schema.ToObject().ToMap()
	// }
	return o
}

func (e *Request) FromObject(o Object) error {
	data, ok := o.Raw().Value("data:m").(Map)
	if !ok {
		return errors.New("missing data")
	}
	e.raw = Object{}
	e.raw = e.raw.SetType(o.GetType())
	e.Metadata.Stream = o.GetStream()
	e.Metadata.Parents = o.GetParents()
	e.Metadata.Owner = o.GetOwner()
	e.Metadata.Signature = o.GetSignature()
	e.Metadata.Policy = o.GetPolicy()
	if v := data.Value("objectHash:s"); v != nil {
		e.ObjectHash = Hash(v.PrimitiveHinted().(string))
	}
	return nil
}

func (e Response) GetType() string {
	return "nimona.io/Response"
}

func (e Response) IsStreamRoot() bool {
	return false
}

func (e Response) GetSchema() *SchemaObject {
	return &SchemaObject{
		Properties: []*SchemaProperty{{
			Name:       "objectHash",
			Type:       "nimona.io/Object",
			Hint:       "m",
			IsRepeated: false,
			IsOptional: false,
		}},
	}
}

func (e Response) ToObject() Object {
	o := Object{}
	o = o.SetType("nimona.io/Response")
	if len(e.Metadata.Stream) > 0 {
		o = o.SetStream(e.Metadata.Stream)
	}
	if len(e.Metadata.Parents) > 0 {
		o = o.SetParents(e.Metadata.Parents)
	}
	if !e.Metadata.Owner.IsEmpty() {
		o = o.SetOwner(e.Metadata.Owner)
	}
	if !e.Metadata.Signature.IsEmpty() {
		o = o.SetSignature(e.Metadata.Signature)
	}
	o = o.SetPolicy(e.Metadata.Policy)
	if e.ObjectHash != nil {
		o = o.Set("objectHash:m", e.ObjectHash.ToObject().Raw())
	}
	// if schema := e.GetSchema(); schema != nil {
	// 	m["_schema:m"] = schema.ToObject().ToMap()
	// }
	return o
}

func (e *Response) FromObject(o Object) error {
	data, ok := o.Raw().Value("data:m").(Map)
	if !ok {
		return errors.New("missing data")
	}
	e.raw = Object{}
	e.raw = e.raw.SetType(o.GetType())
	e.Metadata.Stream = o.GetStream()
	e.Metadata.Parents = o.GetParents()
	e.Metadata.Owner = o.GetOwner()
	e.Metadata.Signature = o.GetSignature()
	e.Metadata.Policy = o.GetPolicy()
	if v := data.Value("objectHash:m"); v != nil && v.IsMap() {
		eo := Object(v.(Map))
		e.ObjectHash = &eo
	}
	return nil
}
