// Code generated by nimona.io/tools/codegen. DO NOT EDIT.

package object

type (
	Request struct {
		Metadata   Metadata `nimona:"metadata:m,omitempty"`
		RequestID  string
		ObjectHash Hash
	}
	Response struct {
		Metadata  Metadata `nimona:"metadata:m,omitempty"`
		RequestID string
		Object    *Object
	}
)

func (e *Request) Type() string {
	return "nimona.io/Request"
}

func (e Request) ToObject() *Object {
	r := &Object{
		Type:     "nimona.io/Request",
		Metadata: e.Metadata,
		Data:     Map{},
	}
	// else
	// r.Data["requestID"] = String(e.RequestID)
	r.Data["requestID"] = String(e.RequestID)
	// else if $member.IsPrimitive
	r.Data["objectHash"] = String(e.ObjectHash)
	return r
}

func (e *Request) FromObject(o *Object) error {
	e.Metadata = o.Metadata
	if v, ok := o.Data["requestID"]; ok {
		if t, ok := v.(String); ok {
			e.RequestID = string(t)
		}
	}
	if v, ok := o.Data["objectHash"]; ok {
		if t, ok := v.(String); ok {
			e.ObjectHash = Hash(t)
		}
	}
	return nil
}

func (e *Response) Type() string {
	return "nimona.io/Response"
}

func (e Response) ToObject() *Object {
	r := &Object{
		Type:     "nimona.io/Response",
		Metadata: e.Metadata,
		Data:     Map{},
	}
	// else
	// r.Data["requestID"] = String(e.RequestID)
	r.Data["requestID"] = String(e.RequestID)
	// else if $member.IsObject
	if e.Object != nil {
		r.Data["object"] = e.Object
	}
	return r
}

func (e *Response) FromObject(o *Object) error {
	e.Metadata = o.Metadata
	if v, ok := o.Data["requestID"]; ok {
		if t, ok := v.(String); ok {
			e.RequestID = string(t)
		}
	}
	if v, ok := o.Data["object"]; ok {
		if t, ok := v.(Map); ok {
			e.Object = FromMap(t)
		} else if t, ok := v.(*Object); ok {
			e.Object = t
		}
	}
	return nil
}
