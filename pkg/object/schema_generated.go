// Code generated by nimona.io/tools/codegen. DO NOT EDIT.

package object

import (
	json "encoding/json"
)

type (
	SchemaProperty struct {
		Name       string            `json:"name:s,omitempty"`
		Type       string            `json:"type:s,omitempty"`
		Hint       string            `json:"hint:s,omitempty"`
		IsRepeated bool              `json:"isRepeated:b,omitempty"`
		IsOptional bool              `json:"isOptional:b,omitempty"`
		Properties []*SchemaProperty `json:"properties:ao,omitempty"`
	}
	SchemaObject struct {
		Properties []*SchemaProperty `json:"properties:ao,omitempty"`
	}
)

func (e SchemaProperty) GetType() string {
	return "nimona.io/object.SchemaProperty"
}

func (e SchemaProperty) ToObject() Object {
	m := map[string]interface{}{}
	m["@type:s"] = "nimona.io/object.SchemaProperty"
	if e.Name != "" {
		m["name:s"] = e.Name
	}
	if e.Type != "" {
		m["type:s"] = e.Type
	}
	if e.Hint != "" {
		m["hint:s"] = e.Hint
	}
	m["isRepeated:b"] = e.IsRepeated
	m["isOptional:b"] = e.IsOptional
	if len(e.Properties) > 0 {
		m["properties:ao"] = func() []interface{} {
			a := make([]interface{}, len(e.Properties))
			for i, v := range e.Properties {
				a[i] = v.ToObject().ToMap()
			}
			return a
		}()
	}
	return Object(m)
}

func (e *SchemaProperty) FromObject(o Object) error {
	b, _ := json.Marshal(map[string]interface{}(o))
	return json.Unmarshal(b, e)
}

func (e SchemaObject) GetType() string {
	return "nimona.io/object.SchemaObject"
}

func (e SchemaObject) ToObject() Object {
	m := map[string]interface{}{}
	m["@type:s"] = "nimona.io/object.SchemaObject"
	if len(e.Properties) > 0 {
		m["properties:ao"] = func() []interface{} {
			a := make([]interface{}, len(e.Properties))
			for i, v := range e.Properties {
				a[i] = v.ToObject().ToMap()
			}
			return a
		}()
	}
	return Object(m)
}

func (e *SchemaObject) FromObject(o Object) error {
	b, _ := json.Marshal(map[string]interface{}(o))
	return json.Unmarshal(b, e)
}
