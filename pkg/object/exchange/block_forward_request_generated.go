// Code generated by nimona.io/tools/objectify. DO NOT EDIT.

// +build !generate

package exchange

import (
	"nimona.io/pkg/crypto"
	"nimona.io/pkg/object"
)

// ToMap returns a map compatible with f12n
func (s BlockForwardRequest) ToMap() map[string]interface{} {
	m := map[string]interface{}{
		"@ctx:s":      "/block-forward-request",
		"recipient:s": s.Recipient,
	}
	if s.FwBlock != nil {
		m["fwBlock:o"] = s.FwBlock.ToMap()
	}
	if s.Signature != nil {
		m["@signature:o"] = s.Signature.ToMap()
	}
	return m
}

// ToObject returns a f12n object
func (s BlockForwardRequest) ToObject() *object.Object {
	return object.FromMap(s.ToMap())
}

// FromMap populates the struct from a f12n compatible map
func (s *BlockForwardRequest) FromMap(m map[string]interface{}) error {
	if v, ok := m["recipient:s"].(string); ok {
		s.Recipient = v
	}
	if v, ok := m["fwBlock:o"].(map[string]interface{}); ok {
		s.FwBlock = &object.Object{}
		if err := s.FwBlock.FromMap(v); err != nil {
			return err
		}
	} else if v, ok := m["fwBlock:o"].(*object.Object); ok {
		s.FwBlock = v
	}
	if v, ok := m["fwBlock:o"].(*object.Object); ok {
		s.FwBlock = v
	}
	if v, ok := m["@signature:o"].(map[string]interface{}); ok {
		s.Signature = &crypto.Signature{}
		if err := s.Signature.FromMap(v); err != nil {
			return err
		}
	} else if v, ok := m["@signature:o"].(*crypto.Signature); ok {
		s.Signature = v
	}
	if v, ok := m["@signature:o"].(*crypto.Signature); ok {
		s.Signature = v
	}
	return nil
}

// FromObject populates the struct from a f12n object
func (s *BlockForwardRequest) FromObject(o *object.Object) error {
	return s.FromMap(o.ToMap())
}

// GetType returns the object's type
func (s BlockForwardRequest) GetType() string {
	return "/block-forward-request"
}
