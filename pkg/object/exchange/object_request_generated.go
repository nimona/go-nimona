// Code generated by nimona.io/tools/objectify. DO NOT EDIT.

// +build !generate

package exchange

import (
	"github.com/mitchellh/mapstructure"
	"nimona.io/pkg/crypto"
	"nimona.io/pkg/object"
)

const (
	ObjectRequestType = "/object-request"
)

// ToObject returns a f12n object
func (s ObjectRequest) ToObject() *object.Object {
	o := object.New()
	o.SetType(ObjectRequestType)
	if s.ObjectHash != "" {
		o.SetRaw("objectHash", s.ObjectHash)
	}
	if s.Signature != nil {
		o.SetRaw("@signature", s.Signature)
	}
	if s.Signer != nil {
		o.SetRaw("@signer", s.Signer)
	}
	return o
}

func anythingToAnythingForObjectRequest(
	from interface{},
	to interface{},
) error {
	config := &mapstructure.DecoderConfig{
		Result:  to,
		TagName: "json",
	}

	decoder, err := mapstructure.NewDecoder(config)
	if err != nil {
		return err
	}

	if err := decoder.Decode(from); err != nil {
		return err
	}

	return nil
}

// FromObject populates the struct from a f12n object
func (s *ObjectRequest) FromObject(o *object.Object) error {
	atoa := anythingToAnythingForObjectRequest
	if err := atoa(o.GetRaw("objectHash"), &s.ObjectHash); err != nil {
		return err
	}
	if v, ok := o.GetRaw("@signature").(*crypto.Signature); ok {
		s.Signature = v
	} else if v, ok := o.GetRaw("@signature").(map[string]interface{}); ok {
		s.Signature = &crypto.Signature{}
		o := &object.Object{}
		if err := o.FromMap(v); err != nil {
			return err
		}
		s.Signature.FromObject(o)
	}
	if v, ok := o.GetRaw("@signer").(*crypto.PublicKey); ok {
		s.Signer = v
	} else if v, ok := o.GetRaw("@signer").(map[string]interface{}); ok {
		s.Signer = &crypto.PublicKey{}
		o := &object.Object{}
		if err := o.FromMap(v); err != nil {
			return err
		}
		s.Signer.FromObject(o)
	}

	if ao, ok := interface{}(s).(interface{ afterFromObject() }); ok {
		ao.afterFromObject()
	}

	return nil
}

// GetType returns the object's type
func (s ObjectRequest) GetType() string {
	return ObjectRequestType
}
