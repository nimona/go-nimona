// Code generated by nimona.io/tools/codegen. DO NOT EDIT.

package object

import (
	crypto "nimona.io/pkg/crypto"
	"nimona.io/pkg/errors"
	immutable "nimona.io/pkg/immutable"
)

type (
	Certificate struct {
		raw       Object
		Stream    Hash
		Parents   []Hash
		Owners    []crypto.PublicKey
		Policy    Policy
		Signature Signature
		Subject   crypto.PublicKey
		Created   string
		Expires   string
	}
)

func (e Certificate) GetType() string {
	return "nimona.io/object.Certificate"
}

// func (e *Certificate) SetStream(v Hash) {
// 	e.raw = e.raw.SetStream(v)
// }

// func (e Certificate) GetStream() Hash {
// 	return e.raw.GetStream()
// }

// func (e *Certificate) SetParents(hashes []Hash) {
// 	e.raw = e.raw.SetParents(hashes)
// }

// func (e Certificate) GetParents() []Hash {
// 	return e.raw.GetParents()
// }

// func (e *Certificate) SetPolicy(policy Policy) {
// 	e.raw = e.raw.SetPolicy(policy)
// }

// func (e Certificate) GetPolicy() Policy {
// 	return e.raw.GetPolicy()
// }

// func (e *Certificate) SetSignature(v Signature) {
// 	e.raw = e.raw.SetSignature(v)
// }

// func (e Certificate) GetSignature() Signature {
// 	return e.raw.GetSignature()
// }

// func (e *Certificate) SetOwners(owners []crypto.PublicKey) {
// 	e.raw = e.raw.SetOwners(owners)
// }

// func (e Certificate) GetOwners() []crypto.PublicKey {
// 	return e.raw.GetOwners()
// }

func (e Certificate) GetSchema() *SchemaObject {
	return &SchemaObject{
		Properties: []*SchemaProperty{
			&SchemaProperty{
				Name:       "subject",
				Type:       "nimona.io/crypto.PublicKey",
				Hint:       "s",
				IsRepeated: false,
				IsOptional: false,
			},
			&SchemaProperty{
				Name:       "created",
				Type:       "string",
				Hint:       "s",
				IsRepeated: false,
				IsOptional: false,
			},
			&SchemaProperty{
				Name:       "expires",
				Type:       "string",
				Hint:       "s",
				IsRepeated: false,
				IsOptional: false,
			},
		},
	}
}

func (e Certificate) ToObject() Object {
	o := Object{}
	o = o.SetType("nimona.io/object.Certificate")
	if len(e.Stream) > 0 {
		o = o.SetStream(e.Stream)
	}
	if len(e.Parents) > 0 {
		o = o.SetParents(e.Parents)
	}
	if len(e.Owners) > 0 {
		o = o.SetOwners(e.Owners)
	}
	o = o.SetSignature(e.Signature)
	o = o.SetPolicy(e.Policy)
	if e.Subject != "" {
		o = o.Set("subject:s", e.Subject)
	}
	if e.Created != "" {
		o = o.Set("created:s", e.Created)
	}
	if e.Expires != "" {
		o = o.Set("expires:s", e.Expires)
	}
	// if schema := e.GetSchema(); schema != nil {
	// 	m["_schema:o"] = schema.ToObject().ToMap()
	// }
	return o
}

func (e *Certificate) FromObject(o Object) error {
	data, ok := o.Raw().Value("data:o").(immutable.Map)
	if !ok {
		return errors.New("missing data")
	}
	e.raw = Object{}
	e.raw = e.raw.SetType(o.GetType())
	e.Stream = o.GetStream()
	e.Parents = o.GetParents()
	e.Owners = o.GetOwners()
	e.Signature = o.GetSignature()
	e.Policy = o.GetPolicy()
	if v := data.Value("subject:s"); v != nil {
		e.Subject = crypto.PublicKey(v.PrimitiveHinted().(string))
	}
	if v := data.Value("created:s"); v != nil {
		e.Created = string(v.PrimitiveHinted().(string))
	}
	if v := data.Value("expires:s"); v != nil {
		e.Expires = string(v.PrimitiveHinted().(string))
	}
	return nil
}
