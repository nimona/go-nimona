// Code generated by nimona.io/tools/codegen. DO NOT EDIT.

package object

type (
	Certificate struct {
		Metadata Metadata `nimona:"metadata:m,omitempty"`
		Nonce    string   `nimona:"nonce:s,omitempty"`
		Created  string   `nimona:"created:s,omitempty"`
		Expires  string   `nimona:"expires:s,omitempty"`
	}
	CertificateRequest struct {
		Metadata               Metadata `nimona:"metadata:m,omitempty"`
		ApplicationName        string   `nimona:"applicationName:s,omitempty"`
		ApplicationDescription string   `nimona:"applicationDescription:s,omitempty"`
		ApplicationURL         string   `nimona:"applicationURL:s,omitempty"`
		Subject                string   `nimona:"subject:s,omitempty"`
		Resources              []string `nimona:"resources:as,omitempty"`
		Actions                []string `nimona:"actions:as,omitempty"`
		Nonce                  string   `nimona:"nonce:s,omitempty"`
	}
)

func (e *Certificate) Type() string {
	return "nimona.io/Certificate"
}

func (e Certificate) ToObject() *Object {
	r := &Object{
		Type:     "nimona.io/Certificate",
		Metadata: e.Metadata,
		Data:     map[string]interface{}{},
	}
	r.Data["nonce:s"] = e.Nonce
	r.Data["created:s"] = e.Created
	r.Data["expires:s"] = e.Expires
	return r
}

func (e *Certificate) FromObject(o *Object) error {
	return Decode(o, e)
}

func (e *CertificateRequest) Type() string {
	return "nimona.io/CertificateRequest"
}

func (e CertificateRequest) ToObject() *Object {
	r := &Object{
		Type:     "nimona.io/CertificateRequest",
		Metadata: e.Metadata,
		Data:     map[string]interface{}{},
	}
	r.Data["applicationName:s"] = e.ApplicationName
	r.Data["applicationDescription:s"] = e.ApplicationDescription
	r.Data["applicationURL:s"] = e.ApplicationURL
	r.Data["subject:s"] = e.Subject
	if len(e.Resources) > 0 {
		// rv := make([]string, len(e.Resources))
		// for i, v := range e.Resources {
		// 	rv[i] = v
		// }
		r.Data["resources:as"] = e.Resources
	}
	if len(e.Actions) > 0 {
		// rv := make([]string, len(e.Actions))
		// for i, v := range e.Actions {
		// 	rv[i] = v
		// }
		r.Data["actions:as"] = e.Actions
	}
	r.Data["nonce:s"] = e.Nonce
	return r
}

func (e *CertificateRequest) FromObject(o *Object) error {
	return Decode(o, e)
}
