// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package nimona

import (
	"bytes"
	"fmt"
	"io"
	"math"
	"sort"

	cid "github.com/ipfs/go-cid"
	zero "github.com/vikyd/zero"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = bytes.Compare
var _ = xerrors.Errorf
var _ = cid.Undef
var _ = math.E
var _ = sort.Sort
var _ = zero.IsZeroVal

func (t *CborFixture) MarshalCBORBytes() ([]byte, error) {
	w := bytes.NewBuffer(nil)
	err := t.MarshalCBOR(w)
	if err != nil {
		return nil, err
	}
	return w.Bytes(), nil
}

func (t *CborFixture) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)
	fieldCount := 12

	if zero.IsZeroVal(t.String) {
		fieldCount--
	}

	if zero.IsZeroVal(t.Uint64) {
		fieldCount--
	}

	if zero.IsZeroVal(t.Int64) {
		fieldCount--
	}

	if zero.IsZeroVal(t.Bytes) {
		fieldCount--
	}

	if zero.IsZeroVal(t.Bool) {
		fieldCount--
	}

	if t.Map == nil {
		fieldCount--
	}

	if zero.IsZeroVal(t.RepeatedString) {
		fieldCount--
	}

	if zero.IsZeroVal(t.RepeatedUint64) {
		fieldCount--
	}

	if zero.IsZeroVal(t.RepeatedInt64) {
		fieldCount--
	}

	if zero.IsZeroVal(t.RepeatedBytes) {
		fieldCount--
	}

	if zero.IsZeroVal(t.RepeatedMap) {
		fieldCount--
	}

	if zero.IsZeroVal(t.EphemeralString) {
		fieldCount--
	}

	if _, err := cw.Write(cbg.CborEncodeMajorType(cbg.MajMap, uint64(fieldCount))); err != nil {
		return err
	}

	// t.String (string) (string)
	if !zero.IsZeroVal(t.String) {

		if len("string") > cbg.MaxLength {
			return xerrors.Errorf("Value in field \"string\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("string"))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string("string")); err != nil {
			return err
		}

		if len(t.String) > cbg.MaxLength {
			return xerrors.Errorf("Value in field t.String was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.String))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string(t.String)); err != nil {
			return err
		}
	}

	// t.Uint64 (uint64) (uint64)
	if !zero.IsZeroVal(t.Uint64) {

		if len("uint64") > cbg.MaxLength {
			return xerrors.Errorf("Value in field \"uint64\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("uint64"))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string("uint64")); err != nil {
			return err
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.Uint64)); err != nil {
			return err
		}

	}

	// t.Int64 (int64) (int64)
	if !zero.IsZeroVal(t.Int64) {

		if len("int64") > cbg.MaxLength {
			return xerrors.Errorf("Value in field \"int64\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("int64"))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string("int64")); err != nil {
			return err
		}

		if t.Int64 >= 0 {
			if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.Int64)); err != nil {
				return err
			}
		} else {
			if err := cw.WriteMajorTypeHeader(cbg.MajNegativeInt, uint64(-t.Int64-1)); err != nil {
				return err
			}
		}
	}

	// t.Bytes ([]uint8) (slice)
	if !zero.IsZeroVal(t.Bytes) {

		if len("bytes") > cbg.MaxLength {
			return xerrors.Errorf("Value in field \"bytes\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("bytes"))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string("bytes")); err != nil {
			return err
		}

		if len(t.Bytes) > cbg.ByteArrayMaxLen {
			return xerrors.Errorf("Byte array in field t.Bytes was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajByteString, uint64(len(t.Bytes))); err != nil {
			return err
		}

		if _, err := cw.Write(t.Bytes[:]); err != nil {
			return err
		}
	}

	// t.Bool (bool) (bool)
	if !zero.IsZeroVal(t.Bool) {

		if len("bool") > cbg.MaxLength {
			return xerrors.Errorf("Value in field \"bool\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("bool"))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string("bool")); err != nil {
			return err
		}

		if err := cbg.WriteBool(w, t.Bool); err != nil {
			return err
		}
	}

	// t.Map (nimona.CborFixture) (struct)
	if t.Map != nil {

		if len("map") > cbg.MaxLength {
			return xerrors.Errorf("Value in field \"map\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("map"))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string("map")); err != nil {
			return err
		}

		if err := t.Map.MarshalCBOR(cw); err != nil {
			return err
		}
	}

	// t.RepeatedString ([]string) (slice)
	if !zero.IsZeroVal(t.RepeatedString) {

		if len("repeatedstring") > cbg.MaxLength {
			return xerrors.Errorf("Value in field \"repeatedstring\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("repeatedstring"))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string("repeatedstring")); err != nil {
			return err
		}

		if len(t.RepeatedString) > cbg.MaxLength {
			return xerrors.Errorf("Slice value in field t.RepeatedString was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajArray, uint64(len(t.RepeatedString))); err != nil {
			return err
		}
		for _, v := range t.RepeatedString {
			if len(v) > cbg.MaxLength {
				return xerrors.Errorf("Value in field v was too long")
			}

			if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(v))); err != nil {
				return err
			}
			if _, err := io.WriteString(w, string(v)); err != nil {
				return err
			}
		}
	}

	// t.RepeatedUint64 ([]uint64) (slice)
	if !zero.IsZeroVal(t.RepeatedUint64) {

		if len("repeateduint64") > cbg.MaxLength {
			return xerrors.Errorf("Value in field \"repeateduint64\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("repeateduint64"))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string("repeateduint64")); err != nil {
			return err
		}

		if len(t.RepeatedUint64) > cbg.MaxLength {
			return xerrors.Errorf("Slice value in field t.RepeatedUint64 was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajArray, uint64(len(t.RepeatedUint64))); err != nil {
			return err
		}
		for _, v := range t.RepeatedUint64 {
			if err := cw.CborWriteHeader(cbg.MajUnsignedInt, uint64(v)); err != nil {
				return err
			}
		}
	}

	// t.RepeatedInt64 ([]int64) (slice)
	if !zero.IsZeroVal(t.RepeatedInt64) {

		if len("repeatedint64") > cbg.MaxLength {
			return xerrors.Errorf("Value in field \"repeatedint64\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("repeatedint64"))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string("repeatedint64")); err != nil {
			return err
		}

		if len(t.RepeatedInt64) > cbg.MaxLength {
			return xerrors.Errorf("Slice value in field t.RepeatedInt64 was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajArray, uint64(len(t.RepeatedInt64))); err != nil {
			return err
		}
		for _, v := range t.RepeatedInt64 {
			if v >= 0 {
				if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(v)); err != nil {
					return err
				}
			} else {
				if err := cw.WriteMajorTypeHeader(cbg.MajNegativeInt, uint64(-v-1)); err != nil {
					return err
				}
			}
		}
	}

	// t.RepeatedBytes ([][]uint8) (slice)
	if !zero.IsZeroVal(t.RepeatedBytes) {

		if len("repeatedbytes") > cbg.MaxLength {
			return xerrors.Errorf("Value in field \"repeatedbytes\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("repeatedbytes"))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string("repeatedbytes")); err != nil {
			return err
		}

		if len(t.RepeatedBytes) > cbg.MaxLength {
			return xerrors.Errorf("Slice value in field t.RepeatedBytes was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajArray, uint64(len(t.RepeatedBytes))); err != nil {
			return err
		}
		for _, v := range t.RepeatedBytes {
			if len(v) > cbg.ByteArrayMaxLen {
				return xerrors.Errorf("Byte array in field v was too long")
			}

			if err := cw.WriteMajorTypeHeader(cbg.MajByteString, uint64(len(v))); err != nil {
				return err
			}

			if _, err := cw.Write(v[:]); err != nil {
				return err
			}
		}
	}

	// t.RepeatedMap ([]*nimona.CborFixture) (slice)
	if !zero.IsZeroVal(t.RepeatedMap) {

		if len("repeatedmap") > cbg.MaxLength {
			return xerrors.Errorf("Value in field \"repeatedmap\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("repeatedmap"))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string("repeatedmap")); err != nil {
			return err
		}

		if len(t.RepeatedMap) > cbg.MaxLength {
			return xerrors.Errorf("Slice value in field t.RepeatedMap was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajArray, uint64(len(t.RepeatedMap))); err != nil {
			return err
		}
		for _, v := range t.RepeatedMap {
			if err := v.MarshalCBOR(cw); err != nil {
				return err
			}
		}
	}

	// t.EphemeralString (string) (string)
	if !zero.IsZeroVal(t.EphemeralString) {

		if len("_ephemeralString") > cbg.MaxLength {
			return xerrors.Errorf("Value in field \"_ephemeralString\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("_ephemeralString"))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string("_ephemeralString")); err != nil {
			return err
		}

		if len(t.EphemeralString) > cbg.MaxLength {
			return xerrors.Errorf("Value in field t.EphemeralString was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.EphemeralString))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string(t.EphemeralString)); err != nil {
			return err
		}
	}
	return nil
}

func (t *CborFixture) UnmarshalCBORBytes(b []byte) (err error) {
	return t.UnmarshalCBOR(bytes.NewReader(b))
}

func (t *CborFixture) UnmarshalCBOR(r io.Reader) (err error) {
	*t = CborFixture{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("CborFixture: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.String (string) (string)
		case "string":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.String = string(sval)
			}
			// t.Uint64 (uint64) (uint64)
		case "uint64":

			{

				maj, extra, err = cr.ReadHeader()
				if err != nil {
					return err
				}
				if maj != cbg.MajUnsignedInt {
					return fmt.Errorf("wrong type for uint64 field")
				}
				t.Uint64 = uint64(extra)

			}
			// t.Int64 (int64) (int64)
		case "int64":
			{
				maj, extra, err := cr.ReadHeader()
				var extraI int64
				if err != nil {
					return err
				}
				switch maj {
				case cbg.MajUnsignedInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 positive overflow")
					}
				case cbg.MajNegativeInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 negative oveflow")
					}
					extraI = -1 - extraI
				default:
					return fmt.Errorf("wrong type for int64 field: %d", maj)
				}

				t.Int64 = int64(extraI)
			}
			// t.Bytes ([]uint8) (slice)
		case "bytes":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > cbg.ByteArrayMaxLen {
				return fmt.Errorf("t.Bytes: byte array too large (%d)", extra)
			}
			if maj != cbg.MajByteString {
				return fmt.Errorf("expected byte array")
			}

			if extra > 0 {
				t.Bytes = make([]uint8, extra)
			}

			if _, err := io.ReadFull(cr, t.Bytes[:]); err != nil {
				return err
			}
			// t.Bool (bool) (bool)
		case "bool":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}
			if maj != cbg.MajOther {
				return fmt.Errorf("booleans must be major type 7")
			}
			switch extra {
			case 20:
				t.Bool = false
			case 21:
				t.Bool = true
			default:
				return fmt.Errorf("booleans are either major type 7, value 20 or 21 (got %d)", extra)
			}
			// t.Map (nimona.CborFixture) (struct)
		case "map":

			{

				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}
					t.Map = new(CborFixture)
					if err := t.Map.UnmarshalCBOR(cr); err != nil {
						return xerrors.Errorf("unmarshaling t.Map pointer: %w", err)
					}
				}

			}
			// t.RepeatedString ([]string) (slice)
		case "repeatedstring":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > cbg.MaxLength {
				return fmt.Errorf("t.RepeatedString: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return fmt.Errorf("expected cbor array")
			}

			if extra > 0 {
				t.RepeatedString = make([]string, extra)
			}

			for i := 0; i < int(extra); i++ {

				{
					sval, err := cbg.ReadString(cr)
					if err != nil {
						return err
					}

					t.RepeatedString[i] = string(sval)
				}
			}

			// t.RepeatedUint64 ([]uint64) (slice)
		case "repeateduint64":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > cbg.MaxLength {
				return fmt.Errorf("t.RepeatedUint64: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return fmt.Errorf("expected cbor array")
			}

			if extra > 0 {
				t.RepeatedUint64 = make([]uint64, extra)
			}

			for i := 0; i < int(extra); i++ {

				maj, val, err := cr.ReadHeader()
				if err != nil {
					return xerrors.Errorf("failed to read uint64 for t.RepeatedUint64 slice: %w", err)
				}

				if maj != cbg.MajUnsignedInt {
					return xerrors.Errorf("value read for array t.RepeatedUint64 was not a uint, instead got %d", maj)
				}

				t.RepeatedUint64[i] = uint64(val)
			}

			// t.RepeatedInt64 ([]int64) (slice)
		case "repeatedint64":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > cbg.MaxLength {
				return fmt.Errorf("t.RepeatedInt64: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return fmt.Errorf("expected cbor array")
			}

			if extra > 0 {
				t.RepeatedInt64 = make([]int64, extra)
			}

			for i := 0; i < int(extra); i++ {
				{
					maj, extra, err := cr.ReadHeader()
					var extraI int64
					if err != nil {
						return err
					}
					switch maj {
					case cbg.MajUnsignedInt:
						extraI = int64(extra)
						if extraI < 0 {
							return fmt.Errorf("int64 positive overflow")
						}
					case cbg.MajNegativeInt:
						extraI = int64(extra)
						if extraI < 0 {
							return fmt.Errorf("int64 negative oveflow")
						}
						extraI = -1 - extraI
					default:
						return fmt.Errorf("wrong type for int64 field: %d", maj)
					}

					t.RepeatedInt64[i] = int64(extraI)
				}
			}

			// t.RepeatedBytes ([][]uint8) (slice)
		case "repeatedbytes":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > cbg.MaxLength {
				return fmt.Errorf("t.RepeatedBytes: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return fmt.Errorf("expected cbor array")
			}

			if extra > 0 {
				t.RepeatedBytes = make([][]uint8, extra)
			}

			for i := 0; i < int(extra); i++ {
				{
					var maj byte
					var extra uint64
					var err error

					maj, extra, err = cr.ReadHeader()
					if err != nil {
						return err
					}

					if extra > cbg.ByteArrayMaxLen {
						return fmt.Errorf("t.RepeatedBytes[i]: byte array too large (%d)", extra)
					}
					if maj != cbg.MajByteString {
						return fmt.Errorf("expected byte array")
					}

					if extra > 0 {
						t.RepeatedBytes[i] = make([]uint8, extra)
					}

					if _, err := io.ReadFull(cr, t.RepeatedBytes[i][:]); err != nil {
						return err
					}
				}
			}

			// t.RepeatedMap ([]*nimona.CborFixture) (slice)
		case "repeatedmap":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > cbg.MaxLength {
				return fmt.Errorf("t.RepeatedMap: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return fmt.Errorf("expected cbor array")
			}

			if extra > 0 {
				t.RepeatedMap = make([]*CborFixture, extra)
			}

			for i := 0; i < int(extra); i++ {

				var v CborFixture
				if err := v.UnmarshalCBOR(cr); err != nil {
					return err
				}

				t.RepeatedMap[i] = &v
			}

			// t.EphemeralString (string) (string)
		case "_ephemeralString":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.EphemeralString = string(sval)
			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
