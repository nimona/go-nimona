// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package nimona

import (
	"bytes"
	"fmt"
	"io"
	"math"
	"sort"

	cid "github.com/ipfs/go-cid"
	zero "github.com/vikyd/zero"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = bytes.Compare
var _ = xerrors.Errorf
var _ = cid.Undef
var _ = math.E
var _ = sort.Sort
var _ = zero.IsZeroVal

func (t *StreamOperation) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)
	fieldCount := 4

	if zero.IsZeroVal(t.From) {
		fieldCount--
	}

	if zero.IsZeroVal(t.Value) {
		fieldCount--
	}

	if _, err := cw.Write(cbg.CborEncodeMajorType(cbg.MajMap, uint64(fieldCount))); err != nil {
		return err
	}

	// t.Op (string) (string)
	if len("op") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"op\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("op"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("op")); err != nil {
		return err
	}

	if len(t.Op) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.Op was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Op))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.Op)); err != nil {
		return err
	}

	// t.Path (string) (string)
	if len("path") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"path\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("path"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("path")); err != nil {
		return err
	}

	if len(t.Path) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.Path was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Path))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.Path)); err != nil {
		return err
	}

	// t.From (string) (string)
	if !zero.IsZeroVal(t.From) {

		if len("from") > cbg.MaxLength {
			return xerrors.Errorf("Value in field \"from\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("from"))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string("from")); err != nil {
			return err
		}

		if len(t.From) > cbg.MaxLength {
			return xerrors.Errorf("Value in field t.From was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.From))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string(t.From)); err != nil {
			return err
		}
	}

	// t.Value (typegen.Deferred) (struct)
	if !zero.IsZeroVal(t.Value) {

		if len("value") > cbg.MaxLength {
			return xerrors.Errorf("Value in field \"value\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("value"))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string("value")); err != nil {
			return err
		}

		if err := t.Value.MarshalCBOR(cw); err != nil {
			return err
		}
	}
	return nil
}

func (t *StreamOperation) UnmarshalCBOR(r io.Reader) (err error) {
	if t == nil {
		*t = StreamOperation{}
	}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("StreamOperation: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.Op (string) (string)
		case "op":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.Op = string(sval)
			}
			// t.Path (string) (string)
		case "path":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.Path = string(sval)
			}
			// t.From (string) (string)
		case "from":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.From = string(sval)
			}
			// t.Value (typegen.Deferred) (struct)
		case "value":

			{

				if err := t.Value.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("failed to read deferred field: %w", err)
				}
			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}

func (t *StreamPatch) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)
	fieldCount := 4

	if zero.IsZeroVal(t.Metadata) {
		fieldCount--
	}

	if zero.IsZeroVal(t.Dependencies) {
		fieldCount--
	}

	if zero.IsZeroVal(t.Operations) {
		fieldCount--
	}

	if _, err := cw.Write(cbg.CborEncodeMajorType(cbg.MajMap, uint64(fieldCount))); err != nil {
		return err
	}

	// t._ (string) (string)
	if len("$type") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"$type\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("$type"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("$type")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("core/stream/patch"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("core/stream/patch")); err != nil {
		return err
	}

	// t.Metadata (nimona.Metadata) (struct)
	if !zero.IsZeroVal(t.Metadata) {

		if len("$metadata") > cbg.MaxLength {
			return xerrors.Errorf("Value in field \"$metadata\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("$metadata"))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string("$metadata")); err != nil {
			return err
		}

		if err := t.Metadata.MarshalCBOR(cw); err != nil {
			return err
		}
	}

	// t.Dependencies ([]nimona.DocumentID) (slice)
	if !zero.IsZeroVal(t.Dependencies) {

		if len("dependencies") > cbg.MaxLength {
			return xerrors.Errorf("Value in field \"dependencies\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("dependencies"))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string("dependencies")); err != nil {
			return err
		}

		if len(t.Dependencies) > cbg.MaxLength {
			return xerrors.Errorf("Slice value in field t.Dependencies was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajArray, uint64(len(t.Dependencies))); err != nil {
			return err
		}
		for _, v := range t.Dependencies {
			if err := v.MarshalCBOR(cw); err != nil {
				return err
			}
		}
	}

	// t.Operations ([]nimona.StreamOperation) (slice)
	if !zero.IsZeroVal(t.Operations) {

		if len("operations") > cbg.MaxLength {
			return xerrors.Errorf("Value in field \"operations\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("operations"))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string("operations")); err != nil {
			return err
		}

		if len(t.Operations) > cbg.MaxLength {
			return xerrors.Errorf("Slice value in field t.Operations was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajArray, uint64(len(t.Operations))); err != nil {
			return err
		}
		for _, v := range t.Operations {
			if err := v.MarshalCBOR(cw); err != nil {
				return err
			}
		}
	}
	return nil
}

func (t *StreamPatch) UnmarshalCBOR(r io.Reader) (err error) {
	if t == nil {
		*t = StreamPatch{}
	}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("StreamPatch: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t._ (string) (string) - ignored

		// t.Metadata (nimona.Metadata) (struct)
		case "$metadata":

			{

				if err := t.Metadata.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("unmarshaling t.Metadata: %w", err)
				}

			}
			// t.Dependencies ([]nimona.DocumentID) (slice)
		case "dependencies":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > cbg.MaxLength {
				return fmt.Errorf("t.Dependencies: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return fmt.Errorf("expected cbor array")
			}

			if extra > 0 {
				t.Dependencies = make([]DocumentID, extra)
			}

			for i := 0; i < int(extra); i++ {

				var v DocumentID
				if err := v.UnmarshalCBOR(cr); err != nil {
					return err
				}

				t.Dependencies[i] = v
			}

			// t.Operations ([]nimona.StreamOperation) (slice)
		case "operations":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > cbg.MaxLength {
				return fmt.Errorf("t.Operations: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return fmt.Errorf("expected cbor array")
			}

			if extra > 0 {
				t.Operations = make([]StreamOperation, extra)
			}

			for i := 0; i < int(extra); i++ {

				var v StreamOperation
				if err := v.UnmarshalCBOR(cr); err != nil {
					return err
				}

				t.Operations[i] = v
			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
