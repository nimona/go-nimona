// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/geoah/genny

package connmanager

import (
	"sync"
)

type (
	addresses string // nolint
	// AddressesMap -
	AddressesMap struct {
		m sync.Map
	}
)

// NewAddressesMap constructs a new SyncMap
func NewAddressesMap() *AddressesMap {
	return &AddressesMap{}
}

// GetOrPut -
func (m *AddressesMap) GetOrPut(k string, v *addressState) (*addressState, bool) {
	nv, ok := m.m.LoadOrStore(k, v)
	return nv.(*addressState), ok
}

// Put -
func (m *AddressesMap) Put(k string, v *addressState) {
	m.m.Store(k, v)
}

// Get -
func (m *AddressesMap) Get(k string) (*addressState, bool) {
	i, ok := m.m.Load(k)
	if !ok {
		return nil, false
	}

	v, ok := i.(*addressState)
	if !ok {
		return nil, false
	}

	return v, true
}

// Delete -
func (m *AddressesMap) Delete(k string) {
	m.m.Delete(k)
}

// Range -
func (m *AddressesMap) Range(i func(k string, v *addressState) bool) {
	m.m.Range(func(k, v interface{}) bool {
		return i(k.(string), v.(*addressState))
	})
}

// ListKeys -
func (m *AddressesMap) ListKeys() []string {
	vs := []string{}
	m.m.Range(func(k, v interface{}) bool {
		vs = append(vs, k.(string))
		return true
	})
	return vs
}

// ListValues -
func (m *AddressesMap) ListValues() []*addressState {
	vs := []*addressState{}
	m.m.Range(func(k, v interface{}) bool {
		vs = append(vs, v.(*addressState))
		return true
	})
	return vs
}
