// Code generated by nimona.io/tools/codegen. DO NOT EDIT.

package fixtures

import (
	object "nimona.io/pkg/object"
)

const CompositeTestType = "compositeTest"

type CompositeTest struct {
	Metadata                    object.Metadata `nimona:"@metadata:m,type=compositeTest"`
	CompositeStringTest         *Composite      `nimona:"compositeStringTest:s"`
	CompositeDataTest           *Composite      `nimona:"compositeDataTest:d"`
	RepeatedCompositeStringTest []*Composite    `nimona:"repeatedCompositeStringTest:as"`
	RepeatedCompositeDataTest   []*Composite    `nimona:"repeatedCompositeDataTest:ad"`
}

const TestPolicyType = "nimona.io/fixtures.TestPolicy"

type TestPolicy struct {
	Metadata   object.Metadata `nimona:"@metadata:m,type=nimona.io/fixtures.TestPolicy"`
	Subjects   []string        `nimona:"subjects:as"`
	Resources  []string        `nimona:"resources:as"`
	Conditions []string        `nimona:"conditions:as"`
	Action     string          `nimona:"action:s"`
}

const TestStreamType = "nimona.io/fixtures.TestStream"

type TestStream struct {
	Metadata        object.Metadata `nimona:"@metadata:m,type=nimona.io/fixtures.TestStream"`
	Nonce           string          `nimona:"nonce:s"`
	CreatedDateTime string          `nimona:"createdDateTime:s"`
}

const TestSubscribedType = "nimona.io/fixtures.TestSubscribed"

type TestSubscribed struct {
	Metadata object.Metadata `nimona:"@metadata:m,type=nimona.io/fixtures.TestSubscribed"`
	Nonce    string          `nimona:"nonce:s"`
}

const TestUnsubscribedType = "nimona.io/fixtures.TestUnsubscribed"

type TestUnsubscribed struct {
	Metadata object.Metadata `nimona:"@metadata:m,type=nimona.io/fixtures.TestUnsubscribed"`
	Nonce    string          `nimona:"nonce:s"`
}

const TestRequestType = "nimona.io/fixtures.TestRequest"

type TestRequest struct {
	Metadata  object.Metadata `nimona:"@metadata:m,type=nimona.io/fixtures.TestRequest"`
	RequestID string          `nimona:"requestID:s"`
	Foo       string          `nimona:"foo:s"`
}

const TestResponseType = "nimona.io/fixtures.TestResponse"

type TestResponse struct {
	Metadata  object.Metadata `nimona:"@metadata:m,type=nimona.io/fixtures.TestResponse"`
	RequestID string          `nimona:"requestID:s"`
	Foo       string          `nimona:"foo:s"`
}

const ParentType = "parent"

type Parent struct {
	Metadata      object.Metadata `nimona:"@metadata:m,type=parent"`
	Foo           string          `nimona:"foo:s"`
	Child         *Child          `nimona:"child:m"`
	RepeatedChild []*Child        `nimona:"repeatedChild:am"`
}

const ChildType = "child"

type Child struct {
	Metadata object.Metadata `nimona:"@metadata:m,type=child"`
	Foo      string          `nimona:"foo:s"`
}
