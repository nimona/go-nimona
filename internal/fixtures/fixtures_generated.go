// Code generated by nimona.io/tools/codegen. DO NOT EDIT.

package fixtures

import (
	json "encoding/json"

	crypto "nimona.io/pkg/crypto"
	object "nimona.io/pkg/object"
)

type (
	TestPolicy struct {
		Subjects   []string `json:"subjects:as,omitempty"`
		Resources  []string `json:"resources:as,omitempty"`
		Conditions []string `json:"conditions:as,omitempty"`
		Action     string   `json:"action:s,omitempty"`
	}
	TestStream struct {
		Nonce           string            `json:"nonce:s,omitempty"`
		CreatedDateTime string            `json:"createdDateTime:s,omitempty"`
		Policies        []*TestPolicy     `json:"policies:ao,omitempty"`
		Signature       *crypto.Signature `json:"@signature:o,omitempty"`
		Identity        crypto.PublicKey  `json:"@identity:s,omitempty"`
	}
	TestSubscribed struct {
		Nonce     string            `json:"nonce:s,omitempty"`
		Stream    object.Hash       `json:"stream:s,omitempty"`
		Signature *crypto.Signature `json:"@signature:o,omitempty"`
		Identity  crypto.PublicKey  `json:"@identity:s,omitempty"`
	}
	TestUnsubscribed struct {
		Nonce     string            `json:"nonce:s,omitempty"`
		Stream    object.Hash       `json:"stream:s,omitempty"`
		Signature *crypto.Signature `json:"@signature:o,omitempty"`
		Identity  crypto.PublicKey  `json:"@identity:s,omitempty"`
	}
)

func (e *TestPolicy) GetType() string {
	return "nimona.io/fixtures.TestPolicy"
}

func (e *TestPolicy) ToObject() object.Object {
	m := map[string]interface{}{}
	m["@type:s"] = "nimona.io/fixtures.TestPolicy"
	if len(e.Subjects) > 0 {
		m["subjects:as"] = e.Subjects
	}
	if len(e.Resources) > 0 {
		m["resources:as"] = e.Resources
	}
	if len(e.Conditions) > 0 {
		m["conditions:as"] = e.Conditions
	}
	m["action:s"] = e.Action
	return object.Object(m)
}

func (e *TestPolicy) FromObject(o object.Object) error {
	b, _ := json.Marshal(map[string]interface{}(o))
	return json.Unmarshal(b, e)
}

func (e *TestStream) GetType() string {
	return "nimona.io/fixtures.TestStream"
}

func (e *TestStream) ToObject() object.Object {
	m := map[string]interface{}{}
	m["@type:s"] = "nimona.io/fixtures.TestStream"
	m["nonce:s"] = e.Nonce
	m["createdDateTime:s"] = e.CreatedDateTime
	if len(e.Policies) > 0 {
		m["policies:ao"] = func() []interface{} {
			a := make([]interface{}, len(e.Policies))
			for i, v := range e.Policies {
				a[i] = v.ToObject().ToMap()
			}
			return a
		}()
	}
	if e.Signature != nil {
		m["@signature:o"] = e.Signature.ToObject().ToMap()
	}
	m["@identity:s"] = e.Identity
	return object.Object(m)
}

func (e *TestStream) FromObject(o object.Object) error {
	b, _ := json.Marshal(map[string]interface{}(o))
	return json.Unmarshal(b, e)
}

func (e *TestSubscribed) GetType() string {
	return "nimona.io/fixtures.TestSubscribed"
}

func (e *TestSubscribed) ToObject() object.Object {
	m := map[string]interface{}{}
	m["@type:s"] = "nimona.io/fixtures.TestSubscribed"
	m["nonce:s"] = e.Nonce
	m["stream:s"] = e.Stream
	if e.Signature != nil {
		m["@signature:o"] = e.Signature.ToObject().ToMap()
	}
	m["@identity:s"] = e.Identity
	return object.Object(m)
}

func (e *TestSubscribed) FromObject(o object.Object) error {
	b, _ := json.Marshal(map[string]interface{}(o))
	return json.Unmarshal(b, e)
}

func (e *TestUnsubscribed) GetType() string {
	return "nimona.io/fixtures.TestUnsubscribed"
}

func (e *TestUnsubscribed) ToObject() object.Object {
	m := map[string]interface{}{}
	m["@type:s"] = "nimona.io/fixtures.TestUnsubscribed"
	m["nonce:s"] = e.Nonce
	m["stream:s"] = e.Stream
	if e.Signature != nil {
		m["@signature:o"] = e.Signature.ToObject().ToMap()
	}
	m["@identity:s"] = e.Identity
	return object.Object(m)
}

func (e *TestUnsubscribed) FromObject(o object.Object) error {
	b, _ := json.Marshal(map[string]interface{}(o))
	return json.Unmarshal(b, e)
}
