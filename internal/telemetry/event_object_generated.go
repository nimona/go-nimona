// Code generated by nimona.io/tools/objectify. DO NOT EDIT.

// +build !generate

package telemetry

import (
	"github.com/mitchellh/mapstructure"
	"nimona.io/pkg/object"
)

const (
	ObjectEventType = "nimona.io/telemetry/object"
)

// ToObject returns a f12n object
func (s ObjectEvent) ToObject() *object.Object {
	o := object.New()
	o.SetType(ObjectEventType)
	if s.Direction != "" {
		o.SetRaw("direction", s.Direction)
	}
	if s.ContentType != "" {
		o.SetRaw("contentType", s.ContentType)
	}
	o.SetRaw("size", s.ObjectSize)
	return o
}

func anythingToAnythingForObjectEvent(
	from interface{},
	to interface{},
) error {
	config := &mapstructure.DecoderConfig{
		Result:  to,
		TagName: "json",
	}

	decoder, err := mapstructure.NewDecoder(config)
	if err != nil {
		return err
	}

	if err := decoder.Decode(from); err != nil {
		return err
	}

	return nil
}

// FromObject populates the struct from a f12n object
func (s *ObjectEvent) FromObject(o *object.Object) error {
	atoa := anythingToAnythingForObjectEvent
	if err := atoa(o.GetRaw("direction"), &s.Direction); err != nil {
		return err
	}
	if err := atoa(o.GetRaw("contentType"), &s.ContentType); err != nil {
		return err
	}
	if err := atoa(o.GetRaw("size"), &s.ObjectSize); err != nil {
		return err
	}

	if ao, ok := interface{}(s).(interface{ afterFromObject() }); ok {
		ao.afterFromObject()
	}

	return nil
}

// GetType returns the object's type
func (s ObjectEvent) GetType() string {
	return ObjectEventType
}
