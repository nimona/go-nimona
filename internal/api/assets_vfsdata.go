// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package api

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 1, 29, 21, 45, 43, 580704707, time.UTC),
		},
		"/index.html": &vfsgen۰CompressedFileInfo{
			name:             "index.html",
			modTime:          time.Date(2019, 1, 29, 23, 22, 41, 253539119, time.UTC),
			uncompressedSize: 6895,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x58\x5b\x73\xdb\x36\x16\x7e\xf7\xaf\x38\xa5\x77\x4b\x29\x96\x48\x39\x1e\xc7\x35\x2d\x29\xdb\x8b\x3d\x6d\x37\x6d\x77\xd6\x99\xf6\xc1\x71\x3b\x10\x71\x24\x21\x06\x01\x06\x00\x25\x2b\x89\xff\xfb\x0e\x40\x8a\x04\x45\xd9\x75\x67\x76\x5f\x56\xca\x64\x68\xe0\x5c\xbf\x73\xa5\xc6\x5f\x0c\x87\xf0\x0d\xd1\x48\x41\x0a\x58\x1a\x93\xeb\x24\x8e\x67\x5c\x2e\x22\x83\x24\x33\x0a\x71\x29\x0b\x8d\x51\x2a\xb3\x98\x88\x21\x13\x46\x49\x5a\xa4\x86\x49\x31\x34\x72\xb8\xc6\x99\x96\xe9\x1d\x1a\x0d\xc3\xe1\xf4\x60\xbc\x34\x19\x9f\x1e\x1c\x8c\x97\x48\xe8\xf4\x00\x60\xac\xcd\x86\xa3\x7d\x02\x78\x31\x80\x17\xc9\x0c\xe7\x52\xa1\x7d\x22\x73\x83\x0a\x3e\xb9\x2b\xfb\x19\x66\xf2\xe3\x70\x26\xef\x87\x9a\x7d\x64\x62\x91\xc0\x4c\x2a\x8a\xca\x1e\x5d\x34\x44\x6b\x9c\xdd\x31\xf3\xa7\x74\x4f\xdf\x3f\x1c\x54\x0f\xd6\x5c\xcf\x84\xb9\x14\x66\x38\x27\x19\xe3\x9b\x04\xbe\x47\xbe\x42\xc3\x52\x32\x80\xaf\x15\x23\x7c\x00\x9a\x08\x3d\xd4\xa8\xd8\xfc\xa2\xcd\xa2\xd9\x47\x4c\xe0\x78\x34\xfa\xbb\x67\x01\x49\xef\x16\x4a\x16\x82\x26\x70\x78\x72\x72\xd2\xd1\x7d\x98\x93\x05\x0e\xd7\x8a\xe4\x79\x0b\x87\x35\xa3\x66\x99\xc0\xab\xd3\x51\x7e\xff\x88\xb8\xab\xab\xab\xe6\x26\x27\x94\x3a\x3f\x8f\x31\x6b\x4e\x33\xa2\x16\x4c\xb8\x43\x20\x85\x91\x3e\x34\x0e\x0e\x23\xf3\x04\x4e\xf3\x7b\xd0\x92\x33\x0a\x87\xaf\xce\xd3\xb3\xb3\x93\x1d\x04\x97\x84\xca\x75\x02\x23\x78\x99\xdf\xc3\xf1\x28\xbf\x07\xb5\x98\x91\xde\x68\xe0\xbe\xd1\x57\xfd\x2e\xa2\xc7\x9e\x2b\xa5\x11\xa5\xaa\x51\x17\x00\x6d\x88\x29\xf4\x2e\xfe\x25\x98\xa3\xe8\x5c\x75\xfd\x19\xce\xa4\x31\x32\x4b\xe0\xd8\xbb\xac\x05\x46\x32\x47\xe1\x89\x4b\x25\x97\x2a\x81\x85\x42\x14\x5d\xe2\x94\x4b\x9b\xf6\x1d\x72\x85\xd4\x23\xae\x9e\x0a\x3f\x4d\x38\xd3\x66\xe8\x12\x3b\x01\x21\x05\x76\x51\x1f\xed\x09\xcf\x68\x6f\xd2\x8c\xa2\xf3\xd3\x7d\xbe\x14\x1c\x38\xf3\x74\x36\x62\x22\x4b\x0f\xa3\xe8\xec\xb4\x05\x50\x9d\xe5\x15\x40\x4d\x64\x2f\x2f\x2f\xf7\x8b\x4f\xe6\x4c\x69\x33\x4c\x97\x8c\xfb\x38\xf8\x09\xf2\x1c\x31\x40\xd9\x2a\x11\x66\x59\x0a\xea\xbd\xec\x7b\xb2\x0c\xde\x9b\xa1\x5c\xa1\x9a\x73\x9b\x48\xc8\x39\xcb\x35\xd3\x8d\xd9\xeb\x25\x33\x38\xd4\x39\x49\x1d\x98\xb6\x1c\x9a\xcb\x86\x71\xc9\x28\xdd\x13\xc4\x52\xbf\xce\x89\x1f\x76\xca\x74\xce\xc9\x26\x01\x26\x38\x13\x38\x9c\x71\x99\xde\x5d\xec\xd6\xd7\x79\xab\xbc\x5c\x44\xd6\xc8\x16\x4b\x63\x1b\x06\xa7\x17\xbb\x69\x71\x78\x7e\x7e\xfe\x48\x04\xcf\x5a\x81\x70\x2e\x1b\x45\x84\x9e\x4b\x95\x25\x50\xd8\xfa\x4e\x89\xf6\xd2\x84\xa3\x31\xa8\x9c\xd7\x65\xe5\xe6\xdd\xd6\x14\x69\x14\xc6\x8f\x4a\xdd\x00\x86\x5b\x8b\xae\xce\xec\xb7\x5b\x57\x19\x6a\x6d\x7b\x8b\xd5\xff\x48\x35\x1e\x47\x7b\xb3\xce\xda\x4e\x14\x92\x6e\x3b\x6a\x37\xb7\x9d\x6c\xdc\xdf\x0e\xf7\xa4\x67\x2b\xa1\xbe\x3b\xb7\xdf\x4e\x06\x2b\x42\x59\xa1\x13\x38\xc9\x77\xfb\x79\xd5\x8d\x98\xd0\x68\x60\xe4\x44\x1d\x37\x2d\x09\xaa\x7f\xd1\x71\xdf\x2b\x48\x26\x86\xcb\x2a\xac\xc7\xa3\x56\xc8\x9f\xd3\x51\x98\xc8\x0b\xf3\xff\x03\xc6\x33\x3c\x9e\x15\xc6\xc8\xbf\x50\x4d\x4f\xdb\x59\xba\xd9\xee\x91\x4f\x34\x79\x0f\xc9\x57\xb6\xc9\xb5\x26\x5a\x95\xf5\xae\x61\xec\xe9\xb8\x30\x8a\x5e\x9e\x76\x0b\x91\x70\xb6\x10\x09\xa4\x28\x0c\xaa\x47\xc6\xe9\x37\x5f\xdb\xef\x73\x5a\xa9\xd7\x03\x76\x10\xbb\x31\x9b\x1c\x27\x81\x2e\x66\x19\x33\xc1\xed\xde\xc2\x4d\xe0\xf0\xab\x57\xb3\x93\x97\xf4\x39\xaa\x4e\xe9\x19\x3d\x9e\x3f\xa2\x2d\x59\xda\xd6\xe8\x29\x91\xb6\x95\x98\x8d\xeb\x46\xa7\x1e\x66\x85\xd2\x16\xb4\x5c\x32\xdf\xff\x5a\x1a\x79\x6c\xf9\xc9\xa4\x90\xae\x29\xef\xc0\x49\x31\x95\x8a\xd8\xed\x6f\x37\xac\x55\x78\xda\x0e\xd6\x8a\x72\x85\x4f\xf6\xb2\xc5\x52\x6a\xb3\x13\xda\x6e\x95\x68\xc6\x57\x7e\x14\x9b\xd5\xc7\xae\x26\x2f\xf7\x94\x77\xd2\x3a\x6d\x9a\xeb\x7b\x2d\xc5\xf0\x0e\x37\xdd\xf1\x3f\x53\x72\xbd\x67\x5b\x70\x0c\x2b\xc2\x0b\xec\xb2\x08\xb2\xda\x3c\xc2\xa1\x8d\x62\x62\xd1\x65\x91\x9c\xad\xb0\xe1\xb1\xff\x8f\xe3\x7a\x57\x1e\xeb\x54\xb1\xdc\x94\x6b\x73\x1c\x5b\xf4\x8c\xd9\x40\xae\x98\x30\x56\xdc\x5c\xc9\xcc\x2d\xeb\x49\x1c\xbf\xd7\x73\x46\x29\xc7\x48\xa0\x89\x0b\xf1\xe6\xfa\xc7\xd8\xb1\xb1\x39\xf4\xbe\xe0\x6c\xa6\x88\xda\xf4\x2b\x45\x2b\xa2\xa0\x3a\x82\x09\x7c\x7a\xb8\x28\x8d\xad\x8e\x9c\xc5\xf6\xbc\xa2\x56\x98\x73\x92\xda\x08\xcc\x0b\xe1\x36\x7e\xe8\x65\xc4\xa4\xcb\x01\xe4\x3f\x08\x8a\xc2\x0c\x20\xff\x27\x6e\x06\x90\xff\x6a\xd7\xe3\xfc\x52\x50\x7f\xf6\x5b\x6d\x16\xe2\x09\x84\x63\x37\xa2\x53\x4e\xb4\x9e\x6c\xa1\x9f\x86\x17\x2d\xd2\x15\xe1\x7b\x49\x1d\xe8\xbb\xc4\xda\xa8\xbd\xc4\x25\xde\xbb\xd4\x96\xb6\x32\x19\x3e\x7f\x86\xd0\xbb\xb6\x30\x59\x27\xfa\xf5\x09\x38\x72\x05\x47\xce\xf8\x23\xe7\x62\x54\x61\xd1\x8b\x6f\x82\x04\x6e\xe3\xc5\x00\xc2\xb0\x0f\x47\x10\x8e\x63\x6b\xc2\x34\x81\x5d\x99\xbf\x12\xbe\x4f\xa6\xbb\xb8\x19\xdd\xc2\x64\x02\x61\x10\xc2\x6b\xe7\x4a\x62\xbd\xb7\xf2\xec\xad\x27\xd6\x13\xaa\xd0\x14\x4a\x54\x32\x2e\x05\x2d\x1d\x69\x16\xf0\x41\x53\x69\xc6\x6c\xfe\x65\x53\xc5\x0f\x9c\x9c\xbd\xdf\x8d\x8d\x05\xec\x0d\x13\x08\x13\x88\x7f\xef\xc1\x8b\x7e\x2f\xb8\x79\xb7\xbe\x3d\x0a\x12\xe8\xbf\xee\x05\x37\xbf\x07\xb7\x2f\x82\xcf\x37\xef\xd6\xd1\xd1\xf0\xf6\x45\xff\x75\xef\x66\x70\xf3\xe9\xb6\xff\xfa\x6f\x71\xb6\xe8\xd8\xf5\xe3\xf5\x2f\x3f\x47\x25\xfa\x6c\xbe\xb1\xea\x06\x20\x0a\xce\x07\x70\xe2\xc3\xd0\x00\xf9\xa5\x03\xf1\x4b\x92\xe5\x17\x61\xbf\x39\x7e\xf7\x2e\x28\x2f\x3e\x14\xd2\x5c\x84\xfb\x79\xc7\x25\x09\x37\x2d\xd6\x69\x79\xba\x78\x8c\x6d\xeb\xef\xa0\x95\xf0\xdb\x6b\xd5\x6f\x97\xe3\x83\xfd\x73\x1c\x6f\x2b\x71\x1c\x97\xaf\xb4\x07\xe3\x99\xa4\x1b\x57\xa4\x94\xad\x80\xd1\x49\xe0\xbf\xc7\x05\x65\xcd\x8e\x97\x27\xd3\x9f\x59\x26\x05\x81\xfa\x0d\x19\xf0\x9e\x64\x39\xc7\x71\xbc\x3c\xa9\xa8\xb6\x12\xca\x17\xa1\x60\xfa\xad\x14\x02\x53\x5b\xe2\x51\x14\x8d\x63\xca\x56\xd3\xb2\x42\xc7\x6e\x95\xb3\xa4\xfe\x6e\x17\x00\x71\xd1\x9d\x04\x87\x01\x64\x68\x96\xd2\x5a\x23\xb5\xa9\xac\x00\x18\xd7\x0b\x9d\xc7\x1b\x80\x73\x78\x29\x39\x45\x35\x09\x7e\x53\xcc\x20\x6c\x64\xa1\xa0\x22\x80\x25\x2a\x8c\xa2\x28\x00\x85\x1f\x0a\xa6\x90\x4e\xc7\xf1\x56\x52\x2d\xba\xdc\x8d\xac\x5c\x85\x29\xcb\x19\x0a\xb3\x23\xf9\xdf\xdb\xf3\x50\xdb\x5a\x6a\xc4\x41\x5c\x4b\xa9\xf6\x8d\xd6\xf4\x9c\x5e\xa3\xa0\xf0\x53\x69\xcc\x38\x2e\x49\x2a\xc8\x62\xeb\xf8\x16\x95\x82\xfb\x7e\xe9\x60\x3a\x8e\x0b\xee\x62\x53\x63\xd7\x6a\xa5\x85\x72\x2d\x66\xad\x93\x38\x0e\xe1\x08\xb8\x4c\xdd\x2c\x8b\xec\xf4\x11\x24\x43\x5b\x5c\xf5\x61\x2e\x95\x81\xd7\x10\x26\x2d\x52\x77\x9a\x6c\xcb\x3f\x26\x39\x8b\x57\xc7\xb1\x36\x0a\x49\xa6\x63\xe1\x82\x1e\x31\x19\x57\x46\x85\x55\x8f\x5d\x33\x41\xe5\x3a\x92\x82\x4b\x42\x61\xe2\x55\x66\x53\x96\xb6\x28\x5d\xa0\x27\x40\x65\x5a\x64\x28\x4c\xb4\x40\x73\xc9\xd1\x3e\x7e\xb3\xf9\x81\xf6\x42\x3f\xfe\x4d\xf5\x5b\xce\xea\xe6\x8a\x21\xa7\xcf\x90\xd0\x66\xae\x43\xf8\xa7\xec\x35\xe5\x5e\xed\xfa\x0d\xd3\xe6\x19\xda\x75\x9b\xbb\xac\x90\xeb\xf2\xf7\x80\x27\xb8\xcb\x42\xb1\xbc\x15\x73\x4d\xf9\xa1\x40\xb5\xb9\x46\x8e\xa9\x91\xaa\x17\xda\x22\x0d\xfb\x11\xa1\xf4\x72\x85\xc2\x58\xab\x50\xa0\xea\x85\x29\x67\xe9\x5d\x38\xf0\xf0\x47\xbf\x2f\xda\xd6\x8d\x91\x21\x6a\x81\x26\x72\x73\xe5\x67\x92\x61\x64\xe4\x1b\xb9\x46\xf5\x2d\xd1\xd8\xeb\xc3\xc4\xf6\x6e\x3b\x83\x43\x9f\x15\x76\x40\x8c\xca\x6d\x61\x02\xb5\x3c\x4a\x0c\xd1\x68\xa2\x3b\xdc\x34\xfd\xf3\x61\xdb\x75\x1a\xa7\x52\x98\x80\xc0\x35\xfc\x86\xb3\x6b\x07\x4c\xaf\x50\xbc\xc6\x2b\x8d\xa4\x70\x3f\x74\xf8\x49\x84\xd6\x4b\xdf\x1a\x1f\xd1\x88\x09\x81\xea\xfb\xb7\x3f\xbd\xb1\xd9\x5f\x35\x19\xa4\x60\x64\x02\x36\xb7\x1d\x73\x94\x16\x4a\xa1\x30\x6f\x4b\x5b\x0b\xc5\x2f\xf6\x0b\xab\x51\xb1\xc2\xac\x21\xf5\x90\x7a\xa8\x3d\xb0\xd9\x19\x49\x51\xd6\x73\xdb\x50\xdf\x48\x8c\x72\xe5\x94\x7f\x87\x73\x52\x70\xd3\xeb\xb7\xe7\xb6\x8d\x22\x4c\x5a\x99\x5d\xa2\xba\x33\xde\xb7\xb8\xdb\xdc\xb9\xd9\x17\x85\xdb\x36\x83\x9c\xbd\xc7\xd4\x78\xab\x8e\xfd\x04\xff\x48\xcd\x7d\x90\x40\xd0\xa9\xe1\x60\xd0\x22\xcb\x25\x67\xe9\x26\x48\x5a\xdc\x1e\x7f\x5c\x11\x0c\xda\xd7\xba\x70\x5a\x75\x90\x78\x06\xef\xd0\x94\xfd\xdc\x92\xdc\x04\x0a\x09\x0d\x6e\x77\x08\x70\x3e\xc7\xd4\x58\x2d\x84\x73\xb9\x0e\xbc\xdb\x87\x96\x95\x7f\x34\x3a\x1e\x55\x18\x58\x7c\x83\xc4\xc1\xdc\x3a\x37\x2c\x43\x6d\x48\x96\x07\x09\xf4\x6c\x26\x7e\x47\x0c\xf6\xfa\xfd\xc8\xc8\x1f\xae\x7f\xb9\x76\x53\xbe\xd7\xef\xa4\xb0\xcd\x4d\x8d\x82\xf6\xba\xcb\x00\xa6\xa6\xdf\xef\x2c\x0d\x73\xc2\x9b\x9f\x45\x9a\xec\xb1\x19\x8e\x4a\x49\xd5\xce\x1c\x7b\xd2\x6f\xad\xd2\x42\x4b\x8e\x91\xbb\xe8\x85\x75\xb5\xc0\xa5\x3d\xa8\x52\xdb\x31\xed\x57\xb1\x9d\x76\xbe\x92\x4c\x2f\x76\xd7\xa4\x3a\x59\x9c\x57\x39\x51\x1a\x2d\x99\xab\xe6\xfe\x45\xc7\x1a\x2e\x17\x5b\x87\x5b\x5d\xa5\x3c\x8b\xfe\xa0\x4c\x61\xa9\xcc\xb5\x11\x26\x52\x99\x31\xb1\xd8\x69\x25\x1c\x0d\x10\x4a\x15\x6a\x9b\xd3\x61\x8e\xa8\xdc\x18\xda\x4a\xd1\x6c\x21\x50\x79\x0c\xbe\x0a\x52\x98\xa5\x54\xcc\x6c\xfa\x3b\x29\xea\x49\x64\x76\x19\xb6\x6f\x8c\xbe\xd4\x9a\xd1\x4f\x2b\xef\xd9\x6f\xf2\xed\xa6\x32\xe6\xac\x5a\xc3\xed\x36\x80\x6c\x85\x34\x98\x86\x70\xd4\x52\x1f\xda\x85\x67\xea\x76\xf6\x69\x35\xdd\x93\xed\xa2\xdb\x58\xe1\x8a\xde\xad\xc0\x96\xfa\x29\x19\x57\x4a\x66\x5b\x01\x63\x02\x4b\x85\x73\xb7\x0a\x55\x86\xd8\x0e\x1d\x80\x0d\x93\x7d\xdd\x98\x04\x56\x47\x17\x23\xbb\x47\xb7\x51\x75\x83\x3d\x98\xee\x05\xa6\x34\x8c\x4c\x1f\x33\x2e\xe6\xcc\x31\xee\x47\xaa\xa9\x18\x40\xae\xb1\x15\x9d\x67\x61\xab\xed\x92\xf5\x3f\xc7\xf5\xad\xfc\x8b\xa8\x6e\x61\x6a\xda\x8c\x7d\xc3\xe9\xa0\xd8\xb9\xfe\x6f\x20\xd9\x5e\xda\x0f\x5a\x4b\xfb\xc1\x38\x2e\xb7\x75\xbb\xbe\x9b\x8c\x4f\xff\x13\x00\x00\xff\xff\x91\x48\x8c\xab\xef\x1a\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/index.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
