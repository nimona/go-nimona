// Code generated by nimona.io/internal/docgen. DO NOT EDIT.

package docgen

import (
	"github.com/vikyd/zero"
)

func (t *Fixture) DocumentMap() map[string]any {
	m := map[string]any{}

	// # t.StringConst
	//
	// Type: string, Kind: string
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		m["stringConst"] = "foo"
	}

	// # t.String
	//
	// Type: string, Kind: string
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		if !zero.IsZeroVal(t.String) {
			m["string"] = t.String
		}
	}

	// # t.Uint64
	//
	// Type: uint64, Kind: uint64
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		if !zero.IsZeroVal(t.Uint64) {
			m["uint64"] = t.Uint64
		}
	}

	// # t.Int64
	//
	// Type: int64, Kind: int64
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		if !zero.IsZeroVal(t.Int64) {
			m["int64"] = t.Int64
		}
	}

	// # t.Bytes
	//
	// Type: []uint8, Kind: slice
	// IsSlice: true, IsStruct: false, IsPointer: false
	//
	// ElemType: uint8, ElemKind: uint8
	// IsElemSlice: false, IsElemStruct: false, IsElemPointer: false
	{
		if !zero.IsZeroVal(t.Bytes) {
			m["bytes"] = t.Bytes
		}
	}

	// # t.Bool
	//
	// Type: bool, Kind: bool
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		if !zero.IsZeroVal(t.Bool) {
			m["bool"] = t.Bool
		}
	}

	// # t.MapPtr
	//
	// Type: docgen.Fixture, Kind: struct
	// IsSlice: false, IsStruct: true, IsPointer: true
	{
		if !zero.IsZeroVal(t.MapPtr) {
			m["mapPtr"] = t.MapPtr.DocumentMap()
		}
	}

	// # t.RepeatedString
	//
	// Type: []string, Kind: slice
	// IsSlice: true, IsStruct: false, IsPointer: false
	//
	// ElemType: string, ElemKind: string
	// IsElemSlice: false, IsElemStruct: false, IsElemPointer: false
	{
		if !zero.IsZeroVal(t.RepeatedString) {
			m["repeatedstring"] = t.RepeatedString
		}
	}

	// # t.RepeatedUint64
	//
	// Type: []uint64, Kind: slice
	// IsSlice: true, IsStruct: false, IsPointer: false
	//
	// ElemType: uint64, ElemKind: uint64
	// IsElemSlice: false, IsElemStruct: false, IsElemPointer: false
	{
		if !zero.IsZeroVal(t.RepeatedUint64) {
			m["repeateduint64"] = t.RepeatedUint64
		}
	}

	// # t.RepeatedInt64
	//
	// Type: []int64, Kind: slice
	// IsSlice: true, IsStruct: false, IsPointer: false
	//
	// ElemType: int64, ElemKind: int64
	// IsElemSlice: false, IsElemStruct: false, IsElemPointer: false
	{
		if !zero.IsZeroVal(t.RepeatedInt64) {
			m["repeatedint64"] = t.RepeatedInt64
		}
	}

	// # t.RepeatedBytes
	//
	// Type: [][]uint8, Kind: slice
	// IsSlice: true, IsStruct: false, IsPointer: false
	//
	// ElemType: []uint8, ElemKind: slice
	// IsElemSlice: true, IsElemStruct: false, IsElemPointer: false
	{
		if !zero.IsZeroVal(t.RepeatedBytes) {
			m["repeatedbytes"] = t.RepeatedBytes
		}
	}

	// # t.RepeatedBool
	//
	// Type: []bool, Kind: slice
	// IsSlice: true, IsStruct: false, IsPointer: false
	//
	// ElemType: bool, ElemKind: bool
	// IsElemSlice: false, IsElemStruct: false, IsElemPointer: false
	{
		if !zero.IsZeroVal(t.RepeatedBool) {
			m["repeatedbool"] = t.RepeatedBool
		}
	}

	// # t.RepeatedMap
	//
	// Type: []docgen.Fixture, Kind: slice
	// IsSlice: true, IsStruct: false, IsPointer: false
	//
	// ElemType: docgen.Fixture, ElemKind: struct
	// IsElemSlice: false, IsElemStruct: true, IsElemPointer: false
	{
		if !zero.IsZeroVal(t.RepeatedMap) {
			sm := []any{}
			for _, v := range t.RepeatedMap {
				if !zero.IsZeroVal(t.RepeatedMap) {
					sm = append(sm, v.DocumentMap())
				}
			}
			m["repeatedmap"] = sm
		}
	}

	// # t.RepeatedMapPtr
	//
	// Type: []*docgen.Fixture, Kind: slice
	// IsSlice: true, IsStruct: false, IsPointer: false
	//
	// ElemType: docgen.Fixture, ElemKind: struct
	// IsElemSlice: false, IsElemStruct: true, IsElemPointer: true
	{
		if !zero.IsZeroVal(t.RepeatedMapPtr) {
			sm := []any{}
			for _, v := range t.RepeatedMapPtr {
				if !zero.IsZeroVal(t.RepeatedMapPtr) {
					sm = append(sm, v.DocumentMap())
				}
			}
			m["repeatedmapPtr"] = sm
		}
	}

	return m
}

func (t *Fixture) FromDocumentMap(m map[string]any) {
	*t = Fixture{}

	// # t.String
	//
	// Type: string, Kind: string
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		if v, ok := m["string"].(string); ok {
			t.String = v
		}
	}

	// # t.Uint64
	//
	// Type: uint64, Kind: uint64
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		if v, ok := m["uint64"].(uint64); ok {
			t.Uint64 = v
		}
	}

	// # t.Int64
	//
	// Type: int64, Kind: int64
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		if v, ok := m["int64"].(int64); ok {
			t.Int64 = v
		}
	}

	// # t.Bytes
	//
	// Type: []uint8, Kind: slice
	// IsSlice: true, IsStruct: false, IsPointer: false
	//
	// ElemType: uint8, ElemKind: uint8
	// IsElemSlice: false, IsElemStruct: false, IsElemPointer: false
	{
		if v, ok := m["bytes"].([]uint8); ok {
			t.Bytes = []byte(v)
		}
	}

	// # t.Bool
	//
	// Type: bool, Kind: bool
	// IsSlice: false, IsStruct: false, IsPointer: false
	{
		if v, ok := m["bool"].(bool); ok {
			t.Bool = v
		}
	}

	// # t.MapPtr
	//
	// Type: docgen.Fixture, Kind: struct
	// IsSlice: false, IsStruct: true, IsPointer: true
	{
		if v, ok := m["mapPtr"].(map[string]any); ok {
			e := Fixture{}
			e.FromDocumentMap(v)
			t.MapPtr = &e
		}
	}

	// # t.RepeatedString
	//
	// Type: []string, Kind: slice
	// IsSlice: true, IsStruct: false, IsPointer: false
	//
	// ElemType: string, ElemKind: string
	// IsElemSlice: false, IsElemStruct: false, IsElemPointer: false
	{
		if v, ok := m["repeatedstring"].([]string); ok {
			t.RepeatedString = v
		}
	}

	// # t.RepeatedUint64
	//
	// Type: []uint64, Kind: slice
	// IsSlice: true, IsStruct: false, IsPointer: false
	//
	// ElemType: uint64, ElemKind: uint64
	// IsElemSlice: false, IsElemStruct: false, IsElemPointer: false
	{
		if v, ok := m["repeateduint64"].([]uint64); ok {
			t.RepeatedUint64 = v
		}
	}

	// # t.RepeatedInt64
	//
	// Type: []int64, Kind: slice
	// IsSlice: true, IsStruct: false, IsPointer: false
	//
	// ElemType: int64, ElemKind: int64
	// IsElemSlice: false, IsElemStruct: false, IsElemPointer: false
	{
		if v, ok := m["repeatedint64"].([]int64); ok {
			t.RepeatedInt64 = v
		}
	}

	// # t.RepeatedBytes
	//
	// Type: [][]uint8, Kind: slice
	// IsSlice: true, IsStruct: false, IsPointer: false
	//
	// ElemType: []uint8, ElemKind: slice
	// IsElemSlice: true, IsElemStruct: false, IsElemPointer: false
	{
		if v, ok := m["repeatedbytes"].([][]uint8); ok {
			t.RepeatedBytes = [][]byte(v)
		}
	}

	// # t.RepeatedBool
	//
	// Type: []bool, Kind: slice
	// IsSlice: true, IsStruct: false, IsPointer: false
	//
	// ElemType: bool, ElemKind: bool
	// IsElemSlice: false, IsElemStruct: false, IsElemPointer: false
	{
		if v, ok := m["repeatedbool"].([]bool); ok {
			t.RepeatedBool = v
		}
	}

	// # t.RepeatedMap
	//
	// Type: []docgen.Fixture, Kind: slice
	// IsSlice: true, IsStruct: false, IsPointer: false
	//
	// ElemType: docgen.Fixture, ElemKind: struct
	// IsElemSlice: false, IsElemStruct: true, IsElemPointer: false
	{
		sm := []Fixture{}
		if vs, ok := m["repeatedmap"].([]any); ok {
			for _, vi := range vs {
				v, ok := vi.(map[string]any)
				if ok {
					e := Fixture{}
					e.FromDocumentMap(v)
					sm = append(sm, e)
				}
			}
		}
		if len(sm) > 0 {
			t.RepeatedMap = sm
		}
	}

	// # t.RepeatedMapPtr
	//
	// Type: []*docgen.Fixture, Kind: slice
	// IsSlice: true, IsStruct: false, IsPointer: false
	//
	// ElemType: docgen.Fixture, ElemKind: struct
	// IsElemSlice: false, IsElemStruct: true, IsElemPointer: true
	{
		sm := []*Fixture{} // Fixture
		if vs, ok := m["repeatedmapPtr"].([]any); ok {
			for _, vi := range vs {
				v, ok := vi.(map[string]any)
				if ok {
					e := &Fixture{}
					e.FromDocumentMap(v)
					sm = append(sm, e)
				}
			}
		}
		if len(sm) > 0 {
			t.RepeatedMapPtr = sm
		}
	}

}
