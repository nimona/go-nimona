// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package nimona

import (
	"bytes"
	"fmt"
	"io"
	"math"
	"sort"

	cid "github.com/ipfs/go-cid"
	zero "github.com/vikyd/zero"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = bytes.Compare
var _ = xerrors.Errorf
var _ = cid.Undef
var _ = math.E
var _ = sort.Sort
var _ = zero.IsZeroVal

var lengthBufDocumentID = []byte{130}

func (t *DocumentID) MarshalCBORBytes() ([]byte, error) {
	w := bytes.NewBuffer(nil)
	err := t.MarshalCBOR(w)
	if err != nil {
		return nil, err
	}
	return w.Bytes(), nil
}

func (t *DocumentID) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write(lengthBufDocumentID); err != nil {
		return err
	}

	// t._ (string) (string)
	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("nimona://doc"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("nimona://doc")); err != nil {
		return err
	}

	// t.DocumentHash (nimona.Hash) (array)
	if len(t.DocumentHash) > cbg.ByteArrayMaxLen {
		return xerrors.Errorf("Byte array in field t.DocumentHash was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajByteString, uint64(len(t.DocumentHash))); err != nil {
		return err
	}

	if _, err := cw.Write(t.DocumentHash[:]); err != nil {
		return err
	}
	return nil
}

func (t *DocumentID) UnmarshalCBORBytes(b []byte) (err error) {
	return t.UnmarshalCBOR(bytes.NewReader(b))
}

func (t *DocumentID) UnmarshalCBOR(r io.Reader) (err error) {
	*t = DocumentID{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 2 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t._ (string) (string)

	{
		_, err := cbg.ReadString(cr)
		if err != nil {
			return err
		}
	}
	// t.DocumentHash (nimona.Hash) (array)

	maj, extra, err = cr.ReadHeader()
	if err != nil {
		return err
	}

	if extra > cbg.ByteArrayMaxLen {
		return fmt.Errorf("t.DocumentHash: byte array too large (%d)", extra)
	}
	if maj != cbg.MajByteString {
		return fmt.Errorf("expected byte array")
	}

	if extra != 32 {
		return fmt.Errorf("expected array to have 32 elements")
	}

	t.DocumentHash = [32]uint8{}

	if _, err := io.ReadFull(cr, t.DocumentHash[:]); err != nil {
		return err
	}
	return nil
}
