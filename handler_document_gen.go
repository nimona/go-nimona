// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package nimona

import (
	"bytes"
	"fmt"
	"io"
	"math"
	"sort"

	cid "github.com/ipfs/go-cid"
	zero "github.com/vikyd/zero"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = bytes.Compare
var _ = xerrors.Errorf
var _ = cid.Undef
var _ = math.E
var _ = sort.Sort
var _ = zero.IsZeroVal

func (t *DocumentRequest) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)
	fieldCount := 3

	if zero.IsZeroVal(t.Metadata) {
		fieldCount--
	}

	if _, err := cw.Write(cbg.CborEncodeMajorType(cbg.MajMap, uint64(fieldCount))); err != nil {
		return err
	}

	// t._ (string) (string)
	if len("$type") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"$type\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("$type"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("$type")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("core/document.request"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("core/document.request")); err != nil {
		return err
	}

	// t.Metadata (nimona.Metadata) (struct)
	if !zero.IsZeroVal(t.Metadata) {

		if len("$metadata") > cbg.MaxLength {
			return xerrors.Errorf("Value in field \"$metadata\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("$metadata"))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string("$metadata")); err != nil {
			return err
		}

		if err := t.Metadata.MarshalCBOR(cw); err != nil {
			return err
		}
	}

	// t.DocumentID (nimona.DocumentID) (struct)
	if len("documentID") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"documentID\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("documentID"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("documentID")); err != nil {
		return err
	}

	if err := t.DocumentID.MarshalCBOR(cw); err != nil {
		return err
	}
	return nil
}

func (t *DocumentRequest) UnmarshalCBOR(r io.Reader) (err error) {
	if t == nil {
		*t = DocumentRequest{}
	}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("DocumentRequest: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t._ (string) (string) - ignored

		// t.Metadata (nimona.Metadata) (struct)
		case "$metadata":

			{

				if err := t.Metadata.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("unmarshaling t.Metadata: %w", err)
				}

			}
			// t.DocumentID (nimona.DocumentID) (struct)
		case "documentID":

			{

				if err := t.DocumentID.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("unmarshaling t.DocumentID: %w", err)
				}

			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}

func (t *DocumentResponse) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)
	fieldCount := 6

	if zero.IsZeroVal(t.Metadata) {
		fieldCount--
	}

	if zero.IsZeroVal(t.Error) {
		fieldCount--
	}

	if zero.IsZeroVal(t.ErrorDescription) {
		fieldCount--
	}

	if _, err := cw.Write(cbg.CborEncodeMajorType(cbg.MajMap, uint64(fieldCount))); err != nil {
		return err
	}

	// t._ (string) (string)
	if len("$type") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"$type\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("$type"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("$type")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("core/document.response"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("core/document.response")); err != nil {
		return err
	}

	// t.Metadata (nimona.Metadata) (struct)
	if !zero.IsZeroVal(t.Metadata) {

		if len("$metadata") > cbg.MaxLength {
			return xerrors.Errorf("Value in field \"$metadata\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("$metadata"))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string("$metadata")); err != nil {
			return err
		}

		if err := t.Metadata.MarshalCBOR(cw); err != nil {
			return err
		}
	}

	// t.Document (typegen.Deferred) (struct)
	if len("document") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"document\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("document"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("document")); err != nil {
		return err
	}

	if err := t.Document.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.Found (bool) (bool)
	if len("found") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"found\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("found"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("found")); err != nil {
		return err
	}

	if err := cbg.WriteBool(w, t.Found); err != nil {
		return err
	}

	// t.Error (bool) (bool)
	if !zero.IsZeroVal(t.Error) {

		if len("error") > cbg.MaxLength {
			return xerrors.Errorf("Value in field \"error\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("error"))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string("error")); err != nil {
			return err
		}

		if err := cbg.WriteBool(w, t.Error); err != nil {
			return err
		}
	}

	// t.ErrorDescription (string) (string)
	if !zero.IsZeroVal(t.ErrorDescription) {

		if len("errorDescription") > cbg.MaxLength {
			return xerrors.Errorf("Value in field \"errorDescription\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("errorDescription"))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string("errorDescription")); err != nil {
			return err
		}

		if len(t.ErrorDescription) > cbg.MaxLength {
			return xerrors.Errorf("Value in field t.ErrorDescription was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.ErrorDescription))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string(t.ErrorDescription)); err != nil {
			return err
		}
	}
	return nil
}

func (t *DocumentResponse) UnmarshalCBOR(r io.Reader) (err error) {
	if t == nil {
		*t = DocumentResponse{}
	}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("DocumentResponse: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t._ (string) (string) - ignored

		// t.Metadata (nimona.Metadata) (struct)
		case "$metadata":

			{

				if err := t.Metadata.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("unmarshaling t.Metadata: %w", err)
				}

			}
			// t.Document (typegen.Deferred) (struct)
		case "document":

			{

				if err := t.Document.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("failed to read deferred field: %w", err)
				}
			}
			// t.Found (bool) (bool)
		case "found":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}
			if maj != cbg.MajOther {
				return fmt.Errorf("booleans must be major type 7")
			}
			switch extra {
			case 20:
				t.Found = false
			case 21:
				t.Found = true
			default:
				return fmt.Errorf("booleans are either major type 7, value 20 or 21 (got %d)", extra)
			}
			// t.Error (bool) (bool)
		case "error":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}
			if maj != cbg.MajOther {
				return fmt.Errorf("booleans must be major type 7")
			}
			switch extra {
			case 20:
				t.Error = false
			case 21:
				t.Error = true
			default:
				return fmt.Errorf("booleans are either major type 7, value 20 or 21 (got %d)", extra)
			}
			// t.ErrorDescription (string) (string)
		case "errorDescription":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.ErrorDescription = string(sval)
			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
